/**
 * Client
 **/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types; // general types
import $Public = runtime.Types.Public;
import $Utils = runtime.Types.Utils;
import $Extensions = runtime.Types.Extensions;
import $Result = runtime.Types.Result;

export type PrismaPromise<T> = $Public.PrismaPromise<T>;

/**
 * Model User
 *
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>;
/**
 * Model UserProfile
 *
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>;
/**
 * Model UserHeatmap
 *
 */
export type UserHeatmap = $Result.DefaultSelection<Prisma.$UserHeatmapPayload>;
/**
 * Model UserTagStats
 *
 */
export type UserTagStats = $Result.DefaultSelection<Prisma.$UserTagStatsPayload>;
/**
 * Model Post
 *
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>;
/**
 * Model Follow
 *
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>;
/**
 * Model Tag
 *
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>;
/**
 * Model PostTag
 *
 */
export type PostTag = $Result.DefaultSelection<Prisma.$PostTagPayload>;
/**
 * Model TagFollow
 *
 */
export type TagFollow = $Result.DefaultSelection<Prisma.$TagFollowPayload>;
/**
 * Model Comment
 *
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>;
/**
 * Model Like
 *
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>;
/**
 * Model Share
 *
 */
export type Share = $Result.DefaultSelection<Prisma.$SharePayload>;
/**
 * Model Feed
 *
 */
export type Feed = $Result.DefaultSelection<Prisma.$FeedPayload>;
/**
 * Model FeedTrack
 *
 */
export type FeedTrack = $Result.DefaultSelection<Prisma.$FeedTrackPayload>;
/**
 * Model Notification
 *
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>;

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
    MALE: 'MALE';
    FEMLALE: 'FEMLALE';
    OTHER: 'OTHER';
    PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY';
  };

  export type Gender = (typeof Gender)[keyof typeof Gender];

  export const NotificationType: {
    FOLLOW: 'FOLLOW';
    LIKE: 'LIKE';
    COMMENT: 'COMMENT';
    TAG_FOLLOWED: 'TAG_FOLLOWED';
    POST_TAGGED: 'POST_TAGGED';
    MENTION: 'MENTION';
    REPLY: 'REPLY';
    SHARE: 'SHARE';
  };

  export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType];
}

export type Gender = $Enums.Gender;

export const Gender: typeof $Enums.Gender;

export type NotificationType = $Enums.NotificationType;

export const NotificationType: typeof $Enums.NotificationType;

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions
    ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions['log']>
      : never
    : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] };

  /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(
    eventType: V,
    callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel }
  ): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    }
  ): $Utils.JsPromise<R>;

  $extends: $Extensions.ExtendsHook<
    'extends',
    Prisma.TypeMapCb<ClientOptions>,
    ExtArgs,
    $Utils.Call<
      Prisma.TypeMapCb<ClientOptions>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserProfiles
   * const userProfiles = await prisma.userProfile.findMany()
   * ```
   */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userHeatmap`: Exposes CRUD operations for the **UserHeatmap** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserHeatmaps
   * const userHeatmaps = await prisma.userHeatmap.findMany()
   * ```
   */
  get userHeatmap(): Prisma.UserHeatmapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userTagStats`: Exposes CRUD operations for the **UserTagStats** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserTagStats
   * const userTagStats = await prisma.userTagStats.findMany()
   * ```
   */
  get userTagStats(): Prisma.UserTagStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Posts
   * const posts = await prisma.post.findMany()
   * ```
   */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Follows
   * const follows = await prisma.follow.findMany()
   * ```
   */
  get follow(): Prisma.FollowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tags
   * const tags = await prisma.tag.findMany()
   * ```
   */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postTag`: Exposes CRUD operations for the **PostTag** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PostTags
   * const postTags = await prisma.postTag.findMany()
   * ```
   */
  get postTag(): Prisma.PostTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tagFollow`: Exposes CRUD operations for the **TagFollow** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TagFollows
   * const tagFollows = await prisma.tagFollow.findMany()
   * ```
   */
  get tagFollow(): Prisma.TagFollowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Comments
   * const comments = await prisma.comment.findMany()
   * ```
   */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Likes
   * const likes = await prisma.like.findMany()
   * ```
   */
  get like(): Prisma.LikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.share`: Exposes CRUD operations for the **Share** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Shares
   * const shares = await prisma.share.findMany()
   * ```
   */
  get share(): Prisma.ShareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feed`: Exposes CRUD operations for the **Feed** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Feeds
   * const feeds = await prisma.feed.findMany()
   * ```
   */
  get feed(): Prisma.FeedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedTrack`: Exposes CRUD operations for the **FeedTrack** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FeedTracks
   * const feedTracks = await prisma.feedTrack.findMany()
   * ```
   */
  get feedTrack(): Prisma.FeedTrackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Notifications
   * const notifications = await prisma.notification.findMany()
   * ```
   */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF;

  export type PrismaPromise<T> = $Public.PrismaPromise<T>;

  /**
   * Validator
   */
  export import validator = runtime.Public.validator;

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError;
  export import PrismaClientValidationError = runtime.PrismaClientValidationError;

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag;
  export import empty = runtime.empty;
  export import join = runtime.join;
  export import raw = runtime.raw;
  export import Sql = runtime.Sql;

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal;

  export type DecimalJsLike = runtime.DecimalJsLike;

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics;
  export type Metric<T> = runtime.Metric<T>;
  export type MetricHistogram = runtime.MetricHistogram;
  export type MetricHistogramBucket = runtime.MetricHistogramBucket;

  /**
   * Extensions
   */
  export import Extension = $Extensions.UserArgs;
  export import getExtensionContext = runtime.Extensions.getExtensionContext;
  export import Args = $Public.Args;
  export import Payload = $Public.Payload;
  export import Result = $Public.Result;
  export import Exact = $Public.Exact;

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string;
  };

  export const prismaVersion: PrismaVersion;

  /**
   * Utility Types
   */

  export import JsonObject = runtime.JsonObject;
  export import JsonArray = runtime.JsonArray;
  export import JsonValue = runtime.JsonValue;
  export import InputJsonObject = runtime.InputJsonObject;
  export import InputJsonArray = runtime.InputJsonArray;
  export import InputJsonValue = runtime.InputJsonValue;

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
     * Type of `Prisma.DbNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class DbNull {
      private DbNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.JsonNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class JsonNull {
      private JsonNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.AnyNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class AnyNull {
      private AnyNull: never;
      private constructor();
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull;

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull;

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull;

  type SelectAndInclude = {
    select: any;
    include: any;
  };

  type SelectAndOmit = {
    select: any;
    omit: any;
  };

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<
    ReturnType<T>
  >;

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
  };

  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K;
  }[keyof T];

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K;
  };

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>;

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {});

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & K;

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = T extends object
    ? U extends object
      ? (Without<T, U> & U) | (Without<U, T> & T)
      : U
    : T;

  /**
   * Is T a Record?
   */
  type IsObject<T extends any> =
    T extends Array<any>
      ? False
      : T extends Date
        ? False
        : T extends Uint8Array
          ? False
          : T extends BigInt
            ? False
            : T extends object
              ? True
              : False;

  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
    }[K];

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

  type _Either<O extends object, K extends Key, strict extends Boolean> = {
    1: EitherStrict<O, K>;
    0: EitherLoose<O, K>;
  }[strict];

  type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown
    ? _Either<O, K, strict>
    : never;

  export type Union = any;

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
  } & {};

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (U extends unknown ? (k: U) => void : never) extends (
    k: infer I
  ) => void
    ? I
    : never;

  export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<
    Overwrite<
      U,
      {
        [K in keyof U]-?: At<U, K>;
      }
    >
  >;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function
    ? A
    : {
        [K in keyof A]: A[K];
      } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
      ?
          | (K extends keyof O ? { [P in K]: O[P] } & O : O)
          | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
      : never
  >;

  type _Strict<U, _U = U> = U extends unknown
    ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
    : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False;

  // /**
  // 1
  // */
  export type True = 1;

  /**
  0
  */
  export type False = 0;

  export type Not<B extends Boolean> = {
    0: 1;
    1: 0;
  }[B];

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
      ? 1
      : 0;

  export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0;
      1: 1;
    };
    1: {
      0: 1;
      1: 1;
    };
  }[B1][B2];

  export type Keys<U extends Union> = U extends unknown ? keyof U : never;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object
    ? {
        [P in keyof T]: P extends keyof O ? O[P] : never;
      }
    : never;

  type FieldPaths<T, U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>> =
    IsObject<T> extends True ? U : T;

  type GetHavingFields<T> = {
    [K in keyof T]: Or<Or<Extends<'OR', K>, Extends<'AND', K>>, Extends<'NOT', K>> extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
        ? never
        : K;
  }[keyof T];

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<
    T,
    MaybeTupleToUnion<K>
  >;

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;

  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

  type FieldRefInputType<Model, FieldType> = Model extends never
    ? never
    : FieldRef<Model, FieldType>;

  export const ModelName: {
    User: 'User';
    UserProfile: 'UserProfile';
    UserHeatmap: 'UserHeatmap';
    UserTagStats: 'UserTagStats';
    Post: 'Post';
    Follow: 'Follow';
    Tag: 'Tag';
    PostTag: 'PostTag';
    TagFollow: 'TagFollow';
    Comment: 'Comment';
    Like: 'Like';
    Share: 'Share';
    Feed: 'Feed';
    FeedTrack: 'FeedTrack';
    Notification: 'Notification';
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName];

  export type Datasources = {
    db?: Datasource;
  };

  interface TypeMapCb<ClientOptions = {}>
    extends $Utils.Fn<{ extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<
      this['params']['extArgs'],
      ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}
    >;
  }

  export type TypeMap<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > = {
    globalOmitOptions: {
      omit: GlobalOmitOptions;
    };
    meta: {
      modelProps:
        | 'user'
        | 'userProfile'
        | 'userHeatmap'
        | 'userTagStats'
        | 'post'
        | 'follow'
        | 'tag'
        | 'postTag'
        | 'tagFollow'
        | 'comment'
        | 'like'
        | 'share'
        | 'feed'
        | 'feedTrack'
        | 'notification';
      txIsolationLevel: Prisma.TransactionIsolationLevel;
    };
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>;
        fields: Prisma.UserFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[];
          };
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserPayload>;
          };
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUser>;
          };
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserCountArgs<ExtArgs>;
            result: $Utils.Optional<UserCountAggregateOutputType> | number;
          };
        };
      };
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>;
        fields: Prisma.UserProfileFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>;
          };
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>;
          };
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[];
          };
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>;
          };
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[];
          };
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>;
          };
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>;
          };
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.UserProfileUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[];
          };
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>;
          };
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUserProfile>;
          };
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserProfileGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>;
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number;
          };
        };
      };
      UserHeatmap: {
        payload: Prisma.$UserHeatmapPayload<ExtArgs>;
        fields: Prisma.UserHeatmapFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserHeatmapFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserHeatmapFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>;
          };
          findFirst: {
            args: Prisma.UserHeatmapFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserHeatmapFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>;
          };
          findMany: {
            args: Prisma.UserHeatmapFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>[];
          };
          create: {
            args: Prisma.UserHeatmapCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>;
          };
          createMany: {
            args: Prisma.UserHeatmapCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserHeatmapCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>[];
          };
          delete: {
            args: Prisma.UserHeatmapDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>;
          };
          update: {
            args: Prisma.UserHeatmapUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>;
          };
          deleteMany: {
            args: Prisma.UserHeatmapDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserHeatmapUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.UserHeatmapUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>[];
          };
          upsert: {
            args: Prisma.UserHeatmapUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserHeatmapPayload>;
          };
          aggregate: {
            args: Prisma.UserHeatmapAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUserHeatmap>;
          };
          groupBy: {
            args: Prisma.UserHeatmapGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserHeatmapGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserHeatmapCountArgs<ExtArgs>;
            result: $Utils.Optional<UserHeatmapCountAggregateOutputType> | number;
          };
        };
      };
      UserTagStats: {
        payload: Prisma.$UserTagStatsPayload<ExtArgs>;
        fields: Prisma.UserTagStatsFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.UserTagStatsFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.UserTagStatsFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>;
          };
          findFirst: {
            args: Prisma.UserTagStatsFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.UserTagStatsFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>;
          };
          findMany: {
            args: Prisma.UserTagStatsFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>[];
          };
          create: {
            args: Prisma.UserTagStatsCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>;
          };
          createMany: {
            args: Prisma.UserTagStatsCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.UserTagStatsCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>[];
          };
          delete: {
            args: Prisma.UserTagStatsDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>;
          };
          update: {
            args: Prisma.UserTagStatsUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>;
          };
          deleteMany: {
            args: Prisma.UserTagStatsDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.UserTagStatsUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.UserTagStatsUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>[];
          };
          upsert: {
            args: Prisma.UserTagStatsUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$UserTagStatsPayload>;
          };
          aggregate: {
            args: Prisma.UserTagStatsAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateUserTagStats>;
          };
          groupBy: {
            args: Prisma.UserTagStatsGroupByArgs<ExtArgs>;
            result: $Utils.Optional<UserTagStatsGroupByOutputType>[];
          };
          count: {
            args: Prisma.UserTagStatsCountArgs<ExtArgs>;
            result: $Utils.Optional<UserTagStatsCountAggregateOutputType> | number;
          };
        };
      };
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>;
        fields: Prisma.PostFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>;
          };
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>;
          };
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[];
          };
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>;
          };
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[];
          };
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>;
          };
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>;
          };
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[];
          };
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostPayload>;
          };
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregatePost>;
          };
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>;
            result: $Utils.Optional<PostGroupByOutputType>[];
          };
          count: {
            args: Prisma.PostCountArgs<ExtArgs>;
            result: $Utils.Optional<PostCountAggregateOutputType> | number;
          };
        };
      };
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>;
        fields: Prisma.FollowFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>;
          };
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>;
          };
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[];
          };
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>;
          };
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[];
          };
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>;
          };
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>;
          };
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.FollowUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[];
          };
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>;
          };
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateFollow>;
          };
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>;
            result: $Utils.Optional<FollowGroupByOutputType>[];
          };
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>;
            result: $Utils.Optional<FollowCountAggregateOutputType> | number;
          };
        };
      };
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>;
        fields: Prisma.TagFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>;
          };
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>;
          };
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[];
          };
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>;
          };
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[];
          };
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>;
          };
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>;
          };
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[];
          };
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagPayload>;
          };
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateTag>;
          };
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>;
            result: $Utils.Optional<TagGroupByOutputType>[];
          };
          count: {
            args: Prisma.TagCountArgs<ExtArgs>;
            result: $Utils.Optional<TagCountAggregateOutputType> | number;
          };
        };
      };
      PostTag: {
        payload: Prisma.$PostTagPayload<ExtArgs>;
        fields: Prisma.PostTagFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.PostTagFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.PostTagFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>;
          };
          findFirst: {
            args: Prisma.PostTagFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.PostTagFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>;
          };
          findMany: {
            args: Prisma.PostTagFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>[];
          };
          create: {
            args: Prisma.PostTagCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>;
          };
          createMany: {
            args: Prisma.PostTagCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.PostTagCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>[];
          };
          delete: {
            args: Prisma.PostTagDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>;
          };
          update: {
            args: Prisma.PostTagUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>;
          };
          deleteMany: {
            args: Prisma.PostTagDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.PostTagUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.PostTagUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>[];
          };
          upsert: {
            args: Prisma.PostTagUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>;
          };
          aggregate: {
            args: Prisma.PostTagAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregatePostTag>;
          };
          groupBy: {
            args: Prisma.PostTagGroupByArgs<ExtArgs>;
            result: $Utils.Optional<PostTagGroupByOutputType>[];
          };
          count: {
            args: Prisma.PostTagCountArgs<ExtArgs>;
            result: $Utils.Optional<PostTagCountAggregateOutputType> | number;
          };
        };
      };
      TagFollow: {
        payload: Prisma.$TagFollowPayload<ExtArgs>;
        fields: Prisma.TagFollowFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.TagFollowFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.TagFollowFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>;
          };
          findFirst: {
            args: Prisma.TagFollowFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.TagFollowFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>;
          };
          findMany: {
            args: Prisma.TagFollowFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>[];
          };
          create: {
            args: Prisma.TagFollowCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>;
          };
          createMany: {
            args: Prisma.TagFollowCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.TagFollowCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>[];
          };
          delete: {
            args: Prisma.TagFollowDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>;
          };
          update: {
            args: Prisma.TagFollowUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>;
          };
          deleteMany: {
            args: Prisma.TagFollowDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.TagFollowUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.TagFollowUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>[];
          };
          upsert: {
            args: Prisma.TagFollowUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$TagFollowPayload>;
          };
          aggregate: {
            args: Prisma.TagFollowAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateTagFollow>;
          };
          groupBy: {
            args: Prisma.TagFollowGroupByArgs<ExtArgs>;
            result: $Utils.Optional<TagFollowGroupByOutputType>[];
          };
          count: {
            args: Prisma.TagFollowCountArgs<ExtArgs>;
            result: $Utils.Optional<TagFollowCountAggregateOutputType> | number;
          };
        };
      };
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>;
        fields: Prisma.CommentFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>;
          };
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>;
          };
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[];
          };
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>;
          };
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[];
          };
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>;
          };
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>;
          };
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[];
          };
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>;
          };
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateComment>;
          };
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>;
            result: $Utils.Optional<CommentGroupByOutputType>[];
          };
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>;
            result: $Utils.Optional<CommentCountAggregateOutputType> | number;
          };
        };
      };
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>;
        fields: Prisma.LikeFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>;
          };
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>;
          };
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[];
          };
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>;
          };
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[];
          };
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>;
          };
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>;
          };
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.LikeUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[];
          };
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$LikePayload>;
          };
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateLike>;
          };
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>;
            result: $Utils.Optional<LikeGroupByOutputType>[];
          };
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>;
            result: $Utils.Optional<LikeCountAggregateOutputType> | number;
          };
        };
      };
      Share: {
        payload: Prisma.$SharePayload<ExtArgs>;
        fields: Prisma.ShareFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.ShareFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.ShareFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>;
          };
          findFirst: {
            args: Prisma.ShareFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.ShareFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>;
          };
          findMany: {
            args: Prisma.ShareFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[];
          };
          create: {
            args: Prisma.ShareCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>;
          };
          createMany: {
            args: Prisma.ShareCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.ShareCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[];
          };
          delete: {
            args: Prisma.ShareDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>;
          };
          update: {
            args: Prisma.ShareUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>;
          };
          deleteMany: {
            args: Prisma.ShareDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.ShareUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.ShareUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[];
          };
          upsert: {
            args: Prisma.ShareUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$SharePayload>;
          };
          aggregate: {
            args: Prisma.ShareAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateShare>;
          };
          groupBy: {
            args: Prisma.ShareGroupByArgs<ExtArgs>;
            result: $Utils.Optional<ShareGroupByOutputType>[];
          };
          count: {
            args: Prisma.ShareCountArgs<ExtArgs>;
            result: $Utils.Optional<ShareCountAggregateOutputType> | number;
          };
        };
      };
      Feed: {
        payload: Prisma.$FeedPayload<ExtArgs>;
        fields: Prisma.FeedFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.FeedFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.FeedFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>;
          };
          findFirst: {
            args: Prisma.FeedFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.FeedFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>;
          };
          findMany: {
            args: Prisma.FeedFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>[];
          };
          create: {
            args: Prisma.FeedCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>;
          };
          createMany: {
            args: Prisma.FeedCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.FeedCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>[];
          };
          delete: {
            args: Prisma.FeedDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>;
          };
          update: {
            args: Prisma.FeedUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>;
          };
          deleteMany: {
            args: Prisma.FeedDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.FeedUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.FeedUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>[];
          };
          upsert: {
            args: Prisma.FeedUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedPayload>;
          };
          aggregate: {
            args: Prisma.FeedAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateFeed>;
          };
          groupBy: {
            args: Prisma.FeedGroupByArgs<ExtArgs>;
            result: $Utils.Optional<FeedGroupByOutputType>[];
          };
          count: {
            args: Prisma.FeedCountArgs<ExtArgs>;
            result: $Utils.Optional<FeedCountAggregateOutputType> | number;
          };
        };
      };
      FeedTrack: {
        payload: Prisma.$FeedTrackPayload<ExtArgs>;
        fields: Prisma.FeedTrackFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.FeedTrackFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.FeedTrackFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>;
          };
          findFirst: {
            args: Prisma.FeedTrackFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.FeedTrackFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>;
          };
          findMany: {
            args: Prisma.FeedTrackFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>[];
          };
          create: {
            args: Prisma.FeedTrackCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>;
          };
          createMany: {
            args: Prisma.FeedTrackCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.FeedTrackCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>[];
          };
          delete: {
            args: Prisma.FeedTrackDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>;
          };
          update: {
            args: Prisma.FeedTrackUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>;
          };
          deleteMany: {
            args: Prisma.FeedTrackDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.FeedTrackUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.FeedTrackUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>[];
          };
          upsert: {
            args: Prisma.FeedTrackUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$FeedTrackPayload>;
          };
          aggregate: {
            args: Prisma.FeedTrackAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateFeedTrack>;
          };
          groupBy: {
            args: Prisma.FeedTrackGroupByArgs<ExtArgs>;
            result: $Utils.Optional<FeedTrackGroupByOutputType>[];
          };
          count: {
            args: Prisma.FeedTrackCountArgs<ExtArgs>;
            result: $Utils.Optional<FeedTrackCountAggregateOutputType> | number;
          };
        };
      };
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>;
        fields: Prisma.NotificationFieldRefs;
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
          };
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
          };
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[];
          };
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[];
          };
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>;
            result: BatchPayload;
          };
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[];
          };
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>;
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>;
          };
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>;
            result: $Utils.Optional<AggregateNotification>;
          };
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>;
            result: $Utils.Optional<NotificationGroupByOutputType>[];
          };
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>;
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number;
          };
        };
      };
    };
  } & {
    other: {
      payload: any;
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]];
          result: any;
        };
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]];
          result: any;
        };
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]];
          result: any;
        };
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]];
          result: any;
        };
      };
    };
  };
  export const defineExtension: $Extensions.ExtendsHook<
    'define',
    Prisma.TypeMapCb,
    $Extensions.DefaultArgs
  >;
  export type DefaultPrismaClient = PrismaClient;
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal';
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources;
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string;
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat;
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     *
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[];
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    };
    /**
     * Global configuration for omitting model fields by default.
     *
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig;
  }
  export type GlobalOmitConfig = {
    user?: UserOmit;
    userProfile?: UserProfileOmit;
    userHeatmap?: UserHeatmapOmit;
    userTagStats?: UserTagStatsOmit;
    post?: PostOmit;
    follow?: FollowOmit;
    tag?: TagOmit;
    postTag?: PostTagOmit;
    tagFollow?: TagFollowOmit;
    comment?: CommentOmit;
    like?: LikeOmit;
    share?: ShareOmit;
    feed?: FeedOmit;
    feedTrack?: FeedTrackOmit;
    notification?: NotificationOmit;
  };

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error';
  export type LogDefinition = {
    level: LogLevel;
    emit: 'stdout' | 'event';
  };

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition
    ? T['emit'] extends 'event'
      ? T['level']
      : never
    : never;
  export type GetEvents<T extends any> =
    T extends Array<LogLevel | LogDefinition>
      ? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
      : never;

  export type QueryEvent = {
    timestamp: Date;
    query: string;
    params: string;
    duration: number;
    target: string;
  };

  export type LogEvent = {
    timestamp: Date;
    message: string;
    target: string;
  };
  /* End Types for Logging */

  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy';

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName;
    action: PrismaAction;
    args: any;
    dataPath: string[];
    runInTransaction: boolean;
  };

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>
  ) => $Utils.JsPromise<T>;

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>;

  export type Datasource = {
    url?: string;
  };

  /**
   * Count Types
   */

  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    post: number;
    tagStats: number;
    feed: number;
    feedTrack: number;
    heapmap: number;
    like: number;
    comment: number;
    shared: number;
    tagFollows: number;
    followers: number;
    following: number;
    notificationsSent: number;
    notificationsReceived: number;
  };

  export type UserCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | UserCountOutputTypeCountPostArgs;
    tagStats?: boolean | UserCountOutputTypeCountTagStatsArgs;
    feed?: boolean | UserCountOutputTypeCountFeedArgs;
    feedTrack?: boolean | UserCountOutputTypeCountFeedTrackArgs;
    heapmap?: boolean | UserCountOutputTypeCountHeapmapArgs;
    like?: boolean | UserCountOutputTypeCountLikeArgs;
    comment?: boolean | UserCountOutputTypeCountCommentArgs;
    shared?: boolean | UserCountOutputTypeCountSharedArgs;
    tagFollows?: boolean | UserCountOutputTypeCountTagFollowsArgs;
    followers?: boolean | UserCountOutputTypeCountFollowersArgs;
    following?: boolean | UserCountOutputTypeCountFollowingArgs;
    notificationsSent?: boolean | UserCountOutputTypeCountNotificationsSentArgs;
    notificationsReceived?: boolean | UserCountOutputTypeCountNotificationsReceivedArgs;
  };

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: PostWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTagStatsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserTagStatsWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FeedWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedTrackArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FeedTrackWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHeapmapArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserHeatmapWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikeArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: LikeWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: CommentWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSharedArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ShareWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTagFollowsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TagFollowWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FollowWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FollowWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsSentArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: NotificationWhereInput;
  };

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsReceivedArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: NotificationWhereInput;
  };

  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    tags: number;
    comments: number;
    likes: number;
    shares: number;
    feed: number;
  };

  export type PostCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    tags?: boolean | PostCountOutputTypeCountTagsArgs;
    comments?: boolean | PostCountOutputTypeCountCommentsArgs;
    likes?: boolean | PostCountOutputTypeCountLikesArgs;
    shares?: boolean | PostCountOutputTypeCountSharesArgs;
    feed?: boolean | PostCountOutputTypeCountFeedArgs;
  };

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountTagsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: PostTagWhereInput;
  };

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: CommentWhereInput;
  };

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: LikeWhereInput;
  };

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountSharesArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: ShareWhereInput;
  };

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountFeedArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FeedWhereInput;
  };

  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    posts: number;
    users: number;
    followers: number;
  };

  export type TagCountOutputTypeSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    posts?: boolean | TagCountOutputTypeCountPostsArgs;
    users?: boolean | TagCountOutputTypeCountUsersArgs;
    followers?: boolean | TagCountOutputTypeCountFollowersArgs;
  };

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null;
  };

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountPostsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: PostTagWhereInput;
  };

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountUsersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserTagStatsWhereInput;
  };

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountFollowersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TagFollowWhereInput;
  };

  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null;
    _avg: UserAvgAggregateOutputType | null;
    _sum: UserSumAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  export type UserAvgAggregateOutputType = {
    id: number | null;
  };

  export type UserSumAggregateOutputType = {
    id: number | null;
  };

  export type UserMinAggregateOutputType = {
    id: number | null;
    email: string | null;
    password: string | null;
    name: string | null;
  };

  export type UserMaxAggregateOutputType = {
    id: number | null;
    email: string | null;
    password: string | null;
    name: string | null;
  };

  export type UserCountAggregateOutputType = {
    id: number;
    email: number;
    password: number;
    name: number;
    roles: number;
    _all: number;
  };

  export type UserAvgAggregateInputType = {
    id?: true;
  };

  export type UserSumAggregateInputType = {
    id?: true;
  };

  export type UserMinAggregateInputType = {
    id?: true;
    email?: true;
    password?: true;
    name?: true;
  };

  export type UserMaxAggregateInputType = {
    id?: true;
    email?: true;
    password?: true;
    name?: true;
  };

  export type UserCountAggregateInputType = {
    id?: true;
    email?: true;
    password?: true;
    name?: true;
    roles?: true;
    _all?: true;
  };

  export type UserAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Users
     **/
    _count?: true | UserCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: UserAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: UserSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserMaxAggregateInputType;
  };

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>;
  };

  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      where?: UserWhereInput;
      orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[];
      by: UserScalarFieldEnum[] | UserScalarFieldEnum;
      having?: UserScalarWhereWithAggregatesInput;
      take?: number;
      skip?: number;
      _count?: UserCountAggregateInputType | true;
      _avg?: UserAvgAggregateInputType;
      _sum?: UserSumAggregateInputType;
      _min?: UserMinAggregateInputType;
      _max?: UserMaxAggregateInputType;
    };

  export type UserGroupByOutputType = {
    id: number;
    email: string;
    password: string;
    name: string | null;
    roles: string[];
    _count: UserCountAggregateOutputType | null;
    _avg: UserAvgAggregateOutputType | null;
    _sum: UserSumAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> & {
        [P in keyof T & keyof UserGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserGroupByOutputType[P]>
          : GetScalarType<T[P], UserGroupByOutputType[P]>;
      }
    >
  >;

  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        email?: boolean;
        password?: boolean;
        name?: boolean;
        roles?: boolean;
        userProfile?: boolean | User$userProfileArgs<ExtArgs>;
        post?: boolean | User$postArgs<ExtArgs>;
        tagStats?: boolean | User$tagStatsArgs<ExtArgs>;
        feed?: boolean | User$feedArgs<ExtArgs>;
        feedTrack?: boolean | User$feedTrackArgs<ExtArgs>;
        heapmap?: boolean | User$heapmapArgs<ExtArgs>;
        like?: boolean | User$likeArgs<ExtArgs>;
        comment?: boolean | User$commentArgs<ExtArgs>;
        shared?: boolean | User$sharedArgs<ExtArgs>;
        tagFollows?: boolean | User$tagFollowsArgs<ExtArgs>;
        followers?: boolean | User$followersArgs<ExtArgs>;
        following?: boolean | User$followingArgs<ExtArgs>;
        notificationsSent?: boolean | User$notificationsSentArgs<ExtArgs>;
        notificationsReceived?: boolean | User$notificationsReceivedArgs<ExtArgs>;
        _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['user']
    >;

  export type UserSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      email?: boolean;
      password?: boolean;
      name?: boolean;
      roles?: boolean;
    },
    ExtArgs['result']['user']
  >;

  export type UserSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      email?: boolean;
      password?: boolean;
      name?: boolean;
      roles?: boolean;
    },
    ExtArgs['result']['user']
  >;

  export type UserSelectScalar = {
    id?: boolean;
    email?: boolean;
    password?: boolean;
    name?: boolean;
    roles?: boolean;
  };

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'email' | 'password' | 'name' | 'roles', ExtArgs['result']['user']>;
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userProfile?: boolean | User$userProfileArgs<ExtArgs>;
    post?: boolean | User$postArgs<ExtArgs>;
    tagStats?: boolean | User$tagStatsArgs<ExtArgs>;
    feed?: boolean | User$feedArgs<ExtArgs>;
    feedTrack?: boolean | User$feedTrackArgs<ExtArgs>;
    heapmap?: boolean | User$heapmapArgs<ExtArgs>;
    like?: boolean | User$likeArgs<ExtArgs>;
    comment?: boolean | User$commentArgs<ExtArgs>;
    shared?: boolean | User$sharedArgs<ExtArgs>;
    tagFollows?: boolean | User$tagFollowsArgs<ExtArgs>;
    followers?: boolean | User$followersArgs<ExtArgs>;
    following?: boolean | User$followingArgs<ExtArgs>;
    notificationsSent?: boolean | User$notificationsSentArgs<ExtArgs>;
    notificationsReceived?: boolean | User$notificationsReceivedArgs<ExtArgs>;
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type UserIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};
  export type UserIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'User';
    objects: {
      userProfile: Prisma.$UserProfilePayload<ExtArgs> | null;
      post: Prisma.$PostPayload<ExtArgs>[];
      tagStats: Prisma.$UserTagStatsPayload<ExtArgs>[];
      feed: Prisma.$FeedPayload<ExtArgs>[];
      feedTrack: Prisma.$FeedTrackPayload<ExtArgs>[];
      heapmap: Prisma.$UserHeatmapPayload<ExtArgs>[];
      like: Prisma.$LikePayload<ExtArgs>[];
      comment: Prisma.$CommentPayload<ExtArgs>[];
      shared: Prisma.$SharePayload<ExtArgs>[];
      tagFollows: Prisma.$TagFollowPayload<ExtArgs>[];
      followers: Prisma.$FollowPayload<ExtArgs>[];
      following: Prisma.$FollowPayload<ExtArgs>[];
      notificationsSent: Prisma.$NotificationPayload<ExtArgs>[];
      notificationsReceived: Prisma.$NotificationPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        email: string;
        password: string;
        name: string | null;
        roles: string[];
      },
      ExtArgs['result']['user']
    >;
    composites: {};
  };

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<
    Prisma.$UserPayload,
    S
  >;

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    UserFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: UserCountAggregateInputType | true;
  };

  export interface UserDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User']; meta: { name: 'User' } };
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     *
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     *
     */
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     *
     */
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(
      args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
     **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserAggregateArgs>(
      args: Subset<T, UserAggregateArgs>
    ): Prisma.PrismaPromise<GetUserAggregateType<T>>;

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the User model
     */
    readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    userProfile<T extends User$userProfileArgs<ExtArgs> = {}>(
      args?: Subset<T, User$userProfileArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;
    post<T extends User$postArgs<ExtArgs> = {}>(
      args?: Subset<T, User$postArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    tagStats<T extends User$tagStatsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$tagStatsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
      | Null
    >;
    feed<T extends User$feedArgs<ExtArgs> = {}>(
      args?: Subset<T, User$feedArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    feedTrack<T extends User$feedTrackArgs<ExtArgs> = {}>(
      args?: Subset<T, User$feedTrackArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedTrackPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    heapmap<T extends User$heapmapArgs<ExtArgs> = {}>(
      args?: Subset<T, User$heapmapArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserHeatmapPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
      | Null
    >;
    like<T extends User$likeArgs<ExtArgs> = {}>(
      args?: Subset<T, User$likeArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    comment<T extends User$commentArgs<ExtArgs> = {}>(
      args?: Subset<T, User$commentArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    shared<T extends User$sharedArgs<ExtArgs> = {}>(
      args?: Subset<T, User$sharedArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    tagFollows<T extends User$tagFollowsArgs<ExtArgs> = {}>(
      args?: Subset<T, User$tagFollowsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    followers<T extends User$followersArgs<ExtArgs> = {}>(
      args?: Subset<T, User$followersArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    following<T extends User$followingArgs<ExtArgs> = {}>(
      args?: Subset<T, User$followingArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    notificationsSent<T extends User$notificationsSentArgs<ExtArgs> = {}>(
      args?: Subset<T, User$notificationsSentArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
      | Null
    >;
    notificationsReceived<T extends User$notificationsReceivedArgs<ExtArgs> = {}>(
      args?: Subset<T, User$notificationsReceivedArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
      | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<'User', 'Int'>;
    readonly email: FieldRef<'User', 'String'>;
    readonly password: FieldRef<'User', 'String'>;
    readonly name: FieldRef<'User', 'String'>;
    readonly roles: FieldRef<'User', 'String[]'>;
  }

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
  };

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the User
       */
      select?: UserSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the User
       */
      omit?: UserOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: UserInclude<ExtArgs> | null;
      /**
       * Filter, which Users to fetch.
       */
      where?: UserWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Users to fetch.
       */
      orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the position for listing Users.
       */
      cursor?: UserWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Users from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Users.
       */
      skip?: number;
      distinct?: UserScalarFieldEnum | UserScalarFieldEnum[];
    };

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>;
  };

  /**
   * User createMany
   */
  export type UserCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>;
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput;
    /**
     * Limit how many Users to update.
     */
    limit?: number;
  };

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>;
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput;
    /**
     * Limit how many Users to update.
     */
    limit?: number;
  };

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput;
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>;
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
  };

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput;
  };

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput;
    /**
     * Limit how many Users to delete.
     */
    limit?: number;
  };

  /**
   * User.userProfile
   */
  export type User$userProfileArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    where?: UserProfileWhereInput;
  };

  /**
   * User.post
   */
  export type User$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    where?: PostWhereInput;
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[];
    cursor?: PostWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[];
  };

  /**
   * User.tagStats
   */
  export type User$tagStatsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    where?: UserTagStatsWhereInput;
    orderBy?: UserTagStatsOrderByWithRelationInput | UserTagStatsOrderByWithRelationInput[];
    cursor?: UserTagStatsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: UserTagStatsScalarFieldEnum | UserTagStatsScalarFieldEnum[];
  };

  /**
   * User.feed
   */
  export type User$feedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    where?: FeedWhereInput;
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[];
    cursor?: FeedWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[];
  };

  /**
   * User.feedTrack
   */
  export type User$feedTrackArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    where?: FeedTrackWhereInput;
    orderBy?: FeedTrackOrderByWithRelationInput | FeedTrackOrderByWithRelationInput[];
    cursor?: FeedTrackWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: FeedTrackScalarFieldEnum | FeedTrackScalarFieldEnum[];
  };

  /**
   * User.heapmap
   */
  export type User$heapmapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the UserHeatmap
       */
      select?: UserHeatmapSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the UserHeatmap
       */
      omit?: UserHeatmapOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: UserHeatmapInclude<ExtArgs> | null;
      where?: UserHeatmapWhereInput;
      orderBy?: UserHeatmapOrderByWithRelationInput | UserHeatmapOrderByWithRelationInput[];
      cursor?: UserHeatmapWhereUniqueInput;
      take?: number;
      skip?: number;
      distinct?: UserHeatmapScalarFieldEnum | UserHeatmapScalarFieldEnum[];
    };

  /**
   * User.like
   */
  export type User$likeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    where?: LikeWhereInput;
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[];
    cursor?: LikeWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[];
  };

  /**
   * User.comment
   */
  export type User$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Comment
       */
      select?: CommentSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Comment
       */
      omit?: CommentOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: CommentInclude<ExtArgs> | null;
      where?: CommentWhereInput;
      orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[];
      cursor?: CommentWhereUniqueInput;
      take?: number;
      skip?: number;
      distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[];
    };

  /**
   * User.shared
   */
  export type User$sharedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
      where?: ShareWhereInput;
      orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[];
      cursor?: ShareWhereUniqueInput;
      take?: number;
      skip?: number;
      distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[];
    };

  /**
   * User.tagFollows
   */
  export type User$tagFollowsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    where?: TagFollowWhereInput;
    orderBy?: TagFollowOrderByWithRelationInput | TagFollowOrderByWithRelationInput[];
    cursor?: TagFollowWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TagFollowScalarFieldEnum | TagFollowScalarFieldEnum[];
  };

  /**
   * User.followers
   */
  export type User$followersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    where?: FollowWhereInput;
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[];
    cursor?: FollowWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[];
  };

  /**
   * User.following
   */
  export type User$followingArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    where?: FollowWhereInput;
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[];
    cursor?: FollowWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[];
  };

  /**
   * User.notificationsSent
   */
  export type User$notificationsSentArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[];
    cursor?: NotificationWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * User.notificationsReceived
   */
  export type User$notificationsReceivedArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[];
    cursor?: NotificationWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the User
       */
      select?: UserSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the User
       */
      omit?: UserOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: UserInclude<ExtArgs> | null;
    };

  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null;
    _avg: UserProfileAvgAggregateOutputType | null;
    _sum: UserProfileSumAggregateOutputType | null;
    _min: UserProfileMinAggregateOutputType | null;
    _max: UserProfileMaxAggregateOutputType | null;
  };

  export type UserProfileAvgAggregateOutputType = {
    id: number | null;
    userId: number | null;
  };

  export type UserProfileSumAggregateOutputType = {
    id: number | null;
    userId: number | null;
  };

  export type UserProfileMinAggregateOutputType = {
    id: number | null;
    userId: number | null;
    bio: string | null;
    company: string | null;
    location: string | null;
    profilePic: string | null;
    coverPic: string | null;
    birthDate: Date | null;
    gender: $Enums.Gender | null;
    phone: string | null;
    github: string | null;
    linkedin: string | null;
    twitter: string | null;
    leetcode: string | null;
    instagram: string | null;
    website: string | null;
    resumeLink: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserProfileMaxAggregateOutputType = {
    id: number | null;
    userId: number | null;
    bio: string | null;
    company: string | null;
    location: string | null;
    profilePic: string | null;
    coverPic: string | null;
    birthDate: Date | null;
    gender: $Enums.Gender | null;
    phone: string | null;
    github: string | null;
    linkedin: string | null;
    twitter: string | null;
    leetcode: string | null;
    instagram: string | null;
    website: string | null;
    resumeLink: string | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserProfileCountAggregateOutputType = {
    id: number;
    userId: number;
    bio: number;
    company: number;
    location: number;
    profilePic: number;
    coverPic: number;
    birthDate: number;
    gender: number;
    phone: number;
    interests: number;
    github: number;
    linkedin: number;
    twitter: number;
    leetcode: number;
    instagram: number;
    website: number;
    resumeLink: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type UserProfileAvgAggregateInputType = {
    id?: true;
    userId?: true;
  };

  export type UserProfileSumAggregateInputType = {
    id?: true;
    userId?: true;
  };

  export type UserProfileMinAggregateInputType = {
    id?: true;
    userId?: true;
    bio?: true;
    company?: true;
    location?: true;
    profilePic?: true;
    coverPic?: true;
    birthDate?: true;
    gender?: true;
    phone?: true;
    github?: true;
    linkedin?: true;
    twitter?: true;
    leetcode?: true;
    instagram?: true;
    website?: true;
    resumeLink?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserProfileMaxAggregateInputType = {
    id?: true;
    userId?: true;
    bio?: true;
    company?: true;
    location?: true;
    profilePic?: true;
    coverPic?: true;
    birthDate?: true;
    gender?: true;
    phone?: true;
    github?: true;
    linkedin?: true;
    twitter?: true;
    leetcode?: true;
    instagram?: true;
    website?: true;
    resumeLink?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserProfileCountAggregateInputType = {
    id?: true;
    userId?: true;
    bio?: true;
    company?: true;
    location?: true;
    profilePic?: true;
    coverPic?: true;
    birthDate?: true;
    gender?: true;
    phone?: true;
    interests?: true;
    github?: true;
    linkedin?: true;
    twitter?: true;
    leetcode?: true;
    instagram?: true;
    website?: true;
    resumeLink?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type UserProfileAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserProfiles.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned UserProfiles
     **/
    _count?: true | UserProfileCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: UserProfileAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: UserProfileSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserProfileMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserProfileMaxAggregateInputType;
  };

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
    [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>;
  };

  export type UserProfileGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[];
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum;
    having?: UserProfileScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserProfileCountAggregateInputType | true;
    _avg?: UserProfileAvgAggregateInputType;
    _sum?: UserProfileSumAggregateInputType;
    _min?: UserProfileMinAggregateInputType;
    _max?: UserProfileMaxAggregateInputType;
  };

  export type UserProfileGroupByOutputType = {
    id: number;
    userId: number;
    bio: string | null;
    company: string | null;
    location: string | null;
    profilePic: string | null;
    coverPic: string | null;
    birthDate: Date | null;
    gender: $Enums.Gender | null;
    phone: string | null;
    interests: string[];
    github: string | null;
    linkedin: string | null;
    twitter: string | null;
    leetcode: string | null;
    instagram: string | null;
    website: string | null;
    resumeLink: string | null;
    createdAt: Date;
    updatedAt: Date;
    _count: UserProfileCountAggregateOutputType | null;
    _avg: UserProfileAvgAggregateOutputType | null;
    _sum: UserProfileSumAggregateOutputType | null;
    _min: UserProfileMinAggregateOutputType | null;
    _max: UserProfileMaxAggregateOutputType | null;
  };

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> & {
        [P in keyof T & keyof UserProfileGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
          : GetScalarType<T[P], UserProfileGroupByOutputType[P]>;
      }
    >
  >;

  export type UserProfileSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      bio?: boolean;
      company?: boolean;
      location?: boolean;
      profilePic?: boolean;
      coverPic?: boolean;
      birthDate?: boolean;
      gender?: boolean;
      phone?: boolean;
      interests?: boolean;
      github?: boolean;
      linkedin?: boolean;
      twitter?: boolean;
      leetcode?: boolean;
      instagram?: boolean;
      website?: boolean;
      resumeLink?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userProfile']
  >;

  export type UserProfileSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      bio?: boolean;
      company?: boolean;
      location?: boolean;
      profilePic?: boolean;
      coverPic?: boolean;
      birthDate?: boolean;
      gender?: boolean;
      phone?: boolean;
      interests?: boolean;
      github?: boolean;
      linkedin?: boolean;
      twitter?: boolean;
      leetcode?: boolean;
      instagram?: boolean;
      website?: boolean;
      resumeLink?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userProfile']
  >;

  export type UserProfileSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      bio?: boolean;
      company?: boolean;
      location?: boolean;
      profilePic?: boolean;
      coverPic?: boolean;
      birthDate?: boolean;
      gender?: boolean;
      phone?: boolean;
      interests?: boolean;
      github?: boolean;
      linkedin?: boolean;
      twitter?: boolean;
      leetcode?: boolean;
      instagram?: boolean;
      website?: boolean;
      resumeLink?: boolean;
      createdAt?: boolean;
      updatedAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userProfile']
  >;

  export type UserProfileSelectScalar = {
    id?: boolean;
    userId?: boolean;
    bio?: boolean;
    company?: boolean;
    location?: boolean;
    profilePic?: boolean;
    coverPic?: boolean;
    birthDate?: boolean;
    gender?: boolean;
    phone?: boolean;
    interests?: boolean;
    github?: boolean;
    linkedin?: boolean;
    twitter?: boolean;
    leetcode?: boolean;
    instagram?: boolean;
    website?: boolean;
    resumeLink?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type UserProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<
      | 'id'
      | 'userId'
      | 'bio'
      | 'company'
      | 'location'
      | 'profilePic'
      | 'coverPic'
      | 'birthDate'
      | 'gender'
      | 'phone'
      | 'interests'
      | 'github'
      | 'linkedin'
      | 'twitter'
      | 'leetcode'
      | 'instagram'
      | 'website'
      | 'resumeLink'
      | 'createdAt'
      | 'updatedAt',
      ExtArgs['result']['userProfile']
    >;
  export type UserProfileInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type UserProfileIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type UserProfileIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $UserProfilePayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: 'UserProfile';
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        userId: number;
        bio: string | null;
        company: string | null;
        location: string | null;
        profilePic: string | null;
        coverPic: string | null;
        birthDate: Date | null;
        gender: $Enums.Gender | null;
        phone: string | null;
        interests: string[];
        github: string | null;
        linkedin: string | null;
        twitter: string | null;
        leetcode: string | null;
        instagram: string | null;
        website: string | null;
        resumeLink: string | null;
        createdAt: Date;
        updatedAt: Date;
      },
      ExtArgs['result']['userProfile']
    >;
    composites: {};
  };

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> =
    $Result.GetResult<Prisma.$UserProfilePayload, S>;

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileCountAggregateInputType | true;
    };

  export interface UserProfileDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'];
      meta: { name: 'UserProfile' };
    };
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(
      args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'findUnique',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(
      args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'findFirst',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'findFirstOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     *
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserProfileFindManyArgs>(
      args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     *
     */
    create<T extends UserProfileCreateArgs>(
      args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserProfileCreateManyArgs>(
      args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     *
     */
    delete<T extends UserProfileDeleteArgs>(
      args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserProfileUpdateArgs>(
      args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(
      args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserProfileUpdateManyArgs>(
      args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserProfiles and returns the data updated in the database.
     * @param {UserProfileUpdateManyAndReturnArgs} args - Arguments to update many UserProfiles.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends UserProfileUpdateManyAndReturnArgs>(
      args: SelectSubset<T, UserProfileUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserProfilePayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(
      args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>
    ): Prisma__UserProfileClient<
      $Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
     **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserProfileAggregateArgs>(
      args: Subset<T, UserProfileAggregateArgs>
    ): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>;

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the UserProfile model
     */
    readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the UserProfile model
   */
  interface UserProfileFieldRefs {
    readonly id: FieldRef<'UserProfile', 'Int'>;
    readonly userId: FieldRef<'UserProfile', 'Int'>;
    readonly bio: FieldRef<'UserProfile', 'String'>;
    readonly company: FieldRef<'UserProfile', 'String'>;
    readonly location: FieldRef<'UserProfile', 'String'>;
    readonly profilePic: FieldRef<'UserProfile', 'String'>;
    readonly coverPic: FieldRef<'UserProfile', 'String'>;
    readonly birthDate: FieldRef<'UserProfile', 'DateTime'>;
    readonly gender: FieldRef<'UserProfile', 'Gender'>;
    readonly phone: FieldRef<'UserProfile', 'String'>;
    readonly interests: FieldRef<'UserProfile', 'String[]'>;
    readonly github: FieldRef<'UserProfile', 'String'>;
    readonly linkedin: FieldRef<'UserProfile', 'String'>;
    readonly twitter: FieldRef<'UserProfile', 'String'>;
    readonly leetcode: FieldRef<'UserProfile', 'String'>;
    readonly instagram: FieldRef<'UserProfile', 'String'>;
    readonly website: FieldRef<'UserProfile', 'String'>;
    readonly resumeLink: FieldRef<'UserProfile', 'String'>;
    readonly createdAt: FieldRef<'UserProfile', 'DateTime'>;
    readonly updatedAt: FieldRef<'UserProfile', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput;
  };

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput;
  };

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserProfiles.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[];
  };

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserProfiles.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[];
  };

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserProfiles.
     */
    skip?: number;
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[];
  };

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>;
  };

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>;
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput;
  };

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>;
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput;
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number;
  };

  /**
   * UserProfile updateManyAndReturn
   */
  export type UserProfileUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>;
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput;
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput;
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>;
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>;
  };

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput;
  };

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput;
    /**
     * Limit how many UserProfiles to delete.
     */
    limit?: number;
  };

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null;
  };

  /**
   * Model UserHeatmap
   */

  export type AggregateUserHeatmap = {
    _count: UserHeatmapCountAggregateOutputType | null;
    _avg: UserHeatmapAvgAggregateOutputType | null;
    _sum: UserHeatmapSumAggregateOutputType | null;
    _min: UserHeatmapMinAggregateOutputType | null;
    _max: UserHeatmapMaxAggregateOutputType | null;
  };

  export type UserHeatmapAvgAggregateOutputType = {
    id: number | null;
    userId: number | null;
    count: number | null;
  };

  export type UserHeatmapSumAggregateOutputType = {
    id: number | null;
    userId: number | null;
    count: number | null;
  };

  export type UserHeatmapMinAggregateOutputType = {
    id: number | null;
    userId: number | null;
    date: Date | null;
    count: number | null;
  };

  export type UserHeatmapMaxAggregateOutputType = {
    id: number | null;
    userId: number | null;
    date: Date | null;
    count: number | null;
  };

  export type UserHeatmapCountAggregateOutputType = {
    id: number;
    userId: number;
    date: number;
    count: number;
    _all: number;
  };

  export type UserHeatmapAvgAggregateInputType = {
    id?: true;
    userId?: true;
    count?: true;
  };

  export type UserHeatmapSumAggregateInputType = {
    id?: true;
    userId?: true;
    count?: true;
  };

  export type UserHeatmapMinAggregateInputType = {
    id?: true;
    userId?: true;
    date?: true;
    count?: true;
  };

  export type UserHeatmapMaxAggregateInputType = {
    id?: true;
    userId?: true;
    date?: true;
    count?: true;
  };

  export type UserHeatmapCountAggregateInputType = {
    id?: true;
    userId?: true;
    date?: true;
    count?: true;
    _all?: true;
  };

  export type UserHeatmapAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserHeatmap to aggregate.
     */
    where?: UserHeatmapWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserHeatmaps to fetch.
     */
    orderBy?: UserHeatmapOrderByWithRelationInput | UserHeatmapOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserHeatmapWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserHeatmaps from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserHeatmaps.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned UserHeatmaps
     **/
    _count?: true | UserHeatmapCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: UserHeatmapAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: UserHeatmapSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserHeatmapMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserHeatmapMaxAggregateInputType;
  };

  export type GetUserHeatmapAggregateType<T extends UserHeatmapAggregateArgs> = {
    [P in keyof T & keyof AggregateUserHeatmap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserHeatmap[P]>
      : GetScalarType<T[P], AggregateUserHeatmap[P]>;
  };

  export type UserHeatmapGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserHeatmapWhereInput;
    orderBy?: UserHeatmapOrderByWithAggregationInput | UserHeatmapOrderByWithAggregationInput[];
    by: UserHeatmapScalarFieldEnum[] | UserHeatmapScalarFieldEnum;
    having?: UserHeatmapScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserHeatmapCountAggregateInputType | true;
    _avg?: UserHeatmapAvgAggregateInputType;
    _sum?: UserHeatmapSumAggregateInputType;
    _min?: UserHeatmapMinAggregateInputType;
    _max?: UserHeatmapMaxAggregateInputType;
  };

  export type UserHeatmapGroupByOutputType = {
    id: number;
    userId: number;
    date: Date;
    count: number;
    _count: UserHeatmapCountAggregateOutputType | null;
    _avg: UserHeatmapAvgAggregateOutputType | null;
    _sum: UserHeatmapSumAggregateOutputType | null;
    _min: UserHeatmapMinAggregateOutputType | null;
    _max: UserHeatmapMaxAggregateOutputType | null;
  };

  type GetUserHeatmapGroupByPayload<T extends UserHeatmapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserHeatmapGroupByOutputType, T['by']> & {
        [P in keyof T & keyof UserHeatmapGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserHeatmapGroupByOutputType[P]>
          : GetScalarType<T[P], UserHeatmapGroupByOutputType[P]>;
      }
    >
  >;

  export type UserHeatmapSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      date?: boolean;
      count?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userHeatmap']
  >;

  export type UserHeatmapSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      date?: boolean;
      count?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userHeatmap']
  >;

  export type UserHeatmapSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      date?: boolean;
      count?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userHeatmap']
  >;

  export type UserHeatmapSelectScalar = {
    id?: boolean;
    userId?: boolean;
    date?: boolean;
    count?: boolean;
  };

  export type UserHeatmapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'userId' | 'date' | 'count', ExtArgs['result']['userHeatmap']>;
  export type UserHeatmapInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type UserHeatmapIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type UserHeatmapIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $UserHeatmapPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: 'UserHeatmap';
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        userId: number;
        date: Date;
        count: number;
      },
      ExtArgs['result']['userHeatmap']
    >;
    composites: {};
  };

  type UserHeatmapGetPayload<S extends boolean | null | undefined | UserHeatmapDefaultArgs> =
    $Result.GetResult<Prisma.$UserHeatmapPayload, S>;

  type UserHeatmapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserHeatmapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserHeatmapCountAggregateInputType | true;
    };

  export interface UserHeatmapDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>['model']['UserHeatmap'];
      meta: { name: 'UserHeatmap' };
    };
    /**
     * Find zero or one UserHeatmap that matches the filter.
     * @param {UserHeatmapFindUniqueArgs} args - Arguments to find a UserHeatmap
     * @example
     * // Get one UserHeatmap
     * const userHeatmap = await prisma.userHeatmap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserHeatmapFindUniqueArgs>(
      args: SelectSubset<T, UserHeatmapFindUniqueArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<
        Prisma.$UserHeatmapPayload<ExtArgs>,
        T,
        'findUnique',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one UserHeatmap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserHeatmapFindUniqueOrThrowArgs} args - Arguments to find a UserHeatmap
     * @example
     * // Get one UserHeatmap
     * const userHeatmap = await prisma.userHeatmap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserHeatmapFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserHeatmapFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<
        Prisma.$UserHeatmapPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first UserHeatmap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapFindFirstArgs} args - Arguments to find a UserHeatmap
     * @example
     * // Get one UserHeatmap
     * const userHeatmap = await prisma.userHeatmap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserHeatmapFindFirstArgs>(
      args?: SelectSubset<T, UserHeatmapFindFirstArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<
        Prisma.$UserHeatmapPayload<ExtArgs>,
        T,
        'findFirst',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first UserHeatmap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapFindFirstOrThrowArgs} args - Arguments to find a UserHeatmap
     * @example
     * // Get one UserHeatmap
     * const userHeatmap = await prisma.userHeatmap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserHeatmapFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserHeatmapFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<
        Prisma.$UserHeatmapPayload<ExtArgs>,
        T,
        'findFirstOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more UserHeatmaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserHeatmaps
     * const userHeatmaps = await prisma.userHeatmap.findMany()
     *
     * // Get first 10 UserHeatmaps
     * const userHeatmaps = await prisma.userHeatmap.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userHeatmapWithIdOnly = await prisma.userHeatmap.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserHeatmapFindManyArgs>(
      args?: SelectSubset<T, UserHeatmapFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserHeatmapPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a UserHeatmap.
     * @param {UserHeatmapCreateArgs} args - Arguments to create a UserHeatmap.
     * @example
     * // Create one UserHeatmap
     * const UserHeatmap = await prisma.userHeatmap.create({
     *   data: {
     *     // ... data to create a UserHeatmap
     *   }
     * })
     *
     */
    create<T extends UserHeatmapCreateArgs>(
      args: SelectSubset<T, UserHeatmapCreateArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<Prisma.$UserHeatmapPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many UserHeatmaps.
     * @param {UserHeatmapCreateManyArgs} args - Arguments to create many UserHeatmaps.
     * @example
     * // Create many UserHeatmaps
     * const userHeatmap = await prisma.userHeatmap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserHeatmapCreateManyArgs>(
      args?: SelectSubset<T, UserHeatmapCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many UserHeatmaps and returns the data saved in the database.
     * @param {UserHeatmapCreateManyAndReturnArgs} args - Arguments to create many UserHeatmaps.
     * @example
     * // Create many UserHeatmaps
     * const userHeatmap = await prisma.userHeatmap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many UserHeatmaps and only return the `id`
     * const userHeatmapWithIdOnly = await prisma.userHeatmap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserHeatmapCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserHeatmapCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserHeatmapPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a UserHeatmap.
     * @param {UserHeatmapDeleteArgs} args - Arguments to delete one UserHeatmap.
     * @example
     * // Delete one UserHeatmap
     * const UserHeatmap = await prisma.userHeatmap.delete({
     *   where: {
     *     // ... filter to delete one UserHeatmap
     *   }
     * })
     *
     */
    delete<T extends UserHeatmapDeleteArgs>(
      args: SelectSubset<T, UserHeatmapDeleteArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<Prisma.$UserHeatmapPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one UserHeatmap.
     * @param {UserHeatmapUpdateArgs} args - Arguments to update one UserHeatmap.
     * @example
     * // Update one UserHeatmap
     * const userHeatmap = await prisma.userHeatmap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserHeatmapUpdateArgs>(
      args: SelectSubset<T, UserHeatmapUpdateArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<Prisma.$UserHeatmapPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more UserHeatmaps.
     * @param {UserHeatmapDeleteManyArgs} args - Arguments to filter UserHeatmaps to delete.
     * @example
     * // Delete a few UserHeatmaps
     * const { count } = await prisma.userHeatmap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserHeatmapDeleteManyArgs>(
      args?: SelectSubset<T, UserHeatmapDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserHeatmaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserHeatmaps
     * const userHeatmap = await prisma.userHeatmap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserHeatmapUpdateManyArgs>(
      args: SelectSubset<T, UserHeatmapUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserHeatmaps and returns the data updated in the database.
     * @param {UserHeatmapUpdateManyAndReturnArgs} args - Arguments to update many UserHeatmaps.
     * @example
     * // Update many UserHeatmaps
     * const userHeatmap = await prisma.userHeatmap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more UserHeatmaps and only return the `id`
     * const userHeatmapWithIdOnly = await prisma.userHeatmap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends UserHeatmapUpdateManyAndReturnArgs>(
      args: SelectSubset<T, UserHeatmapUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserHeatmapPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one UserHeatmap.
     * @param {UserHeatmapUpsertArgs} args - Arguments to update or create a UserHeatmap.
     * @example
     * // Update or create a UserHeatmap
     * const userHeatmap = await prisma.userHeatmap.upsert({
     *   create: {
     *     // ... data to create a UserHeatmap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserHeatmap we want to update
     *   }
     * })
     */
    upsert<T extends UserHeatmapUpsertArgs>(
      args: SelectSubset<T, UserHeatmapUpsertArgs<ExtArgs>>
    ): Prisma__UserHeatmapClient<
      $Result.GetResult<Prisma.$UserHeatmapPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of UserHeatmaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapCountArgs} args - Arguments to filter UserHeatmaps to count.
     * @example
     * // Count the number of UserHeatmaps
     * const count = await prisma.userHeatmap.count({
     *   where: {
     *     // ... the filter for the UserHeatmaps we want to count
     *   }
     * })
     **/
    count<T extends UserHeatmapCountArgs>(
      args?: Subset<T, UserHeatmapCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserHeatmapCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a UserHeatmap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserHeatmapAggregateArgs>(
      args: Subset<T, UserHeatmapAggregateArgs>
    ): Prisma.PrismaPromise<GetUserHeatmapAggregateType<T>>;

    /**
     * Group by UserHeatmap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserHeatmapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserHeatmapGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserHeatmapGroupByArgs['orderBy'] }
        : { orderBy?: UserHeatmapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserHeatmapGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetUserHeatmapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the UserHeatmap model
     */
    readonly fields: UserHeatmapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserHeatmap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserHeatmapClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the UserHeatmap model
   */
  interface UserHeatmapFieldRefs {
    readonly id: FieldRef<'UserHeatmap', 'Int'>;
    readonly userId: FieldRef<'UserHeatmap', 'Int'>;
    readonly date: FieldRef<'UserHeatmap', 'DateTime'>;
    readonly count: FieldRef<'UserHeatmap', 'Int'>;
  }

  // Custom InputTypes
  /**
   * UserHeatmap findUnique
   */
  export type UserHeatmapFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * Filter, which UserHeatmap to fetch.
     */
    where: UserHeatmapWhereUniqueInput;
  };

  /**
   * UserHeatmap findUniqueOrThrow
   */
  export type UserHeatmapFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * Filter, which UserHeatmap to fetch.
     */
    where: UserHeatmapWhereUniqueInput;
  };

  /**
   * UserHeatmap findFirst
   */
  export type UserHeatmapFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * Filter, which UserHeatmap to fetch.
     */
    where?: UserHeatmapWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserHeatmaps to fetch.
     */
    orderBy?: UserHeatmapOrderByWithRelationInput | UserHeatmapOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserHeatmaps.
     */
    cursor?: UserHeatmapWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserHeatmaps from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserHeatmaps.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserHeatmaps.
     */
    distinct?: UserHeatmapScalarFieldEnum | UserHeatmapScalarFieldEnum[];
  };

  /**
   * UserHeatmap findFirstOrThrow
   */
  export type UserHeatmapFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * Filter, which UserHeatmap to fetch.
     */
    where?: UserHeatmapWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserHeatmaps to fetch.
     */
    orderBy?: UserHeatmapOrderByWithRelationInput | UserHeatmapOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserHeatmaps.
     */
    cursor?: UserHeatmapWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserHeatmaps from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserHeatmaps.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserHeatmaps.
     */
    distinct?: UserHeatmapScalarFieldEnum | UserHeatmapScalarFieldEnum[];
  };

  /**
   * UserHeatmap findMany
   */
  export type UserHeatmapFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * Filter, which UserHeatmaps to fetch.
     */
    where?: UserHeatmapWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserHeatmaps to fetch.
     */
    orderBy?: UserHeatmapOrderByWithRelationInput | UserHeatmapOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing UserHeatmaps.
     */
    cursor?: UserHeatmapWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserHeatmaps from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserHeatmaps.
     */
    skip?: number;
    distinct?: UserHeatmapScalarFieldEnum | UserHeatmapScalarFieldEnum[];
  };

  /**
   * UserHeatmap create
   */
  export type UserHeatmapCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * The data needed to create a UserHeatmap.
     */
    data: XOR<UserHeatmapCreateInput, UserHeatmapUncheckedCreateInput>;
  };

  /**
   * UserHeatmap createMany
   */
  export type UserHeatmapCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many UserHeatmaps.
     */
    data: UserHeatmapCreateManyInput | UserHeatmapCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * UserHeatmap createManyAndReturn
   */
  export type UserHeatmapCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * The data used to create many UserHeatmaps.
     */
    data: UserHeatmapCreateManyInput | UserHeatmapCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserHeatmap update
   */
  export type UserHeatmapUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * The data needed to update a UserHeatmap.
     */
    data: XOR<UserHeatmapUpdateInput, UserHeatmapUncheckedUpdateInput>;
    /**
     * Choose, which UserHeatmap to update.
     */
    where: UserHeatmapWhereUniqueInput;
  };

  /**
   * UserHeatmap updateMany
   */
  export type UserHeatmapUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update UserHeatmaps.
     */
    data: XOR<UserHeatmapUpdateManyMutationInput, UserHeatmapUncheckedUpdateManyInput>;
    /**
     * Filter which UserHeatmaps to update
     */
    where?: UserHeatmapWhereInput;
    /**
     * Limit how many UserHeatmaps to update.
     */
    limit?: number;
  };

  /**
   * UserHeatmap updateManyAndReturn
   */
  export type UserHeatmapUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * The data used to update UserHeatmaps.
     */
    data: XOR<UserHeatmapUpdateManyMutationInput, UserHeatmapUncheckedUpdateManyInput>;
    /**
     * Filter which UserHeatmaps to update
     */
    where?: UserHeatmapWhereInput;
    /**
     * Limit how many UserHeatmaps to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserHeatmap upsert
   */
  export type UserHeatmapUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * The filter to search for the UserHeatmap to update in case it exists.
     */
    where: UserHeatmapWhereUniqueInput;
    /**
     * In case the UserHeatmap found by the `where` argument doesn't exist, create a new UserHeatmap with this data.
     */
    create: XOR<UserHeatmapCreateInput, UserHeatmapUncheckedCreateInput>;
    /**
     * In case the UserHeatmap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserHeatmapUpdateInput, UserHeatmapUncheckedUpdateInput>;
  };

  /**
   * UserHeatmap delete
   */
  export type UserHeatmapDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
    /**
     * Filter which UserHeatmap to delete.
     */
    where: UserHeatmapWhereUniqueInput;
  };

  /**
   * UserHeatmap deleteMany
   */
  export type UserHeatmapDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserHeatmaps to delete
     */
    where?: UserHeatmapWhereInput;
    /**
     * Limit how many UserHeatmaps to delete.
     */
    limit?: number;
  };

  /**
   * UserHeatmap without action
   */
  export type UserHeatmapDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserHeatmap
     */
    select?: UserHeatmapSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserHeatmap
     */
    omit?: UserHeatmapOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserHeatmapInclude<ExtArgs> | null;
  };

  /**
   * Model UserTagStats
   */

  export type AggregateUserTagStats = {
    _count: UserTagStatsCountAggregateOutputType | null;
    _avg: UserTagStatsAvgAggregateOutputType | null;
    _sum: UserTagStatsSumAggregateOutputType | null;
    _min: UserTagStatsMinAggregateOutputType | null;
    _max: UserTagStatsMaxAggregateOutputType | null;
  };

  export type UserTagStatsAvgAggregateOutputType = {
    id: number | null;
    userId: number | null;
    tagId: number | null;
    postCount: number | null;
  };

  export type UserTagStatsSumAggregateOutputType = {
    id: number | null;
    userId: number | null;
    tagId: number | null;
    postCount: number | null;
  };

  export type UserTagStatsMinAggregateOutputType = {
    id: number | null;
    userId: number | null;
    tagId: number | null;
    postCount: number | null;
    updatedAt: Date | null;
    createdAt: Date | null;
  };

  export type UserTagStatsMaxAggregateOutputType = {
    id: number | null;
    userId: number | null;
    tagId: number | null;
    postCount: number | null;
    updatedAt: Date | null;
    createdAt: Date | null;
  };

  export type UserTagStatsCountAggregateOutputType = {
    id: number;
    userId: number;
    tagId: number;
    postCount: number;
    updatedAt: number;
    createdAt: number;
    _all: number;
  };

  export type UserTagStatsAvgAggregateInputType = {
    id?: true;
    userId?: true;
    tagId?: true;
    postCount?: true;
  };

  export type UserTagStatsSumAggregateInputType = {
    id?: true;
    userId?: true;
    tagId?: true;
    postCount?: true;
  };

  export type UserTagStatsMinAggregateInputType = {
    id?: true;
    userId?: true;
    tagId?: true;
    postCount?: true;
    updatedAt?: true;
    createdAt?: true;
  };

  export type UserTagStatsMaxAggregateInputType = {
    id?: true;
    userId?: true;
    tagId?: true;
    postCount?: true;
    updatedAt?: true;
    createdAt?: true;
  };

  export type UserTagStatsCountAggregateInputType = {
    id?: true;
    userId?: true;
    tagId?: true;
    postCount?: true;
    updatedAt?: true;
    createdAt?: true;
    _all?: true;
  };

  export type UserTagStatsAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserTagStats to aggregate.
     */
    where?: UserTagStatsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserTagStats to fetch.
     */
    orderBy?: UserTagStatsOrderByWithRelationInput | UserTagStatsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: UserTagStatsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserTagStats from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserTagStats.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned UserTagStats
     **/
    _count?: true | UserTagStatsCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: UserTagStatsAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: UserTagStatsSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserTagStatsMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserTagStatsMaxAggregateInputType;
  };

  export type GetUserTagStatsAggregateType<T extends UserTagStatsAggregateArgs> = {
    [P in keyof T & keyof AggregateUserTagStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTagStats[P]>
      : GetScalarType<T[P], AggregateUserTagStats[P]>;
  };

  export type UserTagStatsGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: UserTagStatsWhereInput;
    orderBy?: UserTagStatsOrderByWithAggregationInput | UserTagStatsOrderByWithAggregationInput[];
    by: UserTagStatsScalarFieldEnum[] | UserTagStatsScalarFieldEnum;
    having?: UserTagStatsScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserTagStatsCountAggregateInputType | true;
    _avg?: UserTagStatsAvgAggregateInputType;
    _sum?: UserTagStatsSumAggregateInputType;
    _min?: UserTagStatsMinAggregateInputType;
    _max?: UserTagStatsMaxAggregateInputType;
  };

  export type UserTagStatsGroupByOutputType = {
    id: number;
    userId: number;
    tagId: number;
    postCount: number;
    updatedAt: Date;
    createdAt: Date;
    _count: UserTagStatsCountAggregateOutputType | null;
    _avg: UserTagStatsAvgAggregateOutputType | null;
    _sum: UserTagStatsSumAggregateOutputType | null;
    _min: UserTagStatsMinAggregateOutputType | null;
    _max: UserTagStatsMaxAggregateOutputType | null;
  };

  type GetUserTagStatsGroupByPayload<T extends UserTagStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTagStatsGroupByOutputType, T['by']> & {
        [P in keyof T & keyof UserTagStatsGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserTagStatsGroupByOutputType[P]>
          : GetScalarType<T[P], UserTagStatsGroupByOutputType[P]>;
      }
    >
  >;

  export type UserTagStatsSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      tagId?: boolean;
      postCount?: boolean;
      updatedAt?: boolean;
      createdAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userTagStats']
  >;

  export type UserTagStatsSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      tagId?: boolean;
      postCount?: boolean;
      updatedAt?: boolean;
      createdAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userTagStats']
  >;

  export type UserTagStatsSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      tagId?: boolean;
      postCount?: boolean;
      updatedAt?: boolean;
      createdAt?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['userTagStats']
  >;

  export type UserTagStatsSelectScalar = {
    id?: boolean;
    userId?: boolean;
    tagId?: boolean;
    postCount?: boolean;
    updatedAt?: boolean;
    createdAt?: boolean;
  };

  export type UserTagStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<
      'id' | 'userId' | 'tagId' | 'postCount' | 'updatedAt' | 'createdAt',
      ExtArgs['result']['userTagStats']
    >;
  export type UserTagStatsInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    tag?: boolean | TagDefaultArgs<ExtArgs>;
  };
  export type UserTagStatsIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    tag?: boolean | TagDefaultArgs<ExtArgs>;
  };
  export type UserTagStatsIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
    tag?: boolean | TagDefaultArgs<ExtArgs>;
  };

  export type $UserTagStatsPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: 'UserTagStats';
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
      tag: Prisma.$TagPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        userId: number;
        tagId: number;
        postCount: number;
        updatedAt: Date;
        createdAt: Date;
      },
      ExtArgs['result']['userTagStats']
    >;
    composites: {};
  };

  type UserTagStatsGetPayload<S extends boolean | null | undefined | UserTagStatsDefaultArgs> =
    $Result.GetResult<Prisma.$UserTagStatsPayload, S>;

  type UserTagStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTagStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTagStatsCountAggregateInputType | true;
    };

  export interface UserTagStatsDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>['model']['UserTagStats'];
      meta: { name: 'UserTagStats' };
    };
    /**
     * Find zero or one UserTagStats that matches the filter.
     * @param {UserTagStatsFindUniqueArgs} args - Arguments to find a UserTagStats
     * @example
     * // Get one UserTagStats
     * const userTagStats = await prisma.userTagStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTagStatsFindUniqueArgs>(
      args: SelectSubset<T, UserTagStatsFindUniqueArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<
        Prisma.$UserTagStatsPayload<ExtArgs>,
        T,
        'findUnique',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one UserTagStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTagStatsFindUniqueOrThrowArgs} args - Arguments to find a UserTagStats
     * @example
     * // Get one UserTagStats
     * const userTagStats = await prisma.userTagStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTagStatsFindUniqueOrThrowArgs>(
      args: SelectSubset<T, UserTagStatsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<
        Prisma.$UserTagStatsPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first UserTagStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsFindFirstArgs} args - Arguments to find a UserTagStats
     * @example
     * // Get one UserTagStats
     * const userTagStats = await prisma.userTagStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTagStatsFindFirstArgs>(
      args?: SelectSubset<T, UserTagStatsFindFirstArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<
        Prisma.$UserTagStatsPayload<ExtArgs>,
        T,
        'findFirst',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first UserTagStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsFindFirstOrThrowArgs} args - Arguments to find a UserTagStats
     * @example
     * // Get one UserTagStats
     * const userTagStats = await prisma.userTagStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTagStatsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserTagStatsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<
        Prisma.$UserTagStatsPayload<ExtArgs>,
        T,
        'findFirstOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more UserTagStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTagStats
     * const userTagStats = await prisma.userTagStats.findMany()
     *
     * // Get first 10 UserTagStats
     * const userTagStats = await prisma.userTagStats.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userTagStatsWithIdOnly = await prisma.userTagStats.findMany({ select: { id: true } })
     *
     */
    findMany<T extends UserTagStatsFindManyArgs>(
      args?: SelectSubset<T, UserTagStatsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a UserTagStats.
     * @param {UserTagStatsCreateArgs} args - Arguments to create a UserTagStats.
     * @example
     * // Create one UserTagStats
     * const UserTagStats = await prisma.userTagStats.create({
     *   data: {
     *     // ... data to create a UserTagStats
     *   }
     * })
     *
     */
    create<T extends UserTagStatsCreateArgs>(
      args: SelectSubset<T, UserTagStatsCreateArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many UserTagStats.
     * @param {UserTagStatsCreateManyArgs} args - Arguments to create many UserTagStats.
     * @example
     * // Create many UserTagStats
     * const userTagStats = await prisma.userTagStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends UserTagStatsCreateManyArgs>(
      args?: SelectSubset<T, UserTagStatsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many UserTagStats and returns the data saved in the database.
     * @param {UserTagStatsCreateManyAndReturnArgs} args - Arguments to create many UserTagStats.
     * @example
     * // Create many UserTagStats
     * const userTagStats = await prisma.userTagStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many UserTagStats and only return the `id`
     * const userTagStatsWithIdOnly = await prisma.userTagStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends UserTagStatsCreateManyAndReturnArgs>(
      args?: SelectSubset<T, UserTagStatsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserTagStatsPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a UserTagStats.
     * @param {UserTagStatsDeleteArgs} args - Arguments to delete one UserTagStats.
     * @example
     * // Delete one UserTagStats
     * const UserTagStats = await prisma.userTagStats.delete({
     *   where: {
     *     // ... filter to delete one UserTagStats
     *   }
     * })
     *
     */
    delete<T extends UserTagStatsDeleteArgs>(
      args: SelectSubset<T, UserTagStatsDeleteArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one UserTagStats.
     * @param {UserTagStatsUpdateArgs} args - Arguments to update one UserTagStats.
     * @example
     * // Update one UserTagStats
     * const userTagStats = await prisma.userTagStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends UserTagStatsUpdateArgs>(
      args: SelectSubset<T, UserTagStatsUpdateArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more UserTagStats.
     * @param {UserTagStatsDeleteManyArgs} args - Arguments to filter UserTagStats to delete.
     * @example
     * // Delete a few UserTagStats
     * const { count } = await prisma.userTagStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends UserTagStatsDeleteManyArgs>(
      args?: SelectSubset<T, UserTagStatsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserTagStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTagStats
     * const userTagStats = await prisma.userTagStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends UserTagStatsUpdateManyArgs>(
      args: SelectSubset<T, UserTagStatsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more UserTagStats and returns the data updated in the database.
     * @param {UserTagStatsUpdateManyAndReturnArgs} args - Arguments to update many UserTagStats.
     * @example
     * // Update many UserTagStats
     * const userTagStats = await prisma.userTagStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more UserTagStats and only return the `id`
     * const userTagStatsWithIdOnly = await prisma.userTagStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends UserTagStatsUpdateManyAndReturnArgs>(
      args: SelectSubset<T, UserTagStatsUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$UserTagStatsPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one UserTagStats.
     * @param {UserTagStatsUpsertArgs} args - Arguments to update or create a UserTagStats.
     * @example
     * // Update or create a UserTagStats
     * const userTagStats = await prisma.userTagStats.upsert({
     *   create: {
     *     // ... data to create a UserTagStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTagStats we want to update
     *   }
     * })
     */
    upsert<T extends UserTagStatsUpsertArgs>(
      args: SelectSubset<T, UserTagStatsUpsertArgs<ExtArgs>>
    ): Prisma__UserTagStatsClient<
      $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of UserTagStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsCountArgs} args - Arguments to filter UserTagStats to count.
     * @example
     * // Count the number of UserTagStats
     * const count = await prisma.userTagStats.count({
     *   where: {
     *     // ... the filter for the UserTagStats we want to count
     *   }
     * })
     **/
    count<T extends UserTagStatsCountArgs>(
      args?: Subset<T, UserTagStatsCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTagStatsCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a UserTagStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserTagStatsAggregateArgs>(
      args: Subset<T, UserTagStatsAggregateArgs>
    ): Prisma.PrismaPromise<GetUserTagStatsAggregateType<T>>;

    /**
     * Group by UserTagStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTagStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserTagStatsGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTagStatsGroupByArgs['orderBy'] }
        : { orderBy?: UserTagStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, UserTagStatsGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetUserTagStatsGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the UserTagStats model
     */
    readonly fields: UserTagStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTagStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTagStatsClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, TagDefaultArgs<ExtArgs>>
    ): Prisma__TagClient<
      | $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the UserTagStats model
   */
  interface UserTagStatsFieldRefs {
    readonly id: FieldRef<'UserTagStats', 'Int'>;
    readonly userId: FieldRef<'UserTagStats', 'Int'>;
    readonly tagId: FieldRef<'UserTagStats', 'Int'>;
    readonly postCount: FieldRef<'UserTagStats', 'Int'>;
    readonly updatedAt: FieldRef<'UserTagStats', 'DateTime'>;
    readonly createdAt: FieldRef<'UserTagStats', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * UserTagStats findUnique
   */
  export type UserTagStatsFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * Filter, which UserTagStats to fetch.
     */
    where: UserTagStatsWhereUniqueInput;
  };

  /**
   * UserTagStats findUniqueOrThrow
   */
  export type UserTagStatsFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * Filter, which UserTagStats to fetch.
     */
    where: UserTagStatsWhereUniqueInput;
  };

  /**
   * UserTagStats findFirst
   */
  export type UserTagStatsFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * Filter, which UserTagStats to fetch.
     */
    where?: UserTagStatsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserTagStats to fetch.
     */
    orderBy?: UserTagStatsOrderByWithRelationInput | UserTagStatsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserTagStats.
     */
    cursor?: UserTagStatsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserTagStats from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserTagStats.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserTagStats.
     */
    distinct?: UserTagStatsScalarFieldEnum | UserTagStatsScalarFieldEnum[];
  };

  /**
   * UserTagStats findFirstOrThrow
   */
  export type UserTagStatsFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * Filter, which UserTagStats to fetch.
     */
    where?: UserTagStatsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserTagStats to fetch.
     */
    orderBy?: UserTagStatsOrderByWithRelationInput | UserTagStatsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for UserTagStats.
     */
    cursor?: UserTagStatsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserTagStats from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserTagStats.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of UserTagStats.
     */
    distinct?: UserTagStatsScalarFieldEnum | UserTagStatsScalarFieldEnum[];
  };

  /**
   * UserTagStats findMany
   */
  export type UserTagStatsFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * Filter, which UserTagStats to fetch.
     */
    where?: UserTagStatsWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of UserTagStats to fetch.
     */
    orderBy?: UserTagStatsOrderByWithRelationInput | UserTagStatsOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing UserTagStats.
     */
    cursor?: UserTagStatsWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` UserTagStats from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` UserTagStats.
     */
    skip?: number;
    distinct?: UserTagStatsScalarFieldEnum | UserTagStatsScalarFieldEnum[];
  };

  /**
   * UserTagStats create
   */
  export type UserTagStatsCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * The data needed to create a UserTagStats.
     */
    data: XOR<UserTagStatsCreateInput, UserTagStatsUncheckedCreateInput>;
  };

  /**
   * UserTagStats createMany
   */
  export type UserTagStatsCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many UserTagStats.
     */
    data: UserTagStatsCreateManyInput | UserTagStatsCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * UserTagStats createManyAndReturn
   */
  export type UserTagStatsCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * The data used to create many UserTagStats.
     */
    data: UserTagStatsCreateManyInput | UserTagStatsCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserTagStats update
   */
  export type UserTagStatsUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * The data needed to update a UserTagStats.
     */
    data: XOR<UserTagStatsUpdateInput, UserTagStatsUncheckedUpdateInput>;
    /**
     * Choose, which UserTagStats to update.
     */
    where: UserTagStatsWhereUniqueInput;
  };

  /**
   * UserTagStats updateMany
   */
  export type UserTagStatsUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update UserTagStats.
     */
    data: XOR<UserTagStatsUpdateManyMutationInput, UserTagStatsUncheckedUpdateManyInput>;
    /**
     * Filter which UserTagStats to update
     */
    where?: UserTagStatsWhereInput;
    /**
     * Limit how many UserTagStats to update.
     */
    limit?: number;
  };

  /**
   * UserTagStats updateManyAndReturn
   */
  export type UserTagStatsUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * The data used to update UserTagStats.
     */
    data: XOR<UserTagStatsUpdateManyMutationInput, UserTagStatsUncheckedUpdateManyInput>;
    /**
     * Filter which UserTagStats to update
     */
    where?: UserTagStatsWhereInput;
    /**
     * Limit how many UserTagStats to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * UserTagStats upsert
   */
  export type UserTagStatsUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * The filter to search for the UserTagStats to update in case it exists.
     */
    where: UserTagStatsWhereUniqueInput;
    /**
     * In case the UserTagStats found by the `where` argument doesn't exist, create a new UserTagStats with this data.
     */
    create: XOR<UserTagStatsCreateInput, UserTagStatsUncheckedCreateInput>;
    /**
     * In case the UserTagStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTagStatsUpdateInput, UserTagStatsUncheckedUpdateInput>;
  };

  /**
   * UserTagStats delete
   */
  export type UserTagStatsDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    /**
     * Filter which UserTagStats to delete.
     */
    where: UserTagStatsWhereUniqueInput;
  };

  /**
   * UserTagStats deleteMany
   */
  export type UserTagStatsDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which UserTagStats to delete
     */
    where?: UserTagStatsWhereInput;
    /**
     * Limit how many UserTagStats to delete.
     */
    limit?: number;
  };

  /**
   * UserTagStats without action
   */
  export type UserTagStatsDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
  };

  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null;
    _avg: PostAvgAggregateOutputType | null;
    _sum: PostSumAggregateOutputType | null;
    _min: PostMinAggregateOutputType | null;
    _max: PostMaxAggregateOutputType | null;
  };

  export type PostAvgAggregateOutputType = {
    id: number | null;
    authorId: number | null;
    likeCount: number | null;
    commentCount: number | null;
  };

  export type PostSumAggregateOutputType = {
    id: number | null;
    authorId: number | null;
    likeCount: number | null;
    commentCount: number | null;
  };

  export type PostMinAggregateOutputType = {
    id: number | null;
    title: string | null;
    content: string | null;
    createdAt: Date | null;
    authorId: number | null;
    likeCount: number | null;
    commentCount: number | null;
  };

  export type PostMaxAggregateOutputType = {
    id: number | null;
    title: string | null;
    content: string | null;
    createdAt: Date | null;
    authorId: number | null;
    likeCount: number | null;
    commentCount: number | null;
  };

  export type PostCountAggregateOutputType = {
    id: number;
    title: number;
    content: number;
    createdAt: number;
    authorId: number;
    likeCount: number;
    commentCount: number;
    _all: number;
  };

  export type PostAvgAggregateInputType = {
    id?: true;
    authorId?: true;
    likeCount?: true;
    commentCount?: true;
  };

  export type PostSumAggregateInputType = {
    id?: true;
    authorId?: true;
    likeCount?: true;
    commentCount?: true;
  };

  export type PostMinAggregateInputType = {
    id?: true;
    title?: true;
    content?: true;
    createdAt?: true;
    authorId?: true;
    likeCount?: true;
    commentCount?: true;
  };

  export type PostMaxAggregateInputType = {
    id?: true;
    title?: true;
    content?: true;
    createdAt?: true;
    authorId?: true;
    likeCount?: true;
    commentCount?: true;
  };

  export type PostCountAggregateInputType = {
    id?: true;
    title?: true;
    content?: true;
    createdAt?: true;
    authorId?: true;
    likeCount?: true;
    commentCount?: true;
    _all?: true;
  };

  export type PostAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Posts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Posts
     **/
    _count?: true | PostCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: PostAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: PostSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PostMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PostMaxAggregateInputType;
  };

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
    [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>;
  };

  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      where?: PostWhereInput;
      orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[];
      by: PostScalarFieldEnum[] | PostScalarFieldEnum;
      having?: PostScalarWhereWithAggregatesInput;
      take?: number;
      skip?: number;
      _count?: PostCountAggregateInputType | true;
      _avg?: PostAvgAggregateInputType;
      _sum?: PostSumAggregateInputType;
      _min?: PostMinAggregateInputType;
      _max?: PostMaxAggregateInputType;
    };

  export type PostGroupByOutputType = {
    id: number;
    title: string;
    content: string;
    createdAt: Date;
    authorId: number;
    likeCount: number;
    commentCount: number;
    _count: PostCountAggregateOutputType | null;
    _avg: PostAvgAggregateOutputType | null;
    _sum: PostSumAggregateOutputType | null;
    _min: PostMinAggregateOutputType | null;
    _max: PostMaxAggregateOutputType | null;
  };

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> & {
        [P in keyof T & keyof PostGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], PostGroupByOutputType[P]>
          : GetScalarType<T[P], PostGroupByOutputType[P]>;
      }
    >
  >;

  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        title?: boolean;
        content?: boolean;
        createdAt?: boolean;
        authorId?: boolean;
        likeCount?: boolean;
        commentCount?: boolean;
        author?: boolean | UserDefaultArgs<ExtArgs>;
        tags?: boolean | Post$tagsArgs<ExtArgs>;
        comments?: boolean | Post$commentsArgs<ExtArgs>;
        likes?: boolean | Post$likesArgs<ExtArgs>;
        shares?: boolean | Post$sharesArgs<ExtArgs>;
        feed?: boolean | Post$feedArgs<ExtArgs>;
        _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['post']
    >;

  export type PostSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      content?: boolean;
      createdAt?: boolean;
      authorId?: boolean;
      likeCount?: boolean;
      commentCount?: boolean;
      author?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['post']
  >;

  export type PostSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      title?: boolean;
      content?: boolean;
      createdAt?: boolean;
      authorId?: boolean;
      likeCount?: boolean;
      commentCount?: boolean;
      author?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['post']
  >;

  export type PostSelectScalar = {
    id?: boolean;
    title?: boolean;
    content?: boolean;
    createdAt?: boolean;
    authorId?: boolean;
    likeCount?: boolean;
    commentCount?: boolean;
  };

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<
      'id' | 'title' | 'content' | 'createdAt' | 'authorId' | 'likeCount' | 'commentCount',
      ExtArgs['result']['post']
    >;
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>;
    tags?: boolean | Post$tagsArgs<ExtArgs>;
    comments?: boolean | Post$commentsArgs<ExtArgs>;
    likes?: boolean | Post$likesArgs<ExtArgs>;
    shares?: boolean | Post$sharesArgs<ExtArgs>;
    feed?: boolean | Post$feedArgs<ExtArgs>;
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type PostIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    author?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type PostIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    author?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'Post';
    objects: {
      author: Prisma.$UserPayload<ExtArgs>;
      tags: Prisma.$PostTagPayload<ExtArgs>[];
      comments: Prisma.$CommentPayload<ExtArgs>[];
      likes: Prisma.$LikePayload<ExtArgs>[];
      shares: Prisma.$SharePayload<ExtArgs>[];
      feed: Prisma.$FeedPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        title: string;
        content: string;
        createdAt: Date;
        authorId: number;
        likeCount: number;
        commentCount: number;
      },
      ExtArgs['result']['post']
    >;
    composites: {};
  };

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<
    Prisma.$PostPayload,
    S
  >;

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    PostFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: PostCountAggregateInputType | true;
  };

  export interface PostDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post']; meta: { name: 'Post' } };
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(
      args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(
      args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     *
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     *
     */
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     *
     */
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(
      args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     *
     */
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(
      args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs<ExtArgs>>
    ): Prisma__PostClient<
      $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
     **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PostAggregateArgs>(
      args: Subset<T, PostAggregateArgs>
    ): Prisma.PrismaPromise<GetPostAggregateType<T>>;

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Post model
     */
    readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    author<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    tags<T extends Post$tagsArgs<ExtArgs> = {}>(
      args?: Subset<T, Post$tagsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    comments<T extends Post$commentsArgs<ExtArgs> = {}>(
      args?: Subset<T, Post$commentsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    likes<T extends Post$likesArgs<ExtArgs> = {}>(
      args?: Subset<T, Post$likesArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    shares<T extends Post$sharesArgs<ExtArgs> = {}>(
      args?: Subset<T, Post$sharesArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    feed<T extends Post$feedArgs<ExtArgs> = {}>(
      args?: Subset<T, Post$feedArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<'Post', 'Int'>;
    readonly title: FieldRef<'Post', 'String'>;
    readonly content: FieldRef<'Post', 'String'>;
    readonly createdAt: FieldRef<'Post', 'DateTime'>;
    readonly authorId: FieldRef<'Post', 'Int'>;
    readonly likeCount: FieldRef<'Post', 'Int'>;
    readonly commentCount: FieldRef<'Post', 'Int'>;
  }

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput;
  };

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput;
  };

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Posts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[];
  };

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Posts.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[];
  };

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Post
       */
      select?: PostSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Post
       */
      omit?: PostOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: PostInclude<ExtArgs> | null;
      /**
       * Filter, which Posts to fetch.
       */
      where?: PostWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Posts to fetch.
       */
      orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the position for listing Posts.
       */
      cursor?: PostWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Posts from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Posts.
       */
      skip?: number;
      distinct?: PostScalarFieldEnum | PostScalarFieldEnum[];
    };

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>;
  };

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>;
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput;
  };

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>;
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput;
    /**
     * Limit how many Posts to update.
     */
    limit?: number;
  };

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>;
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput;
    /**
     * Limit how many Posts to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput;
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>;
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>;
  };

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null;
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput;
  };

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput;
    /**
     * Limit how many Posts to delete.
     */
    limit?: number;
  };

  /**
   * Post.tags
   */
  export type Post$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    where?: PostTagWhereInput;
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[];
    cursor?: PostTagWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[];
  };

  /**
   * Post.comments
   */
  export type Post$commentsArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    where?: CommentWhereInput;
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[];
    cursor?: CommentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[];
  };

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    where?: LikeWhereInput;
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[];
    cursor?: LikeWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[];
  };

  /**
   * Post.shares
   */
  export type Post$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
      where?: ShareWhereInput;
      orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[];
      cursor?: ShareWhereUniqueInput;
      take?: number;
      skip?: number;
      distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[];
    };

  /**
   * Post.feed
   */
  export type Post$feedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    where?: FeedWhereInput;
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[];
    cursor?: FeedWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[];
  };

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Post
       */
      select?: PostSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Post
       */
      omit?: PostOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: PostInclude<ExtArgs> | null;
    };

  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null;
    _avg: FollowAvgAggregateOutputType | null;
    _sum: FollowSumAggregateOutputType | null;
    _min: FollowMinAggregateOutputType | null;
    _max: FollowMaxAggregateOutputType | null;
  };

  export type FollowAvgAggregateOutputType = {
    id: number | null;
    followerId: number | null;
    followedId: number | null;
  };

  export type FollowSumAggregateOutputType = {
    id: number | null;
    followerId: number | null;
    followedId: number | null;
  };

  export type FollowMinAggregateOutputType = {
    id: number | null;
    followerId: number | null;
    followedId: number | null;
    createdAt: Date | null;
  };

  export type FollowMaxAggregateOutputType = {
    id: number | null;
    followerId: number | null;
    followedId: number | null;
    createdAt: Date | null;
  };

  export type FollowCountAggregateOutputType = {
    id: number;
    followerId: number;
    followedId: number;
    createdAt: number;
    _all: number;
  };

  export type FollowAvgAggregateInputType = {
    id?: true;
    followerId?: true;
    followedId?: true;
  };

  export type FollowSumAggregateInputType = {
    id?: true;
    followerId?: true;
    followedId?: true;
  };

  export type FollowMinAggregateInputType = {
    id?: true;
    followerId?: true;
    followedId?: true;
    createdAt?: true;
  };

  export type FollowMaxAggregateInputType = {
    id?: true;
    followerId?: true;
    followedId?: true;
    createdAt?: true;
  };

  export type FollowCountAggregateInputType = {
    id?: true;
    followerId?: true;
    followedId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type FollowAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Follows.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Follows
     **/
    _count?: true | FollowCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: FollowAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: FollowSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: FollowMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: FollowMaxAggregateInputType;
  };

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
    [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>;
  };

  export type FollowGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[];
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum;
    having?: FollowScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: FollowCountAggregateInputType | true;
    _avg?: FollowAvgAggregateInputType;
    _sum?: FollowSumAggregateInputType;
    _min?: FollowMinAggregateInputType;
    _max?: FollowMaxAggregateInputType;
  };

  export type FollowGroupByOutputType = {
    id: number;
    followerId: number;
    followedId: number;
    createdAt: Date;
    _count: FollowCountAggregateOutputType | null;
    _avg: FollowAvgAggregateOutputType | null;
    _sum: FollowSumAggregateOutputType | null;
    _min: FollowMinAggregateOutputType | null;
    _max: FollowMaxAggregateOutputType | null;
  };

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> & {
        [P in keyof T & keyof FollowGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
          : GetScalarType<T[P], FollowGroupByOutputType[P]>;
      }
    >
  >;

  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        followerId?: boolean;
        followedId?: boolean;
        createdAt?: boolean;
        follower?: boolean | UserDefaultArgs<ExtArgs>;
        followed?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['follow']
    >;

  export type FollowSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      followerId?: boolean;
      followedId?: boolean;
      createdAt?: boolean;
      follower?: boolean | UserDefaultArgs<ExtArgs>;
      followed?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['follow']
  >;

  export type FollowSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      followerId?: boolean;
      followedId?: boolean;
      createdAt?: boolean;
      follower?: boolean | UserDefaultArgs<ExtArgs>;
      followed?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['follow']
  >;

  export type FollowSelectScalar = {
    id?: boolean;
    followerId?: boolean;
    followedId?: boolean;
    createdAt?: boolean;
  };

  export type FollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<
      'id' | 'followerId' | 'followedId' | 'createdAt',
      ExtArgs['result']['follow']
    >;
  export type FollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>;
    followed?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type FollowIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    follower?: boolean | UserDefaultArgs<ExtArgs>;
    followed?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type FollowIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    follower?: boolean | UserDefaultArgs<ExtArgs>;
    followed?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'Follow';
    objects: {
      follower: Prisma.$UserPayload<ExtArgs>;
      followed: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        followerId: number;
        followedId: number;
        createdAt: Date;
      },
      ExtArgs['result']['follow']
    >;
    composites: {};
  };

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> =
    $Result.GetResult<Prisma.$FollowPayload, S>;

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    FollowFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: FollowCountAggregateInputType | true;
  };

  export interface FollowDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow']; meta: { name: 'Follow' } };
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(
      args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(
      args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(
      args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     *
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     *
     */
    findMany<T extends FollowFindManyArgs>(
      args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     *
     */
    create<T extends FollowCreateArgs>(
      args: SelectSubset<T, FollowCreateArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends FollowCreateManyArgs>(
      args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Follows and returns the data saved in the database.
     * @param {FollowCreateManyAndReturnArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends FollowCreateManyAndReturnArgs>(
      args?: SelectSubset<T, FollowCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     *
     */
    delete<T extends FollowDeleteArgs>(
      args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends FollowUpdateArgs>(
      args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends FollowDeleteManyArgs>(
      args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends FollowUpdateManyArgs>(
      args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Follows and returns the data updated in the database.
     * @param {FollowUpdateManyAndReturnArgs} args - Arguments to update many Follows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends FollowUpdateManyAndReturnArgs>(
      args: SelectSubset<T, FollowUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(
      args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>
    ): Prisma__FollowClient<
      $Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
     **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends FollowAggregateArgs>(
      args: Subset<T, FollowAggregateArgs>
    ): Prisma.PrismaPromise<GetFollowAggregateType<T>>;

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Follow model
     */
    readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    followed<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Follow model
   */
  interface FollowFieldRefs {
    readonly id: FieldRef<'Follow', 'Int'>;
    readonly followerId: FieldRef<'Follow', 'Int'>;
    readonly followedId: FieldRef<'Follow', 'Int'>;
    readonly createdAt: FieldRef<'Follow', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput;
  };

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput;
  };

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Follows.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[];
  };

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Follows.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[];
  };

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Follows.
     */
    skip?: number;
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[];
  };

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Follow
       */
      select?: FollowSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Follow
       */
      omit?: FollowOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: FollowInclude<ExtArgs> | null;
      /**
       * The data needed to create a Follow.
       */
      data: XOR<FollowCreateInput, FollowUncheckedCreateInput>;
    };

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Follow createManyAndReturn
   */
  export type FollowCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Follow
       */
      select?: FollowSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Follow
       */
      omit?: FollowOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: FollowInclude<ExtArgs> | null;
      /**
       * The data needed to update a Follow.
       */
      data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>;
      /**
       * Choose, which Follow to update.
       */
      where: FollowWhereUniqueInput;
    };

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>;
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput;
    /**
     * Limit how many Follows to update.
     */
    limit?: number;
  };

  /**
   * Follow updateManyAndReturn
   */
  export type FollowUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>;
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput;
    /**
     * Limit how many Follows to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Follow
       */
      select?: FollowSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Follow
       */
      omit?: FollowOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: FollowInclude<ExtArgs> | null;
      /**
       * The filter to search for the Follow to update in case it exists.
       */
      where: FollowWhereUniqueInput;
      /**
       * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
       */
      create: XOR<FollowCreateInput, FollowUncheckedCreateInput>;
      /**
       * In case the Follow was found with the provided `where` argument, update it with this data.
       */
      update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>;
    };

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Follow
       */
      select?: FollowSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Follow
       */
      omit?: FollowOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: FollowInclude<ExtArgs> | null;
      /**
       * Filter which Follow to delete.
       */
      where: FollowWhereUniqueInput;
    };

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput;
    /**
     * Limit how many Follows to delete.
     */
    limit?: number;
  };

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null;
  };

  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null;
    _avg: TagAvgAggregateOutputType | null;
    _sum: TagSumAggregateOutputType | null;
    _min: TagMinAggregateOutputType | null;
    _max: TagMaxAggregateOutputType | null;
  };

  export type TagAvgAggregateOutputType = {
    id: number | null;
  };

  export type TagSumAggregateOutputType = {
    id: number | null;
  };

  export type TagMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    createdAt: Date | null;
  };

  export type TagMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    createdAt: Date | null;
  };

  export type TagCountAggregateOutputType = {
    id: number;
    name: number;
    createdAt: number;
    _all: number;
  };

  export type TagAvgAggregateInputType = {
    id?: true;
  };

  export type TagSumAggregateInputType = {
    id?: true;
  };

  export type TagMinAggregateInputType = {
    id?: true;
    name?: true;
    createdAt?: true;
  };

  export type TagMaxAggregateInputType = {
    id?: true;
    name?: true;
    createdAt?: true;
  };

  export type TagCountAggregateInputType = {
    id?: true;
    name?: true;
    createdAt?: true;
    _all?: true;
  };

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Filter which Tag to aggregate.
       */
      where?: TagWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Tags to fetch.
       */
      orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the start position
       */
      cursor?: TagWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Tags from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Tags.
       */
      skip?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
       *
       * Count returned Tags
       **/
      _count?: true | TagCountAggregateInputType;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
       *
       * Select which fields to average
       **/
      _avg?: TagAvgAggregateInputType;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
       *
       * Select which fields to sum
       **/
      _sum?: TagSumAggregateInputType;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
       *
       * Select which fields to find the minimum value
       **/
      _min?: TagMinAggregateInputType;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
       *
       * Select which fields to find the maximum value
       **/
      _max?: TagMaxAggregateInputType;
    };

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
    [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>;
  };

  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput;
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[];
    by: TagScalarFieldEnum[] | TagScalarFieldEnum;
    having?: TagScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TagCountAggregateInputType | true;
    _avg?: TagAvgAggregateInputType;
    _sum?: TagSumAggregateInputType;
    _min?: TagMinAggregateInputType;
    _max?: TagMaxAggregateInputType;
  };

  export type TagGroupByOutputType = {
    id: number;
    name: string;
    createdAt: Date;
    _count: TagCountAggregateOutputType | null;
    _avg: TagAvgAggregateOutputType | null;
    _sum: TagSumAggregateOutputType | null;
    _min: TagMinAggregateOutputType | null;
    _max: TagMaxAggregateOutputType | null;
  };

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> & {
        [P in keyof T & keyof TagGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], TagGroupByOutputType[P]>
          : GetScalarType<T[P], TagGroupByOutputType[P]>;
      }
    >
  >;

  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        name?: boolean;
        createdAt?: boolean;
        posts?: boolean | Tag$postsArgs<ExtArgs>;
        users?: boolean | Tag$usersArgs<ExtArgs>;
        followers?: boolean | Tag$followersArgs<ExtArgs>;
        _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['tag']
    >;

  export type TagSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      createdAt?: boolean;
    },
    ExtArgs['result']['tag']
  >;

  export type TagSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      name?: boolean;
      createdAt?: boolean;
    },
    ExtArgs['result']['tag']
  >;

  export type TagSelectScalar = {
    id?: boolean;
    name?: boolean;
    createdAt?: boolean;
  };

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'name' | 'createdAt', ExtArgs['result']['tag']>;
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Tag$postsArgs<ExtArgs>;
    users?: boolean | Tag$usersArgs<ExtArgs>;
    followers?: boolean | Tag$followersArgs<ExtArgs>;
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>;
  };
  export type TagIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};
  export type TagIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {};

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'Tag';
    objects: {
      posts: Prisma.$PostTagPayload<ExtArgs>[];
      users: Prisma.$UserTagStatsPayload<ExtArgs>[];
      followers: Prisma.$TagFollowPayload<ExtArgs>[];
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        name: string;
        createdAt: Date;
      },
      ExtArgs['result']['tag']
    >;
    composites: {};
  };

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<
    Prisma.$TagPayload,
    S
  >;

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    TagFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: TagCountAggregateInputType | true;
  };

  export interface TagDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag']; meta: { name: 'Tag' } };
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(
      args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(
      args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(
      args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     *
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     *
     */
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     *
     */
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(
      args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     *
     */
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(
      args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs<ExtArgs>>
    ): Prisma__TagClient<
      $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
     **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TagAggregateArgs>(
      args: Subset<T, TagAggregateArgs>
    ): Prisma.PrismaPromise<GetTagAggregateType<T>>;

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Tag model
     */
    readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    posts<T extends Tag$postsArgs<ExtArgs> = {}>(
      args?: Subset<T, Tag$postsArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    users<T extends Tag$usersArgs<ExtArgs> = {}>(
      args?: Subset<T, Tag$usersArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      | $Result.GetResult<Prisma.$UserTagStatsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
      | Null
    >;
    followers<T extends Tag$followersArgs<ExtArgs> = {}>(
      args?: Subset<T, Tag$followersArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<'Tag', 'Int'>;
    readonly name: FieldRef<'Tag', 'String'>;
    readonly createdAt: FieldRef<'Tag', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput;
  };

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput;
  };

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Tag
       */
      select?: TagSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Tag
       */
      omit?: TagOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: TagInclude<ExtArgs> | null;
      /**
       * Filter, which Tag to fetch.
       */
      where?: TagWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Tags to fetch.
       */
      orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the position for searching for Tags.
       */
      cursor?: TagWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Tags from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Tags.
       */
      skip?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
       *
       * Filter by unique combinations of Tags.
       */
      distinct?: TagScalarFieldEnum | TagScalarFieldEnum[];
    };

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[];
  };

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Tag
       */
      select?: TagSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Tag
       */
      omit?: TagOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: TagInclude<ExtArgs> | null;
      /**
       * Filter, which Tags to fetch.
       */
      where?: TagWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Tags to fetch.
       */
      orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the position for listing Tags.
       */
      cursor?: TagWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Tags from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Tags.
       */
      skip?: number;
      distinct?: TagScalarFieldEnum | TagScalarFieldEnum[];
    };

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>;
  };

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>;
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput;
  };

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>;
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput;
    /**
     * Limit how many Tags to update.
     */
    limit?: number;
  };

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>;
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput;
    /**
     * Limit how many Tags to update.
     */
    limit?: number;
  };

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput;
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>;
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>;
  };

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput;
  };

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput;
    /**
     * Limit how many Tags to delete.
     */
    limit?: number;
  };

  /**
   * Tag.posts
   */
  export type Tag$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    where?: PostTagWhereInput;
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[];
    cursor?: PostTagWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[];
  };

  /**
   * Tag.users
   */
  export type Tag$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTagStats
     */
    select?: UserTagStatsSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the UserTagStats
     */
    omit?: UserTagStatsOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTagStatsInclude<ExtArgs> | null;
    where?: UserTagStatsWhereInput;
    orderBy?: UserTagStatsOrderByWithRelationInput | UserTagStatsOrderByWithRelationInput[];
    cursor?: UserTagStatsWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: UserTagStatsScalarFieldEnum | UserTagStatsScalarFieldEnum[];
  };

  /**
   * Tag.followers
   */
  export type Tag$followersArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    where?: TagFollowWhereInput;
    orderBy?: TagFollowOrderByWithRelationInput | TagFollowOrderByWithRelationInput[];
    cursor?: TagFollowWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: TagFollowScalarFieldEnum | TagFollowScalarFieldEnum[];
  };

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null;
  };

  /**
   * Model PostTag
   */

  export type AggregatePostTag = {
    _count: PostTagCountAggregateOutputType | null;
    _avg: PostTagAvgAggregateOutputType | null;
    _sum: PostTagSumAggregateOutputType | null;
    _min: PostTagMinAggregateOutputType | null;
    _max: PostTagMaxAggregateOutputType | null;
  };

  export type PostTagAvgAggregateOutputType = {
    id: number | null;
    postId: number | null;
    tagId: number | null;
  };

  export type PostTagSumAggregateOutputType = {
    id: number | null;
    postId: number | null;
    tagId: number | null;
  };

  export type PostTagMinAggregateOutputType = {
    id: number | null;
    postId: number | null;
    tagId: number | null;
    createdAt: Date | null;
  };

  export type PostTagMaxAggregateOutputType = {
    id: number | null;
    postId: number | null;
    tagId: number | null;
    createdAt: Date | null;
  };

  export type PostTagCountAggregateOutputType = {
    id: number;
    postId: number;
    tagId: number;
    createdAt: number;
    _all: number;
  };

  export type PostTagAvgAggregateInputType = {
    id?: true;
    postId?: true;
    tagId?: true;
  };

  export type PostTagSumAggregateInputType = {
    id?: true;
    postId?: true;
    tagId?: true;
  };

  export type PostTagMinAggregateInputType = {
    id?: true;
    postId?: true;
    tagId?: true;
    createdAt?: true;
  };

  export type PostTagMaxAggregateInputType = {
    id?: true;
    postId?: true;
    tagId?: true;
    createdAt?: true;
  };

  export type PostTagCountAggregateInputType = {
    id?: true;
    postId?: true;
    tagId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type PostTagAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which PostTag to aggregate.
     */
    where?: PostTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: PostTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PostTags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned PostTags
     **/
    _count?: true | PostTagCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: PostTagAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: PostTagSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PostTagMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PostTagMaxAggregateInputType;
  };

  export type GetPostTagAggregateType<T extends PostTagAggregateArgs> = {
    [P in keyof T & keyof AggregatePostTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostTag[P]>
      : GetScalarType<T[P], AggregatePostTag[P]>;
  };

  export type PostTagGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: PostTagWhereInput;
    orderBy?: PostTagOrderByWithAggregationInput | PostTagOrderByWithAggregationInput[];
    by: PostTagScalarFieldEnum[] | PostTagScalarFieldEnum;
    having?: PostTagScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: PostTagCountAggregateInputType | true;
    _avg?: PostTagAvgAggregateInputType;
    _sum?: PostTagSumAggregateInputType;
    _min?: PostTagMinAggregateInputType;
    _max?: PostTagMaxAggregateInputType;
  };

  export type PostTagGroupByOutputType = {
    id: number;
    postId: number;
    tagId: number;
    createdAt: Date;
    _count: PostTagCountAggregateOutputType | null;
    _avg: PostTagAvgAggregateOutputType | null;
    _sum: PostTagSumAggregateOutputType | null;
    _min: PostTagMinAggregateOutputType | null;
    _max: PostTagMaxAggregateOutputType | null;
  };

  type GetPostTagGroupByPayload<T extends PostTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostTagGroupByOutputType, T['by']> & {
        [P in keyof T & keyof PostTagGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], PostTagGroupByOutputType[P]>
          : GetScalarType<T[P], PostTagGroupByOutputType[P]>;
      }
    >
  >;

  export type PostTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        postId?: boolean;
        tagId?: boolean;
        createdAt?: boolean;
        post?: boolean | PostDefaultArgs<ExtArgs>;
        tag?: boolean | TagDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['postTag']
    >;

  export type PostTagSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      tagId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['postTag']
  >;

  export type PostTagSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      tagId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['postTag']
  >;

  export type PostTagSelectScalar = {
    id?: boolean;
    postId?: boolean;
    tagId?: boolean;
    createdAt?: boolean;
  };

  export type PostTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'postId' | 'tagId' | 'createdAt', ExtArgs['result']['postTag']>;
  export type PostTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    tag?: boolean | TagDefaultArgs<ExtArgs>;
  };
  export type PostTagIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    tag?: boolean | TagDefaultArgs<ExtArgs>;
  };
  export type PostTagIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    tag?: boolean | TagDefaultArgs<ExtArgs>;
  };

  export type $PostTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      name: 'PostTag';
      objects: {
        post: Prisma.$PostPayload<ExtArgs>;
        tag: Prisma.$TagPayload<ExtArgs>;
      };
      scalars: $Extensions.GetPayloadResult<
        {
          id: number;
          postId: number;
          tagId: number;
          createdAt: Date;
        },
        ExtArgs['result']['postTag']
      >;
      composites: {};
    };

  type PostTagGetPayload<S extends boolean | null | undefined | PostTagDefaultArgs> =
    $Result.GetResult<Prisma.$PostTagPayload, S>;

  type PostTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    PostTagFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: PostTagCountAggregateInputType | true;
  };

  export interface PostTagDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostTag']; meta: { name: 'PostTag' } };
    /**
     * Find zero or one PostTag that matches the filter.
     * @param {PostTagFindUniqueArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostTagFindUniqueArgs>(
      args: SelectSubset<T, PostTagFindUniqueArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one PostTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostTagFindUniqueOrThrowArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostTagFindUniqueOrThrowArgs>(
      args: SelectSubset<T, PostTagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first PostTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagFindFirstArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostTagFindFirstArgs>(
      args?: SelectSubset<T, PostTagFindFirstArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first PostTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagFindFirstOrThrowArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostTagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostTagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more PostTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostTags
     * const postTags = await prisma.postTag.findMany()
     *
     * // Get first 10 PostTags
     * const postTags = await prisma.postTag.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const postTagWithIdOnly = await prisma.postTag.findMany({ select: { id: true } })
     *
     */
    findMany<T extends PostTagFindManyArgs>(
      args?: SelectSubset<T, PostTagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a PostTag.
     * @param {PostTagCreateArgs} args - Arguments to create a PostTag.
     * @example
     * // Create one PostTag
     * const PostTag = await prisma.postTag.create({
     *   data: {
     *     // ... data to create a PostTag
     *   }
     * })
     *
     */
    create<T extends PostTagCreateArgs>(
      args: SelectSubset<T, PostTagCreateArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many PostTags.
     * @param {PostTagCreateManyArgs} args - Arguments to create many PostTags.
     * @example
     * // Create many PostTags
     * const postTag = await prisma.postTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends PostTagCreateManyArgs>(
      args?: SelectSubset<T, PostTagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many PostTags and returns the data saved in the database.
     * @param {PostTagCreateManyAndReturnArgs} args - Arguments to create many PostTags.
     * @example
     * // Create many PostTags
     * const postTag = await prisma.postTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many PostTags and only return the `id`
     * const postTagWithIdOnly = await prisma.postTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends PostTagCreateManyAndReturnArgs>(
      args?: SelectSubset<T, PostTagCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$PostTagPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a PostTag.
     * @param {PostTagDeleteArgs} args - Arguments to delete one PostTag.
     * @example
     * // Delete one PostTag
     * const PostTag = await prisma.postTag.delete({
     *   where: {
     *     // ... filter to delete one PostTag
     *   }
     * })
     *
     */
    delete<T extends PostTagDeleteArgs>(
      args: SelectSubset<T, PostTagDeleteArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one PostTag.
     * @param {PostTagUpdateArgs} args - Arguments to update one PostTag.
     * @example
     * // Update one PostTag
     * const postTag = await prisma.postTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends PostTagUpdateArgs>(
      args: SelectSubset<T, PostTagUpdateArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more PostTags.
     * @param {PostTagDeleteManyArgs} args - Arguments to filter PostTags to delete.
     * @example
     * // Delete a few PostTags
     * const { count } = await prisma.postTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends PostTagDeleteManyArgs>(
      args?: SelectSubset<T, PostTagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more PostTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostTags
     * const postTag = await prisma.postTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends PostTagUpdateManyArgs>(
      args: SelectSubset<T, PostTagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more PostTags and returns the data updated in the database.
     * @param {PostTagUpdateManyAndReturnArgs} args - Arguments to update many PostTags.
     * @example
     * // Update many PostTags
     * const postTag = await prisma.postTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more PostTags and only return the `id`
     * const postTagWithIdOnly = await prisma.postTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends PostTagUpdateManyAndReturnArgs>(
      args: SelectSubset<T, PostTagUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$PostTagPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one PostTag.
     * @param {PostTagUpsertArgs} args - Arguments to update or create a PostTag.
     * @example
     * // Update or create a PostTag
     * const postTag = await prisma.postTag.upsert({
     *   create: {
     *     // ... data to create a PostTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostTag we want to update
     *   }
     * })
     */
    upsert<T extends PostTagUpsertArgs>(
      args: SelectSubset<T, PostTagUpsertArgs<ExtArgs>>
    ): Prisma__PostTagClient<
      $Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of PostTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagCountArgs} args - Arguments to filter PostTags to count.
     * @example
     * // Count the number of PostTags
     * const count = await prisma.postTag.count({
     *   where: {
     *     // ... the filter for the PostTags we want to count
     *   }
     * })
     **/
    count<T extends PostTagCountArgs>(
      args?: Subset<T, PostTagCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostTagCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a PostTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PostTagAggregateArgs>(
      args: Subset<T, PostTagAggregateArgs>
    ): Prisma.PrismaPromise<GetPostTagAggregateType<T>>;

    /**
     * Group by PostTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends PostTagGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostTagGroupByArgs['orderBy'] }
        : { orderBy?: PostTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, PostTagGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetPostTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the PostTag model
     */
    readonly fields: PostTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostTagClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    post<T extends PostDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, PostDefaultArgs<ExtArgs>>
    ): Prisma__PostClient<
      | $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, TagDefaultArgs<ExtArgs>>
    ): Prisma__TagClient<
      | $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the PostTag model
   */
  interface PostTagFieldRefs {
    readonly id: FieldRef<'PostTag', 'Int'>;
    readonly postId: FieldRef<'PostTag', 'Int'>;
    readonly tagId: FieldRef<'PostTag', 'Int'>;
    readonly createdAt: FieldRef<'PostTag', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * PostTag findUnique
   */
  export type PostTagFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * Filter, which PostTag to fetch.
     */
    where: PostTagWhereUniqueInput;
  };

  /**
   * PostTag findUniqueOrThrow
   */
  export type PostTagFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * Filter, which PostTag to fetch.
     */
    where: PostTagWhereUniqueInput;
  };

  /**
   * PostTag findFirst
   */
  export type PostTagFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * Filter, which PostTag to fetch.
     */
    where?: PostTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for PostTags.
     */
    cursor?: PostTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PostTags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of PostTags.
     */
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[];
  };

  /**
   * PostTag findFirstOrThrow
   */
  export type PostTagFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * Filter, which PostTag to fetch.
     */
    where?: PostTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for PostTags.
     */
    cursor?: PostTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PostTags.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of PostTags.
     */
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[];
  };

  /**
   * PostTag findMany
   */
  export type PostTagFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * Filter, which PostTags to fetch.
     */
    where?: PostTagWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing PostTags.
     */
    cursor?: PostTagWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` PostTags.
     */
    skip?: number;
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[];
  };

  /**
   * PostTag create
   */
  export type PostTagCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * The data needed to create a PostTag.
     */
    data: XOR<PostTagCreateInput, PostTagUncheckedCreateInput>;
  };

  /**
   * PostTag createMany
   */
  export type PostTagCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many PostTags.
     */
    data: PostTagCreateManyInput | PostTagCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * PostTag createManyAndReturn
   */
  export type PostTagCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * The data used to create many PostTags.
     */
    data: PostTagCreateManyInput | PostTagCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * PostTag update
   */
  export type PostTagUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * The data needed to update a PostTag.
     */
    data: XOR<PostTagUpdateInput, PostTagUncheckedUpdateInput>;
    /**
     * Choose, which PostTag to update.
     */
    where: PostTagWhereUniqueInput;
  };

  /**
   * PostTag updateMany
   */
  export type PostTagUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update PostTags.
     */
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyInput>;
    /**
     * Filter which PostTags to update
     */
    where?: PostTagWhereInput;
    /**
     * Limit how many PostTags to update.
     */
    limit?: number;
  };

  /**
   * PostTag updateManyAndReturn
   */
  export type PostTagUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * The data used to update PostTags.
     */
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyInput>;
    /**
     * Filter which PostTags to update
     */
    where?: PostTagWhereInput;
    /**
     * Limit how many PostTags to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * PostTag upsert
   */
  export type PostTagUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * The filter to search for the PostTag to update in case it exists.
     */
    where: PostTagWhereUniqueInput;
    /**
     * In case the PostTag found by the `where` argument doesn't exist, create a new PostTag with this data.
     */
    create: XOR<PostTagCreateInput, PostTagUncheckedCreateInput>;
    /**
     * In case the PostTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostTagUpdateInput, PostTagUncheckedUpdateInput>;
  };

  /**
   * PostTag delete
   */
  export type PostTagDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
    /**
     * Filter which PostTag to delete.
     */
    where: PostTagWhereUniqueInput;
  };

  /**
   * PostTag deleteMany
   */
  export type PostTagDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which PostTags to delete
     */
    where?: PostTagWhereInput;
    /**
     * Limit how many PostTags to delete.
     */
    limit?: number;
  };

  /**
   * PostTag without action
   */
  export type PostTagDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the PostTag
     */
    omit?: PostTagOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null;
  };

  /**
   * Model TagFollow
   */

  export type AggregateTagFollow = {
    _count: TagFollowCountAggregateOutputType | null;
    _avg: TagFollowAvgAggregateOutputType | null;
    _sum: TagFollowSumAggregateOutputType | null;
    _min: TagFollowMinAggregateOutputType | null;
    _max: TagFollowMaxAggregateOutputType | null;
  };

  export type TagFollowAvgAggregateOutputType = {
    id: number | null;
    tagId: number | null;
    userId: number | null;
  };

  export type TagFollowSumAggregateOutputType = {
    id: number | null;
    tagId: number | null;
    userId: number | null;
  };

  export type TagFollowMinAggregateOutputType = {
    id: number | null;
    tagId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type TagFollowMaxAggregateOutputType = {
    id: number | null;
    tagId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type TagFollowCountAggregateOutputType = {
    id: number;
    tagId: number;
    userId: number;
    createdAt: number;
    _all: number;
  };

  export type TagFollowAvgAggregateInputType = {
    id?: true;
    tagId?: true;
    userId?: true;
  };

  export type TagFollowSumAggregateInputType = {
    id?: true;
    tagId?: true;
    userId?: true;
  };

  export type TagFollowMinAggregateInputType = {
    id?: true;
    tagId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type TagFollowMaxAggregateInputType = {
    id?: true;
    tagId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type TagFollowCountAggregateInputType = {
    id?: true;
    tagId?: true;
    userId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type TagFollowAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which TagFollow to aggregate.
     */
    where?: TagFollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TagFollows to fetch.
     */
    orderBy?: TagFollowOrderByWithRelationInput | TagFollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: TagFollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TagFollows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TagFollows.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned TagFollows
     **/
    _count?: true | TagFollowCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: TagFollowAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: TagFollowSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TagFollowMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TagFollowMaxAggregateInputType;
  };

  export type GetTagFollowAggregateType<T extends TagFollowAggregateArgs> = {
    [P in keyof T & keyof AggregateTagFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagFollow[P]>
      : GetScalarType<T[P], AggregateTagFollow[P]>;
  };

  export type TagFollowGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: TagFollowWhereInput;
    orderBy?: TagFollowOrderByWithAggregationInput | TagFollowOrderByWithAggregationInput[];
    by: TagFollowScalarFieldEnum[] | TagFollowScalarFieldEnum;
    having?: TagFollowScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TagFollowCountAggregateInputType | true;
    _avg?: TagFollowAvgAggregateInputType;
    _sum?: TagFollowSumAggregateInputType;
    _min?: TagFollowMinAggregateInputType;
    _max?: TagFollowMaxAggregateInputType;
  };

  export type TagFollowGroupByOutputType = {
    id: number;
    tagId: number;
    userId: number;
    createdAt: Date;
    _count: TagFollowCountAggregateOutputType | null;
    _avg: TagFollowAvgAggregateOutputType | null;
    _sum: TagFollowSumAggregateOutputType | null;
    _min: TagFollowMinAggregateOutputType | null;
    _max: TagFollowMaxAggregateOutputType | null;
  };

  type GetTagFollowGroupByPayload<T extends TagFollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagFollowGroupByOutputType, T['by']> & {
        [P in keyof T & keyof TagFollowGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], TagFollowGroupByOutputType[P]>
          : GetScalarType<T[P], TagFollowGroupByOutputType[P]>;
      }
    >
  >;

  export type TagFollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        tagId?: boolean;
        userId?: boolean;
        createdAt?: boolean;
        tag?: boolean | TagDefaultArgs<ExtArgs>;
        user?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['tagFollow']
    >;

  export type TagFollowSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      tagId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['tagFollow']
  >;

  export type TagFollowSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      tagId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      tag?: boolean | TagDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['tagFollow']
  >;

  export type TagFollowSelectScalar = {
    id?: boolean;
    tagId?: boolean;
    userId?: boolean;
    createdAt?: boolean;
  };

  export type TagFollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'tagId' | 'userId' | 'createdAt', ExtArgs['result']['tagFollow']>;
  export type TagFollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      tag?: boolean | TagDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    };
  export type TagFollowIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    tag?: boolean | TagDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type TagFollowIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    tag?: boolean | TagDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $TagFollowPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: 'TagFollow';
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        tagId: number;
        userId: number;
        createdAt: Date;
      },
      ExtArgs['result']['tagFollow']
    >;
    composites: {};
  };

  type TagFollowGetPayload<S extends boolean | null | undefined | TagFollowDefaultArgs> =
    $Result.GetResult<Prisma.$TagFollowPayload, S>;

  type TagFollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagFollowCountAggregateInputType | true;
    };

  export interface TagFollowDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>['model']['TagFollow'];
      meta: { name: 'TagFollow' };
    };
    /**
     * Find zero or one TagFollow that matches the filter.
     * @param {TagFollowFindUniqueArgs} args - Arguments to find a TagFollow
     * @example
     * // Get one TagFollow
     * const tagFollow = await prisma.tagFollow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFollowFindUniqueArgs>(
      args: SelectSubset<T, TagFollowFindUniqueArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<
        Prisma.$TagFollowPayload<ExtArgs>,
        T,
        'findUnique',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one TagFollow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFollowFindUniqueOrThrowArgs} args - Arguments to find a TagFollow
     * @example
     * // Get one TagFollow
     * const tagFollow = await prisma.tagFollow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFollowFindUniqueOrThrowArgs>(
      args: SelectSubset<T, TagFollowFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<
        Prisma.$TagFollowPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first TagFollow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowFindFirstArgs} args - Arguments to find a TagFollow
     * @example
     * // Get one TagFollow
     * const tagFollow = await prisma.tagFollow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFollowFindFirstArgs>(
      args?: SelectSubset<T, TagFollowFindFirstArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<
        Prisma.$TagFollowPayload<ExtArgs>,
        T,
        'findFirst',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first TagFollow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowFindFirstOrThrowArgs} args - Arguments to find a TagFollow
     * @example
     * // Get one TagFollow
     * const tagFollow = await prisma.tagFollow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFollowFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TagFollowFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<
        Prisma.$TagFollowPayload<ExtArgs>,
        T,
        'findFirstOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more TagFollows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagFollows
     * const tagFollows = await prisma.tagFollow.findMany()
     *
     * // Get first 10 TagFollows
     * const tagFollows = await prisma.tagFollow.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const tagFollowWithIdOnly = await prisma.tagFollow.findMany({ select: { id: true } })
     *
     */
    findMany<T extends TagFollowFindManyArgs>(
      args?: SelectSubset<T, TagFollowFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a TagFollow.
     * @param {TagFollowCreateArgs} args - Arguments to create a TagFollow.
     * @example
     * // Create one TagFollow
     * const TagFollow = await prisma.tagFollow.create({
     *   data: {
     *     // ... data to create a TagFollow
     *   }
     * })
     *
     */
    create<T extends TagFollowCreateArgs>(
      args: SelectSubset<T, TagFollowCreateArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many TagFollows.
     * @param {TagFollowCreateManyArgs} args - Arguments to create many TagFollows.
     * @example
     * // Create many TagFollows
     * const tagFollow = await prisma.tagFollow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends TagFollowCreateManyArgs>(
      args?: SelectSubset<T, TagFollowCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many TagFollows and returns the data saved in the database.
     * @param {TagFollowCreateManyAndReturnArgs} args - Arguments to create many TagFollows.
     * @example
     * // Create many TagFollows
     * const tagFollow = await prisma.tagFollow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many TagFollows and only return the `id`
     * const tagFollowWithIdOnly = await prisma.tagFollow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends TagFollowCreateManyAndReturnArgs>(
      args?: SelectSubset<T, TagFollowCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TagFollowPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a TagFollow.
     * @param {TagFollowDeleteArgs} args - Arguments to delete one TagFollow.
     * @example
     * // Delete one TagFollow
     * const TagFollow = await prisma.tagFollow.delete({
     *   where: {
     *     // ... filter to delete one TagFollow
     *   }
     * })
     *
     */
    delete<T extends TagFollowDeleteArgs>(
      args: SelectSubset<T, TagFollowDeleteArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one TagFollow.
     * @param {TagFollowUpdateArgs} args - Arguments to update one TagFollow.
     * @example
     * // Update one TagFollow
     * const tagFollow = await prisma.tagFollow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends TagFollowUpdateArgs>(
      args: SelectSubset<T, TagFollowUpdateArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more TagFollows.
     * @param {TagFollowDeleteManyArgs} args - Arguments to filter TagFollows to delete.
     * @example
     * // Delete a few TagFollows
     * const { count } = await prisma.tagFollow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends TagFollowDeleteManyArgs>(
      args?: SelectSubset<T, TagFollowDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more TagFollows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagFollows
     * const tagFollow = await prisma.tagFollow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends TagFollowUpdateManyArgs>(
      args: SelectSubset<T, TagFollowUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more TagFollows and returns the data updated in the database.
     * @param {TagFollowUpdateManyAndReturnArgs} args - Arguments to update many TagFollows.
     * @example
     * // Update many TagFollows
     * const tagFollow = await prisma.tagFollow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more TagFollows and only return the `id`
     * const tagFollowWithIdOnly = await prisma.tagFollow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends TagFollowUpdateManyAndReturnArgs>(
      args: SelectSubset<T, TagFollowUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$TagFollowPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one TagFollow.
     * @param {TagFollowUpsertArgs} args - Arguments to update or create a TagFollow.
     * @example
     * // Update or create a TagFollow
     * const tagFollow = await prisma.tagFollow.upsert({
     *   create: {
     *     // ... data to create a TagFollow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagFollow we want to update
     *   }
     * })
     */
    upsert<T extends TagFollowUpsertArgs>(
      args: SelectSubset<T, TagFollowUpsertArgs<ExtArgs>>
    ): Prisma__TagFollowClient<
      $Result.GetResult<Prisma.$TagFollowPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of TagFollows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowCountArgs} args - Arguments to filter TagFollows to count.
     * @example
     * // Count the number of TagFollows
     * const count = await prisma.tagFollow.count({
     *   where: {
     *     // ... the filter for the TagFollows we want to count
     *   }
     * })
     **/
    count<T extends TagFollowCountArgs>(
      args?: Subset<T, TagFollowCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagFollowCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a TagFollow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TagFollowAggregateArgs>(
      args: Subset<T, TagFollowAggregateArgs>
    ): Prisma.PrismaPromise<GetTagFollowAggregateType<T>>;

    /**
     * Group by TagFollow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TagFollowGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagFollowGroupByArgs['orderBy'] }
        : { orderBy?: TagFollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, TagFollowGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetTagFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the TagFollow model
     */
    readonly fields: TagFollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagFollow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagFollowClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, TagDefaultArgs<ExtArgs>>
    ): Prisma__TagClient<
      | $Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the TagFollow model
   */
  interface TagFollowFieldRefs {
    readonly id: FieldRef<'TagFollow', 'Int'>;
    readonly tagId: FieldRef<'TagFollow', 'Int'>;
    readonly userId: FieldRef<'TagFollow', 'Int'>;
    readonly createdAt: FieldRef<'TagFollow', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * TagFollow findUnique
   */
  export type TagFollowFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * Filter, which TagFollow to fetch.
     */
    where: TagFollowWhereUniqueInput;
  };

  /**
   * TagFollow findUniqueOrThrow
   */
  export type TagFollowFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * Filter, which TagFollow to fetch.
     */
    where: TagFollowWhereUniqueInput;
  };

  /**
   * TagFollow findFirst
   */
  export type TagFollowFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * Filter, which TagFollow to fetch.
     */
    where?: TagFollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TagFollows to fetch.
     */
    orderBy?: TagFollowOrderByWithRelationInput | TagFollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TagFollows.
     */
    cursor?: TagFollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TagFollows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TagFollows.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TagFollows.
     */
    distinct?: TagFollowScalarFieldEnum | TagFollowScalarFieldEnum[];
  };

  /**
   * TagFollow findFirstOrThrow
   */
  export type TagFollowFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * Filter, which TagFollow to fetch.
     */
    where?: TagFollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TagFollows to fetch.
     */
    orderBy?: TagFollowOrderByWithRelationInput | TagFollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TagFollows.
     */
    cursor?: TagFollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TagFollows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TagFollows.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TagFollows.
     */
    distinct?: TagFollowScalarFieldEnum | TagFollowScalarFieldEnum[];
  };

  /**
   * TagFollow findMany
   */
  export type TagFollowFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * Filter, which TagFollows to fetch.
     */
    where?: TagFollowWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TagFollows to fetch.
     */
    orderBy?: TagFollowOrderByWithRelationInput | TagFollowOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing TagFollows.
     */
    cursor?: TagFollowWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TagFollows from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TagFollows.
     */
    skip?: number;
    distinct?: TagFollowScalarFieldEnum | TagFollowScalarFieldEnum[];
  };

  /**
   * TagFollow create
   */
  export type TagFollowCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * The data needed to create a TagFollow.
     */
    data: XOR<TagFollowCreateInput, TagFollowUncheckedCreateInput>;
  };

  /**
   * TagFollow createMany
   */
  export type TagFollowCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many TagFollows.
     */
    data: TagFollowCreateManyInput | TagFollowCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * TagFollow createManyAndReturn
   */
  export type TagFollowCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * The data used to create many TagFollows.
     */
    data: TagFollowCreateManyInput | TagFollowCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * TagFollow update
   */
  export type TagFollowUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * The data needed to update a TagFollow.
     */
    data: XOR<TagFollowUpdateInput, TagFollowUncheckedUpdateInput>;
    /**
     * Choose, which TagFollow to update.
     */
    where: TagFollowWhereUniqueInput;
  };

  /**
   * TagFollow updateMany
   */
  export type TagFollowUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update TagFollows.
     */
    data: XOR<TagFollowUpdateManyMutationInput, TagFollowUncheckedUpdateManyInput>;
    /**
     * Filter which TagFollows to update
     */
    where?: TagFollowWhereInput;
    /**
     * Limit how many TagFollows to update.
     */
    limit?: number;
  };

  /**
   * TagFollow updateManyAndReturn
   */
  export type TagFollowUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * The data used to update TagFollows.
     */
    data: XOR<TagFollowUpdateManyMutationInput, TagFollowUncheckedUpdateManyInput>;
    /**
     * Filter which TagFollows to update
     */
    where?: TagFollowWhereInput;
    /**
     * Limit how many TagFollows to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * TagFollow upsert
   */
  export type TagFollowUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * The filter to search for the TagFollow to update in case it exists.
     */
    where: TagFollowWhereUniqueInput;
    /**
     * In case the TagFollow found by the `where` argument doesn't exist, create a new TagFollow with this data.
     */
    create: XOR<TagFollowCreateInput, TagFollowUncheckedCreateInput>;
    /**
     * In case the TagFollow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagFollowUpdateInput, TagFollowUncheckedUpdateInput>;
  };

  /**
   * TagFollow delete
   */
  export type TagFollowDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
    /**
     * Filter which TagFollow to delete.
     */
    where: TagFollowWhereUniqueInput;
  };

  /**
   * TagFollow deleteMany
   */
  export type TagFollowDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which TagFollows to delete
     */
    where?: TagFollowWhereInput;
    /**
     * Limit how many TagFollows to delete.
     */
    limit?: number;
  };

  /**
   * TagFollow without action
   */
  export type TagFollowDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the TagFollow
     */
    select?: TagFollowSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the TagFollow
     */
    omit?: TagFollowOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagFollowInclude<ExtArgs> | null;
  };

  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null;
    _avg: CommentAvgAggregateOutputType | null;
    _sum: CommentSumAggregateOutputType | null;
    _min: CommentMinAggregateOutputType | null;
    _max: CommentMaxAggregateOutputType | null;
  };

  export type CommentAvgAggregateOutputType = {
    id: number | null;
    postId: number | null;
    authorId: number | null;
  };

  export type CommentSumAggregateOutputType = {
    id: number | null;
    postId: number | null;
    authorId: number | null;
  };

  export type CommentMinAggregateOutputType = {
    id: number | null;
    content: string | null;
    createdAt: Date | null;
    postId: number | null;
    authorId: number | null;
  };

  export type CommentMaxAggregateOutputType = {
    id: number | null;
    content: string | null;
    createdAt: Date | null;
    postId: number | null;
    authorId: number | null;
  };

  export type CommentCountAggregateOutputType = {
    id: number;
    content: number;
    createdAt: number;
    postId: number;
    authorId: number;
    _all: number;
  };

  export type CommentAvgAggregateInputType = {
    id?: true;
    postId?: true;
    authorId?: true;
  };

  export type CommentSumAggregateInputType = {
    id?: true;
    postId?: true;
    authorId?: true;
  };

  export type CommentMinAggregateInputType = {
    id?: true;
    content?: true;
    createdAt?: true;
    postId?: true;
    authorId?: true;
  };

  export type CommentMaxAggregateInputType = {
    id?: true;
    content?: true;
    createdAt?: true;
    postId?: true;
    authorId?: true;
  };

  export type CommentCountAggregateInputType = {
    id?: true;
    content?: true;
    createdAt?: true;
    postId?: true;
    authorId?: true;
    _all?: true;
  };

  export type CommentAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Comments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Comments
     **/
    _count?: true | CommentCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: CommentAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: CommentSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: CommentMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: CommentMaxAggregateInputType;
  };

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
    [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>;
  };

  export type CommentGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[];
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum;
    having?: CommentScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: CommentCountAggregateInputType | true;
    _avg?: CommentAvgAggregateInputType;
    _sum?: CommentSumAggregateInputType;
    _min?: CommentMinAggregateInputType;
    _max?: CommentMaxAggregateInputType;
  };

  export type CommentGroupByOutputType = {
    id: number;
    content: string;
    createdAt: Date;
    postId: number;
    authorId: number;
    _count: CommentCountAggregateOutputType | null;
    _avg: CommentAvgAggregateOutputType | null;
    _sum: CommentSumAggregateOutputType | null;
    _min: CommentMinAggregateOutputType | null;
    _max: CommentMaxAggregateOutputType | null;
  };

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> & {
        [P in keyof T & keyof CommentGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
          : GetScalarType<T[P], CommentGroupByOutputType[P]>;
      }
    >
  >;

  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        content?: boolean;
        createdAt?: boolean;
        postId?: boolean;
        authorId?: boolean;
        post?: boolean | PostDefaultArgs<ExtArgs>;
        author?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['comment']
    >;

  export type CommentSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      content?: boolean;
      createdAt?: boolean;
      postId?: boolean;
      authorId?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      author?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['comment']
  >;

  export type CommentSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      content?: boolean;
      createdAt?: boolean;
      postId?: boolean;
      authorId?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      author?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['comment']
  >;

  export type CommentSelectScalar = {
    id?: boolean;
    content?: boolean;
    createdAt?: boolean;
    postId?: boolean;
    authorId?: boolean;
  };

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<
      'id' | 'content' | 'createdAt' | 'postId' | 'authorId',
      ExtArgs['result']['comment']
    >;
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    author?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type CommentIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    author?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type CommentIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    author?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      name: 'Comment';
      objects: {
        post: Prisma.$PostPayload<ExtArgs>;
        author: Prisma.$UserPayload<ExtArgs>;
      };
      scalars: $Extensions.GetPayloadResult<
        {
          id: number;
          content: string;
          createdAt: Date;
          postId: number;
          authorId: number;
        },
        ExtArgs['result']['comment']
      >;
      composites: {};
    };

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> =
    $Result.GetResult<Prisma.$CommentPayload, S>;

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    CommentFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: CommentCountAggregateInputType | true;
  };

  export interface CommentDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment']; meta: { name: 'Comment' } };
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     *
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     *
     */
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     *
     */
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(
      args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$CommentPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     *
     */
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(
      args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$CommentPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<
      $Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
     **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends CommentAggregateArgs>(
      args: Subset<T, CommentAggregateArgs>
    ): Prisma.PrismaPromise<GetCommentAggregateType<T>>;

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Comment model
     */
    readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    post<T extends PostDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, PostDefaultArgs<ExtArgs>>
    ): Prisma__PostClient<
      | $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    author<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<'Comment', 'Int'>;
    readonly content: FieldRef<'Comment', 'String'>;
    readonly createdAt: FieldRef<'Comment', 'DateTime'>;
    readonly postId: FieldRef<'Comment', 'Int'>;
    readonly authorId: FieldRef<'Comment', 'Int'>;
  }

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput;
  };

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput;
  };

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Comments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[];
  };

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Comments.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[];
  };

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Comments.
     */
    skip?: number;
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[];
  };

  /**
   * Comment create
   */
  export type CommentCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>;
  };

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Comment update
   */
  export type CommentUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>;
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput;
  };

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>;
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput;
    /**
     * Limit how many Comments to update.
     */
    limit?: number;
  };

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>;
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput;
    /**
     * Limit how many Comments to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput;
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>;
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>;
  };

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput;
  };

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput;
    /**
     * Limit how many Comments to delete.
     */
    limit?: number;
  };

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null;
  };

  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null;
    _avg: LikeAvgAggregateOutputType | null;
    _sum: LikeSumAggregateOutputType | null;
    _min: LikeMinAggregateOutputType | null;
    _max: LikeMaxAggregateOutputType | null;
  };

  export type LikeAvgAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
  };

  export type LikeSumAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
  };

  export type LikeMinAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type LikeMaxAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type LikeCountAggregateOutputType = {
    id: number;
    postId: number;
    userId: number;
    createdAt: number;
    _all: number;
  };

  export type LikeAvgAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
  };

  export type LikeSumAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
  };

  export type LikeMinAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type LikeMaxAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type LikeCountAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type LikeAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Likes.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Likes
     **/
    _count?: true | LikeCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: LikeAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: LikeSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: LikeMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: LikeMaxAggregateInputType;
  };

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
    [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>;
  };

  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[];
      by: LikeScalarFieldEnum[] | LikeScalarFieldEnum;
      having?: LikeScalarWhereWithAggregatesInput;
      take?: number;
      skip?: number;
      _count?: LikeCountAggregateInputType | true;
      _avg?: LikeAvgAggregateInputType;
      _sum?: LikeSumAggregateInputType;
      _min?: LikeMinAggregateInputType;
      _max?: LikeMaxAggregateInputType;
    };

  export type LikeGroupByOutputType = {
    id: number;
    postId: number;
    userId: number;
    createdAt: Date;
    _count: LikeCountAggregateOutputType | null;
    _avg: LikeAvgAggregateOutputType | null;
    _sum: LikeSumAggregateOutputType | null;
    _min: LikeMinAggregateOutputType | null;
    _max: LikeMaxAggregateOutputType | null;
  };

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> & {
        [P in keyof T & keyof LikeGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
          : GetScalarType<T[P], LikeGroupByOutputType[P]>;
      }
    >
  >;

  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        postId?: boolean;
        userId?: boolean;
        createdAt?: boolean;
        post?: boolean | PostDefaultArgs<ExtArgs>;
        user?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['like']
    >;

  export type LikeSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['like']
  >;

  export type LikeSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['like']
  >;

  export type LikeSelectScalar = {
    id?: boolean;
    postId?: boolean;
    userId?: boolean;
    createdAt?: boolean;
  };

  export type LikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'postId' | 'userId' | 'createdAt', ExtArgs['result']['like']>;
  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type LikeIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type LikeIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'Like';
    objects: {
      post: Prisma.$PostPayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        postId: number;
        userId: number;
        createdAt: Date;
      },
      ExtArgs['result']['like']
    >;
    composites: {};
  };

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<
    Prisma.$LikePayload,
    S
  >;

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    LikeFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: LikeCountAggregateInputType | true;
  };

  export interface LikeDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like']; meta: { name: 'Like' } };
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikeFindUniqueArgs>(
      args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(
      args: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikeFindFirstArgs>(
      args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     *
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     *
     */
    findMany<T extends LikeFindManyArgs>(
      args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     *
     */
    create<T extends LikeCreateArgs>(
      args: SelectSubset<T, LikeCreateArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends LikeCreateManyArgs>(
      args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikeCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends LikeCreateManyAndReturnArgs>(
      args?: SelectSubset<T, LikeCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     *
     */
    delete<T extends LikeDeleteArgs>(
      args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends LikeUpdateArgs>(
      args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends LikeDeleteManyArgs>(
      args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends LikeUpdateManyArgs>(
      args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Likes and returns the data updated in the database.
     * @param {LikeUpdateManyAndReturnArgs} args - Arguments to update many Likes.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends LikeUpdateManyAndReturnArgs>(
      args: SelectSubset<T, LikeUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
     */
    upsert<T extends LikeUpsertArgs>(
      args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>
    ): Prisma__LikeClient<
      $Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
     **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends LikeAggregateArgs>(
      args: Subset<T, LikeAggregateArgs>
    ): Prisma.PrismaPromise<GetLikeAggregateType<T>>;

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Like model
     */
    readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    post<T extends PostDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, PostDefaultArgs<ExtArgs>>
    ): Prisma__PostClient<
      | $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Like model
   */
  interface LikeFieldRefs {
    readonly id: FieldRef<'Like', 'Int'>;
    readonly postId: FieldRef<'Like', 'Int'>;
    readonly userId: FieldRef<'Like', 'Int'>;
    readonly createdAt: FieldRef<'Like', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput;
  };

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput;
  };

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Likes.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[];
  };

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Likes.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[];
  };

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Like
       */
      select?: LikeSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Like
       */
      omit?: LikeOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: LikeInclude<ExtArgs> | null;
      /**
       * Filter, which Likes to fetch.
       */
      where?: LikeWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Likes to fetch.
       */
      orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the position for listing Likes.
       */
      cursor?: LikeWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Likes from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Likes.
       */
      skip?: number;
      distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[];
    };

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>;
  };

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Like createManyAndReturn
   */
  export type LikeCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>;
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput;
  };

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>;
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput;
    /**
     * Limit how many Likes to update.
     */
    limit?: number;
  };

  /**
   * Like updateManyAndReturn
   */
  export type LikeUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>;
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput;
    /**
     * Limit how many Likes to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput;
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>;
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>;
  };

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Like
     */
    omit?: LikeOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null;
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput;
  };

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput;
    /**
     * Limit how many Likes to delete.
     */
    limit?: number;
  };

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Like
       */
      select?: LikeSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Like
       */
      omit?: LikeOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: LikeInclude<ExtArgs> | null;
    };

  /**
   * Model Share
   */

  export type AggregateShare = {
    _count: ShareCountAggregateOutputType | null;
    _avg: ShareAvgAggregateOutputType | null;
    _sum: ShareSumAggregateOutputType | null;
    _min: ShareMinAggregateOutputType | null;
    _max: ShareMaxAggregateOutputType | null;
  };

  export type ShareAvgAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
  };

  export type ShareSumAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
  };

  export type ShareMinAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type ShareMaxAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type ShareCountAggregateOutputType = {
    id: number;
    postId: number;
    userId: number;
    createdAt: number;
    _all: number;
  };

  export type ShareAvgAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
  };

  export type ShareSumAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
  };

  export type ShareMinAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type ShareMaxAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type ShareCountAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type ShareAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Share to aggregate.
     */
    where?: ShareWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: ShareWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Shares.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Shares
     **/
    _count?: true | ShareCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ShareAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ShareSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ShareMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ShareMaxAggregateInputType;
  };

  export type GetShareAggregateType<T extends ShareAggregateArgs> = {
    [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShare[P]>
      : GetScalarType<T[P], AggregateShare[P]>;
  };

  export type ShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      where?: ShareWhereInput;
      orderBy?: ShareOrderByWithAggregationInput | ShareOrderByWithAggregationInput[];
      by: ShareScalarFieldEnum[] | ShareScalarFieldEnum;
      having?: ShareScalarWhereWithAggregatesInput;
      take?: number;
      skip?: number;
      _count?: ShareCountAggregateInputType | true;
      _avg?: ShareAvgAggregateInputType;
      _sum?: ShareSumAggregateInputType;
      _min?: ShareMinAggregateInputType;
      _max?: ShareMaxAggregateInputType;
    };

  export type ShareGroupByOutputType = {
    id: number;
    postId: number;
    userId: number;
    createdAt: Date;
    _count: ShareCountAggregateOutputType | null;
    _avg: ShareAvgAggregateOutputType | null;
    _sum: ShareSumAggregateOutputType | null;
    _min: ShareMinAggregateOutputType | null;
    _max: ShareMaxAggregateOutputType | null;
  };

  type GetShareGroupByPayload<T extends ShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareGroupByOutputType, T['by']> & {
        [P in keyof T & keyof ShareGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], ShareGroupByOutputType[P]>
          : GetScalarType<T[P], ShareGroupByOutputType[P]>;
      }
    >
  >;

  export type ShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        postId?: boolean;
        userId?: boolean;
        createdAt?: boolean;
        post?: boolean | PostDefaultArgs<ExtArgs>;
        user?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['share']
    >;

  export type ShareSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['share']
  >;

  export type ShareSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['share']
  >;

  export type ShareSelectScalar = {
    id?: boolean;
    postId?: boolean;
    userId?: boolean;
    createdAt?: boolean;
  };

  export type ShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'postId' | 'userId' | 'createdAt', ExtArgs['result']['share']>;
  export type ShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type ShareIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type ShareIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $SharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'Share';
    objects: {
      post: Prisma.$PostPayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        postId: number;
        userId: number;
        createdAt: Date;
      },
      ExtArgs['result']['share']
    >;
    composites: {};
  };

  type ShareGetPayload<S extends boolean | null | undefined | ShareDefaultArgs> = $Result.GetResult<
    Prisma.$SharePayload,
    S
  >;

  type ShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    ShareFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: ShareCountAggregateInputType | true;
  };

  export interface ShareDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Share']; meta: { name: 'Share' } };
    /**
     * Find zero or one Share that matches the filter.
     * @param {ShareFindUniqueArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareFindUniqueArgs>(
      args: SelectSubset<T, ShareFindUniqueArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Share that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(
      args: SelectSubset<T, ShareFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Share that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareFindFirstArgs>(
      args?: SelectSubset<T, ShareFindFirstArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Share that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShareFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.share.findMany()
     *
     * // Get first 10 Shares
     * const shares = await prisma.share.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const shareWithIdOnly = await prisma.share.findMany({ select: { id: true } })
     *
     */
    findMany<T extends ShareFindManyArgs>(
      args?: SelectSubset<T, ShareFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Share.
     * @param {ShareCreateArgs} args - Arguments to create a Share.
     * @example
     * // Create one Share
     * const Share = await prisma.share.create({
     *   data: {
     *     // ... data to create a Share
     *   }
     * })
     *
     */
    create<T extends ShareCreateArgs>(
      args: SelectSubset<T, ShareCreateArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Shares.
     * @param {ShareCreateManyArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const share = await prisma.share.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends ShareCreateManyArgs>(
      args?: SelectSubset<T, ShareCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Shares and returns the data saved in the database.
     * @param {ShareCreateManyAndReturnArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const share = await prisma.share.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Shares and only return the `id`
     * const shareWithIdOnly = await prisma.share.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends ShareCreateManyAndReturnArgs>(
      args?: SelectSubset<T, ShareCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Share.
     * @param {ShareDeleteArgs} args - Arguments to delete one Share.
     * @example
     * // Delete one Share
     * const Share = await prisma.share.delete({
     *   where: {
     *     // ... filter to delete one Share
     *   }
     * })
     *
     */
    delete<T extends ShareDeleteArgs>(
      args: SelectSubset<T, ShareDeleteArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Share.
     * @param {ShareUpdateArgs} args - Arguments to update one Share.
     * @example
     * // Update one Share
     * const share = await prisma.share.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends ShareUpdateArgs>(
      args: SelectSubset<T, ShareUpdateArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Shares.
     * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.share.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends ShareDeleteManyArgs>(
      args?: SelectSubset<T, ShareDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends ShareUpdateManyArgs>(
      args: SelectSubset<T, ShareUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Shares and returns the data updated in the database.
     * @param {ShareUpdateManyAndReturnArgs} args - Arguments to update many Shares.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Shares and only return the `id`
     * const shareWithIdOnly = await prisma.share.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends ShareUpdateManyAndReturnArgs>(
      args: SelectSubset<T, ShareUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Share.
     * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
     * @example
     * // Update or create a Share
     * const share = await prisma.share.upsert({
     *   create: {
     *     // ... data to create a Share
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Share we want to update
     *   }
     * })
     */
    upsert<T extends ShareUpsertArgs>(
      args: SelectSubset<T, ShareUpsertArgs<ExtArgs>>
    ): Prisma__ShareClient<
      $Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.share.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
     **/
    count<T extends ShareCountArgs>(
      args?: Subset<T, ShareCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ShareAggregateArgs>(
      args: Subset<T, ShareAggregateArgs>
    ): Prisma.PrismaPromise<GetShareAggregateType<T>>;

    /**
     * Group by Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ShareGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareGroupByArgs['orderBy'] }
        : { orderBy?: ShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Share model
     */
    readonly fields: ShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Share.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    post<T extends PostDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, PostDefaultArgs<ExtArgs>>
    ): Prisma__PostClient<
      | $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Share model
   */
  interface ShareFieldRefs {
    readonly id: FieldRef<'Share', 'Int'>;
    readonly postId: FieldRef<'Share', 'Int'>;
    readonly userId: FieldRef<'Share', 'Int'>;
    readonly createdAt: FieldRef<'Share', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * Share findUnique
   */
  export type ShareFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null;
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput;
  };

  /**
   * Share findUniqueOrThrow
   */
  export type ShareFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null;
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput;
  };

  /**
   * Share findFirst
   */
  export type ShareFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null;
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Shares.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Shares.
     */
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[];
  };

  /**
   * Share findFirstOrThrow
   */
  export type ShareFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null;
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Shares.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Shares.
     */
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[];
  };

  /**
   * Share findMany
   */
  export type ShareFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null;
    /**
     * Filter, which Shares to fetch.
     */
    where?: ShareWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Shares.
     */
    cursor?: ShareWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Shares.
     */
    skip?: number;
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[];
  };

  /**
   * Share create
   */
  export type ShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
      /**
       * The data needed to create a Share.
       */
      data: XOR<ShareCreateInput, ShareUncheckedCreateInput>;
    };

  /**
   * Share createMany
   */
  export type ShareCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Shares.
     */
    data: ShareCreateManyInput | ShareCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Share createManyAndReturn
   */
  export type ShareCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * The data used to create many Shares.
     */
    data: ShareCreateManyInput | ShareCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Share update
   */
  export type ShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
      /**
       * The data needed to update a Share.
       */
      data: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>;
      /**
       * Choose, which Share to update.
       */
      where: ShareWhereUniqueInput;
    };

  /**
   * Share updateMany
   */
  export type ShareUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>;
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput;
    /**
     * Limit how many Shares to update.
     */
    limit?: number;
  };

  /**
   * Share updateManyAndReturn
   */
  export type ShareUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null;
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>;
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput;
    /**
     * Limit how many Shares to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Share upsert
   */
  export type ShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
      /**
       * The filter to search for the Share to update in case it exists.
       */
      where: ShareWhereUniqueInput;
      /**
       * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
       */
      create: XOR<ShareCreateInput, ShareUncheckedCreateInput>;
      /**
       * In case the Share was found with the provided `where` argument, update it with this data.
       */
      update: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>;
    };

  /**
   * Share delete
   */
  export type ShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
      /**
       * Filter which Share to delete.
       */
      where: ShareWhereUniqueInput;
    };

  /**
   * Share deleteMany
   */
  export type ShareDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Shares to delete
     */
    where?: ShareWhereInput;
    /**
     * Limit how many Shares to delete.
     */
    limit?: number;
  };

  /**
   * Share without action
   */
  export type ShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Share
       */
      select?: ShareSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Share
       */
      omit?: ShareOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: ShareInclude<ExtArgs> | null;
    };

  /**
   * Model Feed
   */

  export type AggregateFeed = {
    _count: FeedCountAggregateOutputType | null;
    _avg: FeedAvgAggregateOutputType | null;
    _sum: FeedSumAggregateOutputType | null;
    _min: FeedMinAggregateOutputType | null;
    _max: FeedMaxAggregateOutputType | null;
  };

  export type FeedAvgAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
  };

  export type FeedSumAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
  };

  export type FeedMinAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type FeedMaxAggregateOutputType = {
    id: number | null;
    postId: number | null;
    userId: number | null;
    createdAt: Date | null;
  };

  export type FeedCountAggregateOutputType = {
    id: number;
    postId: number;
    userId: number;
    createdAt: number;
    _all: number;
  };

  export type FeedAvgAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
  };

  export type FeedSumAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
  };

  export type FeedMinAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type FeedMaxAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
  };

  export type FeedCountAggregateInputType = {
    id?: true;
    postId?: true;
    userId?: true;
    createdAt?: true;
    _all?: true;
  };

  export type FeedAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Feed to aggregate.
     */
    where?: FeedWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: FeedWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Feeds.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Feeds
     **/
    _count?: true | FeedCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: FeedAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: FeedSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: FeedMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: FeedMaxAggregateInputType;
  };

  export type GetFeedAggregateType<T extends FeedAggregateArgs> = {
    [P in keyof T & keyof AggregateFeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeed[P]>
      : GetScalarType<T[P], AggregateFeed[P]>;
  };

  export type FeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      where?: FeedWhereInput;
      orderBy?: FeedOrderByWithAggregationInput | FeedOrderByWithAggregationInput[];
      by: FeedScalarFieldEnum[] | FeedScalarFieldEnum;
      having?: FeedScalarWhereWithAggregatesInput;
      take?: number;
      skip?: number;
      _count?: FeedCountAggregateInputType | true;
      _avg?: FeedAvgAggregateInputType;
      _sum?: FeedSumAggregateInputType;
      _min?: FeedMinAggregateInputType;
      _max?: FeedMaxAggregateInputType;
    };

  export type FeedGroupByOutputType = {
    id: number;
    postId: number;
    userId: number;
    createdAt: Date;
    _count: FeedCountAggregateOutputType | null;
    _avg: FeedAvgAggregateOutputType | null;
    _sum: FeedSumAggregateOutputType | null;
    _min: FeedMinAggregateOutputType | null;
    _max: FeedMaxAggregateOutputType | null;
  };

  type GetFeedGroupByPayload<T extends FeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedGroupByOutputType, T['by']> & {
        [P in keyof T & keyof FeedGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], FeedGroupByOutputType[P]>
          : GetScalarType<T[P], FeedGroupByOutputType[P]>;
      }
    >
  >;

  export type FeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        postId?: boolean;
        userId?: boolean;
        createdAt?: boolean;
        post?: boolean | PostDefaultArgs<ExtArgs>;
        user?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['feed']
    >;

  export type FeedSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['feed']
  >;

  export type FeedSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      postId?: boolean;
      userId?: boolean;
      createdAt?: boolean;
      post?: boolean | PostDefaultArgs<ExtArgs>;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['feed']
  >;

  export type FeedSelectScalar = {
    id?: boolean;
    postId?: boolean;
    userId?: boolean;
    createdAt?: boolean;
  };

  export type FeedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'postId' | 'userId' | 'createdAt', ExtArgs['result']['feed']>;
  export type FeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type FeedIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type FeedIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    post?: boolean | PostDefaultArgs<ExtArgs>;
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $FeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: 'Feed';
    objects: {
      post: Prisma.$PostPayload<ExtArgs>;
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        postId: number;
        userId: number;
        createdAt: Date;
      },
      ExtArgs['result']['feed']
    >;
    composites: {};
  };

  type FeedGetPayload<S extends boolean | null | undefined | FeedDefaultArgs> = $Result.GetResult<
    Prisma.$FeedPayload,
    S
  >;

  type FeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Omit<
    FeedFindManyArgs,
    'select' | 'include' | 'distinct' | 'omit'
  > & {
    select?: FeedCountAggregateInputType | true;
  };

  export interface FeedDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feed']; meta: { name: 'Feed' } };
    /**
     * Find zero or one Feed that matches the filter.
     * @param {FeedFindUniqueArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedFindUniqueArgs>(
      args: SelectSubset<T, FeedFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Feed that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedFindUniqueOrThrowArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedFindUniqueOrThrowArgs>(
      args: SelectSubset<T, FeedFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Feed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedFindFirstArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedFindFirstArgs>(
      args?: SelectSubset<T, FeedFindFirstArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Feed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedFindFirstOrThrowArgs} args - Arguments to find a Feed
     * @example
     * // Get one Feed
     * const feed = await prisma.feed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FeedFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Feeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feeds
     * const feeds = await prisma.feed.findMany()
     *
     * // Get first 10 Feeds
     * const feeds = await prisma.feed.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const feedWithIdOnly = await prisma.feed.findMany({ select: { id: true } })
     *
     */
    findMany<T extends FeedFindManyArgs>(
      args?: SelectSubset<T, FeedFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Feed.
     * @param {FeedCreateArgs} args - Arguments to create a Feed.
     * @example
     * // Create one Feed
     * const Feed = await prisma.feed.create({
     *   data: {
     *     // ... data to create a Feed
     *   }
     * })
     *
     */
    create<T extends FeedCreateArgs>(
      args: SelectSubset<T, FeedCreateArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Feeds.
     * @param {FeedCreateManyArgs} args - Arguments to create many Feeds.
     * @example
     * // Create many Feeds
     * const feed = await prisma.feed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends FeedCreateManyArgs>(
      args?: SelectSubset<T, FeedCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Feeds and returns the data saved in the database.
     * @param {FeedCreateManyAndReturnArgs} args - Arguments to create many Feeds.
     * @example
     * // Create many Feeds
     * const feed = await prisma.feed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Feeds and only return the `id`
     * const feedWithIdOnly = await prisma.feed.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends FeedCreateManyAndReturnArgs>(
      args?: SelectSubset<T, FeedCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Delete a Feed.
     * @param {FeedDeleteArgs} args - Arguments to delete one Feed.
     * @example
     * // Delete one Feed
     * const Feed = await prisma.feed.delete({
     *   where: {
     *     // ... filter to delete one Feed
     *   }
     * })
     *
     */
    delete<T extends FeedDeleteArgs>(
      args: SelectSubset<T, FeedDeleteArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Feed.
     * @param {FeedUpdateArgs} args - Arguments to update one Feed.
     * @example
     * // Update one Feed
     * const feed = await prisma.feed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends FeedUpdateArgs>(
      args: SelectSubset<T, FeedUpdateArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Feeds.
     * @param {FeedDeleteManyArgs} args - Arguments to filter Feeds to delete.
     * @example
     * // Delete a few Feeds
     * const { count } = await prisma.feed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends FeedDeleteManyArgs>(
      args?: SelectSubset<T, FeedDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Feeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feeds
     * const feed = await prisma.feed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends FeedUpdateManyArgs>(
      args: SelectSubset<T, FeedUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Feeds and returns the data updated in the database.
     * @param {FeedUpdateManyAndReturnArgs} args - Arguments to update many Feeds.
     * @example
     * // Update many Feeds
     * const feed = await prisma.feed.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Feeds and only return the `id`
     * const feedWithIdOnly = await prisma.feed.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends FeedUpdateManyAndReturnArgs>(
      args: SelectSubset<T, FeedUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
    >;

    /**
     * Create or update one Feed.
     * @param {FeedUpsertArgs} args - Arguments to update or create a Feed.
     * @example
     * // Update or create a Feed
     * const feed = await prisma.feed.upsert({
     *   create: {
     *     // ... data to create a Feed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feed we want to update
     *   }
     * })
     */
    upsert<T extends FeedUpsertArgs>(
      args: SelectSubset<T, FeedUpsertArgs<ExtArgs>>
    ): Prisma__FeedClient<
      $Result.GetResult<Prisma.$FeedPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Feeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCountArgs} args - Arguments to filter Feeds to count.
     * @example
     * // Count the number of Feeds
     * const count = await prisma.feed.count({
     *   where: {
     *     // ... the filter for the Feeds we want to count
     *   }
     * })
     **/
    count<T extends FeedCountArgs>(
      args?: Subset<T, FeedCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Feed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends FeedAggregateArgs>(
      args: Subset<T, FeedAggregateArgs>
    ): Prisma.PrismaPromise<GetFeedAggregateType<T>>;

    /**
     * Group by Feed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends FeedGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedGroupByArgs['orderBy'] }
        : { orderBy?: FeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, FeedGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetFeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Feed model
     */
    readonly fields: FeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    post<T extends PostDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, PostDefaultArgs<ExtArgs>>
    ): Prisma__PostClient<
      | $Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Feed model
   */
  interface FeedFieldRefs {
    readonly id: FieldRef<'Feed', 'Int'>;
    readonly postId: FieldRef<'Feed', 'Int'>;
    readonly userId: FieldRef<'Feed', 'Int'>;
    readonly createdAt: FieldRef<'Feed', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * Feed findUnique
   */
  export type FeedFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * Filter, which Feed to fetch.
     */
    where: FeedWhereUniqueInput;
  };

  /**
   * Feed findUniqueOrThrow
   */
  export type FeedFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * Filter, which Feed to fetch.
     */
    where: FeedWhereUniqueInput;
  };

  /**
   * Feed findFirst
   */
  export type FeedFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * Filter, which Feed to fetch.
     */
    where?: FeedWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Feeds.
     */
    cursor?: FeedWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Feeds.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Feeds.
     */
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[];
  };

  /**
   * Feed findFirstOrThrow
   */
  export type FeedFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * Filter, which Feed to fetch.
     */
    where?: FeedWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Feeds to fetch.
     */
    orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Feeds.
     */
    cursor?: FeedWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Feeds from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Feeds.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Feeds.
     */
    distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[];
  };

  /**
   * Feed findMany
   */
  export type FeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Feed
       */
      select?: FeedSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Feed
       */
      omit?: FeedOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: FeedInclude<ExtArgs> | null;
      /**
       * Filter, which Feeds to fetch.
       */
      where?: FeedWhereInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
       *
       * Determine the order of Feeds to fetch.
       */
      orderBy?: FeedOrderByWithRelationInput | FeedOrderByWithRelationInput[];
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
       *
       * Sets the position for listing Feeds.
       */
      cursor?: FeedWhereUniqueInput;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Take `±n` Feeds from the position of the cursor.
       */
      take?: number;
      /**
       * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
       *
       * Skip the first `n` Feeds.
       */
      skip?: number;
      distinct?: FeedScalarFieldEnum | FeedScalarFieldEnum[];
    };

  /**
   * Feed create
   */
  export type FeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * The data needed to create a Feed.
     */
    data: XOR<FeedCreateInput, FeedUncheckedCreateInput>;
  };

  /**
   * Feed createMany
   */
  export type FeedCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Feeds.
     */
    data: FeedCreateManyInput | FeedCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Feed createManyAndReturn
   */
  export type FeedCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * The data used to create many Feeds.
     */
    data: FeedCreateManyInput | FeedCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Feed update
   */
  export type FeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * The data needed to update a Feed.
     */
    data: XOR<FeedUpdateInput, FeedUncheckedUpdateInput>;
    /**
     * Choose, which Feed to update.
     */
    where: FeedWhereUniqueInput;
  };

  /**
   * Feed updateMany
   */
  export type FeedUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Feeds.
     */
    data: XOR<FeedUpdateManyMutationInput, FeedUncheckedUpdateManyInput>;
    /**
     * Filter which Feeds to update
     */
    where?: FeedWhereInput;
    /**
     * Limit how many Feeds to update.
     */
    limit?: number;
  };

  /**
   * Feed updateManyAndReturn
   */
  export type FeedUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * The data used to update Feeds.
     */
    data: XOR<FeedUpdateManyMutationInput, FeedUncheckedUpdateManyInput>;
    /**
     * Filter which Feeds to update
     */
    where?: FeedWhereInput;
    /**
     * Limit how many Feeds to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Feed upsert
   */
  export type FeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * The filter to search for the Feed to update in case it exists.
     */
    where: FeedWhereUniqueInput;
    /**
     * In case the Feed found by the `where` argument doesn't exist, create a new Feed with this data.
     */
    create: XOR<FeedCreateInput, FeedUncheckedCreateInput>;
    /**
     * In case the Feed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedUpdateInput, FeedUncheckedUpdateInput>;
  };

  /**
   * Feed delete
   */
  export type FeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feed
     */
    select?: FeedSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Feed
     */
    omit?: FeedOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedInclude<ExtArgs> | null;
    /**
     * Filter which Feed to delete.
     */
    where: FeedWhereUniqueInput;
  };

  /**
   * Feed deleteMany
   */
  export type FeedDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Feeds to delete
     */
    where?: FeedWhereInput;
    /**
     * Limit how many Feeds to delete.
     */
    limit?: number;
  };

  /**
   * Feed without action
   */
  export type FeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      /**
       * Select specific fields to fetch from the Feed
       */
      select?: FeedSelect<ExtArgs> | null;
      /**
       * Omit specific fields from the Feed
       */
      omit?: FeedOmit<ExtArgs> | null;
      /**
       * Choose, which related nodes to fetch as well
       */
      include?: FeedInclude<ExtArgs> | null;
    };

  /**
   * Model FeedTrack
   */

  export type AggregateFeedTrack = {
    _count: FeedTrackCountAggregateOutputType | null;
    _avg: FeedTrackAvgAggregateOutputType | null;
    _sum: FeedTrackSumAggregateOutputType | null;
    _min: FeedTrackMinAggregateOutputType | null;
    _max: FeedTrackMaxAggregateOutputType | null;
  };

  export type FeedTrackAvgAggregateOutputType = {
    id: number | null;
    userId: number | null;
  };

  export type FeedTrackSumAggregateOutputType = {
    id: number | null;
    userId: number | null;
  };

  export type FeedTrackMinAggregateOutputType = {
    id: number | null;
    userId: number | null;
    lastSeen: Date | null;
  };

  export type FeedTrackMaxAggregateOutputType = {
    id: number | null;
    userId: number | null;
    lastSeen: Date | null;
  };

  export type FeedTrackCountAggregateOutputType = {
    id: number;
    userId: number;
    lastSeen: number;
    _all: number;
  };

  export type FeedTrackAvgAggregateInputType = {
    id?: true;
    userId?: true;
  };

  export type FeedTrackSumAggregateInputType = {
    id?: true;
    userId?: true;
  };

  export type FeedTrackMinAggregateInputType = {
    id?: true;
    userId?: true;
    lastSeen?: true;
  };

  export type FeedTrackMaxAggregateInputType = {
    id?: true;
    userId?: true;
    lastSeen?: true;
  };

  export type FeedTrackCountAggregateInputType = {
    id?: true;
    userId?: true;
    lastSeen?: true;
    _all?: true;
  };

  export type FeedTrackAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which FeedTrack to aggregate.
     */
    where?: FeedTrackWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of FeedTracks to fetch.
     */
    orderBy?: FeedTrackOrderByWithRelationInput | FeedTrackOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: FeedTrackWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` FeedTracks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` FeedTracks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned FeedTracks
     **/
    _count?: true | FeedTrackCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: FeedTrackAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: FeedTrackSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: FeedTrackMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: FeedTrackMaxAggregateInputType;
  };

  export type GetFeedTrackAggregateType<T extends FeedTrackAggregateArgs> = {
    [P in keyof T & keyof AggregateFeedTrack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedTrack[P]>
      : GetScalarType<T[P], AggregateFeedTrack[P]>;
  };

  export type FeedTrackGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: FeedTrackWhereInput;
    orderBy?: FeedTrackOrderByWithAggregationInput | FeedTrackOrderByWithAggregationInput[];
    by: FeedTrackScalarFieldEnum[] | FeedTrackScalarFieldEnum;
    having?: FeedTrackScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: FeedTrackCountAggregateInputType | true;
    _avg?: FeedTrackAvgAggregateInputType;
    _sum?: FeedTrackSumAggregateInputType;
    _min?: FeedTrackMinAggregateInputType;
    _max?: FeedTrackMaxAggregateInputType;
  };

  export type FeedTrackGroupByOutputType = {
    id: number;
    userId: number;
    lastSeen: Date;
    _count: FeedTrackCountAggregateOutputType | null;
    _avg: FeedTrackAvgAggregateOutputType | null;
    _sum: FeedTrackSumAggregateOutputType | null;
    _min: FeedTrackMinAggregateOutputType | null;
    _max: FeedTrackMaxAggregateOutputType | null;
  };

  type GetFeedTrackGroupByPayload<T extends FeedTrackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedTrackGroupByOutputType, T['by']> & {
        [P in keyof T & keyof FeedTrackGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], FeedTrackGroupByOutputType[P]>
          : GetScalarType<T[P], FeedTrackGroupByOutputType[P]>;
      }
    >
  >;

  export type FeedTrackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetSelect<
      {
        id?: boolean;
        userId?: boolean;
        lastSeen?: boolean;
        user?: boolean | UserDefaultArgs<ExtArgs>;
      },
      ExtArgs['result']['feedTrack']
    >;

  export type FeedTrackSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      lastSeen?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['feedTrack']
  >;

  export type FeedTrackSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      userId?: boolean;
      lastSeen?: boolean;
      user?: boolean | UserDefaultArgs<ExtArgs>;
    },
    ExtArgs['result']['feedTrack']
  >;

  export type FeedTrackSelectScalar = {
    id?: boolean;
    userId?: boolean;
    lastSeen?: boolean;
  };

  export type FeedTrackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<'id' | 'userId' | 'lastSeen', ExtArgs['result']['feedTrack']>;
  export type FeedTrackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    {
      user?: boolean | UserDefaultArgs<ExtArgs>;
    };
  export type FeedTrackIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };
  export type FeedTrackIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    user?: boolean | UserDefaultArgs<ExtArgs>;
  };

  export type $FeedTrackPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: 'FeedTrack';
    objects: {
      user: Prisma.$UserPayload<ExtArgs>;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        userId: number;
        lastSeen: Date;
      },
      ExtArgs['result']['feedTrack']
    >;
    composites: {};
  };

  type FeedTrackGetPayload<S extends boolean | null | undefined | FeedTrackDefaultArgs> =
    $Result.GetResult<Prisma.$FeedTrackPayload, S>;

  type FeedTrackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedTrackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedTrackCountAggregateInputType | true;
    };

  export interface FeedTrackDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>['model']['FeedTrack'];
      meta: { name: 'FeedTrack' };
    };
    /**
     * Find zero or one FeedTrack that matches the filter.
     * @param {FeedTrackFindUniqueArgs} args - Arguments to find a FeedTrack
     * @example
     * // Get one FeedTrack
     * const feedTrack = await prisma.feedTrack.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedTrackFindUniqueArgs>(
      args: SelectSubset<T, FeedTrackFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<
        Prisma.$FeedTrackPayload<ExtArgs>,
        T,
        'findUnique',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one FeedTrack that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedTrackFindUniqueOrThrowArgs} args - Arguments to find a FeedTrack
     * @example
     * // Get one FeedTrack
     * const feedTrack = await prisma.feedTrack.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedTrackFindUniqueOrThrowArgs>(
      args: SelectSubset<T, FeedTrackFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<
        Prisma.$FeedTrackPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first FeedTrack that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackFindFirstArgs} args - Arguments to find a FeedTrack
     * @example
     * // Get one FeedTrack
     * const feedTrack = await prisma.feedTrack.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedTrackFindFirstArgs>(
      args?: SelectSubset<T, FeedTrackFindFirstArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<
        Prisma.$FeedTrackPayload<ExtArgs>,
        T,
        'findFirst',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first FeedTrack that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackFindFirstOrThrowArgs} args - Arguments to find a FeedTrack
     * @example
     * // Get one FeedTrack
     * const feedTrack = await prisma.feedTrack.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedTrackFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FeedTrackFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<
        Prisma.$FeedTrackPayload<ExtArgs>,
        T,
        'findFirstOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more FeedTracks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedTracks
     * const feedTracks = await prisma.feedTrack.findMany()
     *
     * // Get first 10 FeedTracks
     * const feedTracks = await prisma.feedTrack.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const feedTrackWithIdOnly = await prisma.feedTrack.findMany({ select: { id: true } })
     *
     */
    findMany<T extends FeedTrackFindManyArgs>(
      args?: SelectSubset<T, FeedTrackFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$FeedTrackPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a FeedTrack.
     * @param {FeedTrackCreateArgs} args - Arguments to create a FeedTrack.
     * @example
     * // Create one FeedTrack
     * const FeedTrack = await prisma.feedTrack.create({
     *   data: {
     *     // ... data to create a FeedTrack
     *   }
     * })
     *
     */
    create<T extends FeedTrackCreateArgs>(
      args: SelectSubset<T, FeedTrackCreateArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<Prisma.$FeedTrackPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many FeedTracks.
     * @param {FeedTrackCreateManyArgs} args - Arguments to create many FeedTracks.
     * @example
     * // Create many FeedTracks
     * const feedTrack = await prisma.feedTrack.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends FeedTrackCreateManyArgs>(
      args?: SelectSubset<T, FeedTrackCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many FeedTracks and returns the data saved in the database.
     * @param {FeedTrackCreateManyAndReturnArgs} args - Arguments to create many FeedTracks.
     * @example
     * // Create many FeedTracks
     * const feedTrack = await prisma.feedTrack.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many FeedTracks and only return the `id`
     * const feedTrackWithIdOnly = await prisma.feedTrack.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends FeedTrackCreateManyAndReturnArgs>(
      args?: SelectSubset<T, FeedTrackCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$FeedTrackPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a FeedTrack.
     * @param {FeedTrackDeleteArgs} args - Arguments to delete one FeedTrack.
     * @example
     * // Delete one FeedTrack
     * const FeedTrack = await prisma.feedTrack.delete({
     *   where: {
     *     // ... filter to delete one FeedTrack
     *   }
     * })
     *
     */
    delete<T extends FeedTrackDeleteArgs>(
      args: SelectSubset<T, FeedTrackDeleteArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<Prisma.$FeedTrackPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one FeedTrack.
     * @param {FeedTrackUpdateArgs} args - Arguments to update one FeedTrack.
     * @example
     * // Update one FeedTrack
     * const feedTrack = await prisma.feedTrack.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends FeedTrackUpdateArgs>(
      args: SelectSubset<T, FeedTrackUpdateArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<Prisma.$FeedTrackPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more FeedTracks.
     * @param {FeedTrackDeleteManyArgs} args - Arguments to filter FeedTracks to delete.
     * @example
     * // Delete a few FeedTracks
     * const { count } = await prisma.feedTrack.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends FeedTrackDeleteManyArgs>(
      args?: SelectSubset<T, FeedTrackDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more FeedTracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedTracks
     * const feedTrack = await prisma.feedTrack.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends FeedTrackUpdateManyArgs>(
      args: SelectSubset<T, FeedTrackUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more FeedTracks and returns the data updated in the database.
     * @param {FeedTrackUpdateManyAndReturnArgs} args - Arguments to update many FeedTracks.
     * @example
     * // Update many FeedTracks
     * const feedTrack = await prisma.feedTrack.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more FeedTracks and only return the `id`
     * const feedTrackWithIdOnly = await prisma.feedTrack.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends FeedTrackUpdateManyAndReturnArgs>(
      args: SelectSubset<T, FeedTrackUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$FeedTrackPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one FeedTrack.
     * @param {FeedTrackUpsertArgs} args - Arguments to update or create a FeedTrack.
     * @example
     * // Update or create a FeedTrack
     * const feedTrack = await prisma.feedTrack.upsert({
     *   create: {
     *     // ... data to create a FeedTrack
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedTrack we want to update
     *   }
     * })
     */
    upsert<T extends FeedTrackUpsertArgs>(
      args: SelectSubset<T, FeedTrackUpsertArgs<ExtArgs>>
    ): Prisma__FeedTrackClient<
      $Result.GetResult<Prisma.$FeedTrackPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of FeedTracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackCountArgs} args - Arguments to filter FeedTracks to count.
     * @example
     * // Count the number of FeedTracks
     * const count = await prisma.feedTrack.count({
     *   where: {
     *     // ... the filter for the FeedTracks we want to count
     *   }
     * })
     **/
    count<T extends FeedTrackCountArgs>(
      args?: Subset<T, FeedTrackCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedTrackCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a FeedTrack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends FeedTrackAggregateArgs>(
      args: Subset<T, FeedTrackAggregateArgs>
    ): Prisma.PrismaPromise<GetFeedTrackAggregateType<T>>;

    /**
     * Group by FeedTrack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedTrackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends FeedTrackGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedTrackGroupByArgs['orderBy'] }
        : { orderBy?: FeedTrackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, FeedTrackGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors ? GetFeedTrackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the FeedTrack model
     */
    readonly fields: FeedTrackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedTrack.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedTrackClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    user<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the FeedTrack model
   */
  interface FeedTrackFieldRefs {
    readonly id: FieldRef<'FeedTrack', 'Int'>;
    readonly userId: FieldRef<'FeedTrack', 'Int'>;
    readonly lastSeen: FieldRef<'FeedTrack', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * FeedTrack findUnique
   */
  export type FeedTrackFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * Filter, which FeedTrack to fetch.
     */
    where: FeedTrackWhereUniqueInput;
  };

  /**
   * FeedTrack findUniqueOrThrow
   */
  export type FeedTrackFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * Filter, which FeedTrack to fetch.
     */
    where: FeedTrackWhereUniqueInput;
  };

  /**
   * FeedTrack findFirst
   */
  export type FeedTrackFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * Filter, which FeedTrack to fetch.
     */
    where?: FeedTrackWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of FeedTracks to fetch.
     */
    orderBy?: FeedTrackOrderByWithRelationInput | FeedTrackOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for FeedTracks.
     */
    cursor?: FeedTrackWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` FeedTracks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` FeedTracks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of FeedTracks.
     */
    distinct?: FeedTrackScalarFieldEnum | FeedTrackScalarFieldEnum[];
  };

  /**
   * FeedTrack findFirstOrThrow
   */
  export type FeedTrackFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * Filter, which FeedTrack to fetch.
     */
    where?: FeedTrackWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of FeedTracks to fetch.
     */
    orderBy?: FeedTrackOrderByWithRelationInput | FeedTrackOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for FeedTracks.
     */
    cursor?: FeedTrackWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` FeedTracks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` FeedTracks.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of FeedTracks.
     */
    distinct?: FeedTrackScalarFieldEnum | FeedTrackScalarFieldEnum[];
  };

  /**
   * FeedTrack findMany
   */
  export type FeedTrackFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * Filter, which FeedTracks to fetch.
     */
    where?: FeedTrackWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of FeedTracks to fetch.
     */
    orderBy?: FeedTrackOrderByWithRelationInput | FeedTrackOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing FeedTracks.
     */
    cursor?: FeedTrackWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` FeedTracks from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` FeedTracks.
     */
    skip?: number;
    distinct?: FeedTrackScalarFieldEnum | FeedTrackScalarFieldEnum[];
  };

  /**
   * FeedTrack create
   */
  export type FeedTrackCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * The data needed to create a FeedTrack.
     */
    data: XOR<FeedTrackCreateInput, FeedTrackUncheckedCreateInput>;
  };

  /**
   * FeedTrack createMany
   */
  export type FeedTrackCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many FeedTracks.
     */
    data: FeedTrackCreateManyInput | FeedTrackCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * FeedTrack createManyAndReturn
   */
  export type FeedTrackCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * The data used to create many FeedTracks.
     */
    data: FeedTrackCreateManyInput | FeedTrackCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * FeedTrack update
   */
  export type FeedTrackUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * The data needed to update a FeedTrack.
     */
    data: XOR<FeedTrackUpdateInput, FeedTrackUncheckedUpdateInput>;
    /**
     * Choose, which FeedTrack to update.
     */
    where: FeedTrackWhereUniqueInput;
  };

  /**
   * FeedTrack updateMany
   */
  export type FeedTrackUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update FeedTracks.
     */
    data: XOR<FeedTrackUpdateManyMutationInput, FeedTrackUncheckedUpdateManyInput>;
    /**
     * Filter which FeedTracks to update
     */
    where?: FeedTrackWhereInput;
    /**
     * Limit how many FeedTracks to update.
     */
    limit?: number;
  };

  /**
   * FeedTrack updateManyAndReturn
   */
  export type FeedTrackUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * The data used to update FeedTracks.
     */
    data: XOR<FeedTrackUpdateManyMutationInput, FeedTrackUncheckedUpdateManyInput>;
    /**
     * Filter which FeedTracks to update
     */
    where?: FeedTrackWhereInput;
    /**
     * Limit how many FeedTracks to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * FeedTrack upsert
   */
  export type FeedTrackUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * The filter to search for the FeedTrack to update in case it exists.
     */
    where: FeedTrackWhereUniqueInput;
    /**
     * In case the FeedTrack found by the `where` argument doesn't exist, create a new FeedTrack with this data.
     */
    create: XOR<FeedTrackCreateInput, FeedTrackUncheckedCreateInput>;
    /**
     * In case the FeedTrack was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedTrackUpdateInput, FeedTrackUncheckedUpdateInput>;
  };

  /**
   * FeedTrack delete
   */
  export type FeedTrackDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
    /**
     * Filter which FeedTrack to delete.
     */
    where: FeedTrackWhereUniqueInput;
  };

  /**
   * FeedTrack deleteMany
   */
  export type FeedTrackDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which FeedTracks to delete
     */
    where?: FeedTrackWhereInput;
    /**
     * Limit how many FeedTracks to delete.
     */
    limit?: number;
  };

  /**
   * FeedTrack without action
   */
  export type FeedTrackDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the FeedTrack
     */
    select?: FeedTrackSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the FeedTrack
     */
    omit?: FeedTrackOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedTrackInclude<ExtArgs> | null;
  };

  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null;
    _avg: NotificationAvgAggregateOutputType | null;
    _sum: NotificationSumAggregateOutputType | null;
    _min: NotificationMinAggregateOutputType | null;
    _max: NotificationMaxAggregateOutputType | null;
  };

  export type NotificationAvgAggregateOutputType = {
    id: number | null;
    recipientId: number | null;
    senderId: number | null;
  };

  export type NotificationSumAggregateOutputType = {
    id: number | null;
    recipientId: number | null;
    senderId: number | null;
  };

  export type NotificationMinAggregateOutputType = {
    id: number | null;
    recipientId: number | null;
    senderId: number | null;
    type: $Enums.NotificationType | null;
    message: string | null;
    link: string | null;
    read: boolean | null;
    createdAt: Date | null;
  };

  export type NotificationMaxAggregateOutputType = {
    id: number | null;
    recipientId: number | null;
    senderId: number | null;
    type: $Enums.NotificationType | null;
    message: string | null;
    link: string | null;
    read: boolean | null;
    createdAt: Date | null;
  };

  export type NotificationCountAggregateOutputType = {
    id: number;
    recipientId: number;
    senderId: number;
    type: number;
    message: number;
    link: number;
    read: number;
    createdAt: number;
    _all: number;
  };

  export type NotificationAvgAggregateInputType = {
    id?: true;
    recipientId?: true;
    senderId?: true;
  };

  export type NotificationSumAggregateInputType = {
    id?: true;
    recipientId?: true;
    senderId?: true;
  };

  export type NotificationMinAggregateInputType = {
    id?: true;
    recipientId?: true;
    senderId?: true;
    type?: true;
    message?: true;
    link?: true;
    read?: true;
    createdAt?: true;
  };

  export type NotificationMaxAggregateInputType = {
    id?: true;
    recipientId?: true;
    senderId?: true;
    type?: true;
    message?: true;
    link?: true;
    read?: true;
    createdAt?: true;
  };

  export type NotificationCountAggregateInputType = {
    id?: true;
    recipientId?: true;
    senderId?: true;
    type?: true;
    message?: true;
    link?: true;
    read?: true;
    createdAt?: true;
    _all?: true;
  };

  export type NotificationAggregateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Notifications
     **/
    _count?: true | NotificationCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: NotificationAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: NotificationSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: NotificationMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: NotificationMaxAggregateInputType;
  };

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
    [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>;
  };

  export type NotificationGroupByArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[];
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum;
    having?: NotificationScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: NotificationCountAggregateInputType | true;
    _avg?: NotificationAvgAggregateInputType;
    _sum?: NotificationSumAggregateInputType;
    _min?: NotificationMinAggregateInputType;
    _max?: NotificationMaxAggregateInputType;
  };

  export type NotificationGroupByOutputType = {
    id: number;
    recipientId: number;
    senderId: number | null;
    type: $Enums.NotificationType;
    message: string;
    link: string | null;
    read: boolean;
    createdAt: Date;
    _count: NotificationCountAggregateOutputType | null;
    _avg: NotificationAvgAggregateOutputType | null;
    _sum: NotificationSumAggregateOutputType | null;
    _min: NotificationMinAggregateOutputType | null;
    _max: NotificationMaxAggregateOutputType | null;
  };

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> & {
        [P in keyof T & keyof NotificationGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
          : GetScalarType<T[P], NotificationGroupByOutputType[P]>;
      }
    >
  >;

  export type NotificationSelect<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      recipientId?: boolean;
      senderId?: boolean;
      type?: boolean;
      message?: boolean;
      link?: boolean;
      read?: boolean;
      createdAt?: boolean;
      recipient?: boolean | UserDefaultArgs<ExtArgs>;
      sender?: boolean | Notification$senderArgs<ExtArgs>;
    },
    ExtArgs['result']['notification']
  >;

  export type NotificationSelectCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      recipientId?: boolean;
      senderId?: boolean;
      type?: boolean;
      message?: boolean;
      link?: boolean;
      read?: boolean;
      createdAt?: boolean;
      recipient?: boolean | UserDefaultArgs<ExtArgs>;
      sender?: boolean | Notification$senderArgs<ExtArgs>;
    },
    ExtArgs['result']['notification']
  >;

  export type NotificationSelectUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = $Extensions.GetSelect<
    {
      id?: boolean;
      recipientId?: boolean;
      senderId?: boolean;
      type?: boolean;
      message?: boolean;
      link?: boolean;
      read?: boolean;
      createdAt?: boolean;
      recipient?: boolean | UserDefaultArgs<ExtArgs>;
      sender?: boolean | Notification$senderArgs<ExtArgs>;
    },
    ExtArgs['result']['notification']
  >;

  export type NotificationSelectScalar = {
    id?: boolean;
    recipientId?: boolean;
    senderId?: boolean;
    type?: boolean;
    message?: boolean;
    link?: boolean;
    read?: boolean;
    createdAt?: boolean;
  };

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    $Extensions.GetOmit<
      'id' | 'recipientId' | 'senderId' | 'type' | 'message' | 'link' | 'read' | 'createdAt',
      ExtArgs['result']['notification']
    >;
  export type NotificationInclude<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>;
    sender?: boolean | Notification$senderArgs<ExtArgs>;
  };
  export type NotificationIncludeCreateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>;
    sender?: boolean | Notification$senderArgs<ExtArgs>;
  };
  export type NotificationIncludeUpdateManyAndReturn<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>;
    sender?: boolean | Notification$senderArgs<ExtArgs>;
  };

  export type $NotificationPayload<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    name: 'Notification';
    objects: {
      recipient: Prisma.$UserPayload<ExtArgs>;
      sender: Prisma.$UserPayload<ExtArgs> | null;
    };
    scalars: $Extensions.GetPayloadResult<
      {
        id: number;
        recipientId: number;
        senderId: number | null;
        type: $Enums.NotificationType;
        message: string;
        link: string | null;
        read: boolean;
        createdAt: Date;
      },
      ExtArgs['result']['notification']
    >;
    composites: {};
  };

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> =
    $Result.GetResult<Prisma.$NotificationPayload, S>;

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true;
    };

  export interface NotificationDelegate<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > {
    [K: symbol]: {
      types: Prisma.TypeMap<ExtArgs>['model']['Notification'];
      meta: { name: 'Notification' };
    };
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findUnique',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(
      args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findFirst',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findFirstOrThrow',
        GlobalOmitOptions
      >,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     *
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     *
     */
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    >;

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     *
     */
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     */
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(
      args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'createManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     *
     */
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     */
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     */
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     *
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(
      args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<
      $Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'updateManyAndReturn',
        GlobalOmitOptions
      >
    >;

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<
      $Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
      never,
      ExtArgs,
      GlobalOmitOptions
    >;

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
     **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends NotificationAggregateArgs>(
      args: Subset<T, NotificationAggregateArgs>
    ): Prisma.PrismaPromise<GetNotificationAggregateType<T>>;

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<Extends<'skip', Keys<T>>, Extends<'take', Keys<T>>>,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
          ? {
              [P in HavingFields]: P extends ByFields
                ? never
                : P extends string
                  ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                  : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
            }[HavingFields]
          : 'take' extends Keys<T>
            ? 'orderBy' extends Keys<T>
              ? ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "take", you also need to provide "orderBy"'
            : 'skip' extends Keys<T>
              ? 'orderBy' extends Keys<T>
                ? ByValid extends True
                  ? {}
                  : {
                      [P in OrderFields]: P extends ByFields
                        ? never
                        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                    }[OrderFields]
                : 'Error: If you provide "skip", you also need to provide "orderBy"'
              : ByValid extends True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields],
    >(
      args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetNotificationGroupByPayload<T>
      : Prisma.PrismaPromise<InputErrors>;
    /**
     * Fields of the Notification model
     */
    readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<
    T,
    Null = never,
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
    GlobalOmitOptions = {},
  > extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    recipient<T extends UserDefaultArgs<ExtArgs> = {}>(
      args?: Subset<T, UserDefaultArgs<ExtArgs>>
    ): Prisma__UserClient<
      | $Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
      | Null,
      Null,
      ExtArgs,
      GlobalOmitOptions
    >;
    sender<T extends Notification$senderArgs<ExtArgs> = {}>(
      args?: Subset<T, Notification$senderArgs<ExtArgs>>
    ): Prisma__UserClient<
      $Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      > | null,
      null,
      ExtArgs,
      GlobalOmitOptions
    >;
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
      onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
    ): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
    ): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }

  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<'Notification', 'Int'>;
    readonly recipientId: FieldRef<'Notification', 'Int'>;
    readonly senderId: FieldRef<'Notification', 'Int'>;
    readonly type: FieldRef<'Notification', 'NotificationType'>;
    readonly message: FieldRef<'Notification', 'String'>;
    readonly link: FieldRef<'Notification', 'String'>;
    readonly read: FieldRef<'Notification', 'Boolean'>;
    readonly createdAt: FieldRef<'Notification', 'DateTime'>;
  }

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[];
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Notifications.
     */
    skip?: number;
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[];
  };

  /**
   * Notification create
   */
  export type NotificationCreateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>;
  };

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[];
    skipDuplicates?: boolean;
  };

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[];
    skipDuplicates?: boolean;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>;
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>;
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput;
    /**
     * Limit how many Notifications to update.
     */
    limit?: number;
  };

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>;
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput;
    /**
     * Limit how many Notifications to update.
     */
    limit?: number;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null;
  };

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput;
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>;
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>;
  };

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput;
  };

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput;
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number;
  };

  /**
   * Notification.sender
   */
  export type Notification$senderArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null;
    where?: UserWhereInput;
  };

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<
    ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs,
  > = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null;
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null;
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null;
  };

  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted';
    ReadCommitted: 'ReadCommitted';
    RepeatableRead: 'RepeatableRead';
    Serializable: 'Serializable';
  };

  export type TransactionIsolationLevel =
    (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

  export const UserScalarFieldEnum: {
    id: 'id';
    email: 'email';
    password: 'password';
    name: 'name';
    roles: 'roles';
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

  export const UserProfileScalarFieldEnum: {
    id: 'id';
    userId: 'userId';
    bio: 'bio';
    company: 'company';
    location: 'location';
    profilePic: 'profilePic';
    coverPic: 'coverPic';
    birthDate: 'birthDate';
    gender: 'gender';
    phone: 'phone';
    interests: 'interests';
    github: 'github';
    linkedin: 'linkedin';
    twitter: 'twitter';
    leetcode: 'leetcode';
    instagram: 'instagram';
    website: 'website';
    resumeLink: 'resumeLink';
    createdAt: 'createdAt';
    updatedAt: 'updatedAt';
  };

  export type UserProfileScalarFieldEnum =
    (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum];

  export const UserHeatmapScalarFieldEnum: {
    id: 'id';
    userId: 'userId';
    date: 'date';
    count: 'count';
  };

  export type UserHeatmapScalarFieldEnum =
    (typeof UserHeatmapScalarFieldEnum)[keyof typeof UserHeatmapScalarFieldEnum];

  export const UserTagStatsScalarFieldEnum: {
    id: 'id';
    userId: 'userId';
    tagId: 'tagId';
    postCount: 'postCount';
    updatedAt: 'updatedAt';
    createdAt: 'createdAt';
  };

  export type UserTagStatsScalarFieldEnum =
    (typeof UserTagStatsScalarFieldEnum)[keyof typeof UserTagStatsScalarFieldEnum];

  export const PostScalarFieldEnum: {
    id: 'id';
    title: 'title';
    content: 'content';
    createdAt: 'createdAt';
    authorId: 'authorId';
    likeCount: 'likeCount';
    commentCount: 'commentCount';
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum];

  export const FollowScalarFieldEnum: {
    id: 'id';
    followerId: 'followerId';
    followedId: 'followedId';
    createdAt: 'createdAt';
  };

  export type FollowScalarFieldEnum =
    (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum];

  export const TagScalarFieldEnum: {
    id: 'id';
    name: 'name';
    createdAt: 'createdAt';
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum];

  export const PostTagScalarFieldEnum: {
    id: 'id';
    postId: 'postId';
    tagId: 'tagId';
    createdAt: 'createdAt';
  };

  export type PostTagScalarFieldEnum =
    (typeof PostTagScalarFieldEnum)[keyof typeof PostTagScalarFieldEnum];

  export const TagFollowScalarFieldEnum: {
    id: 'id';
    tagId: 'tagId';
    userId: 'userId';
    createdAt: 'createdAt';
  };

  export type TagFollowScalarFieldEnum =
    (typeof TagFollowScalarFieldEnum)[keyof typeof TagFollowScalarFieldEnum];

  export const CommentScalarFieldEnum: {
    id: 'id';
    content: 'content';
    createdAt: 'createdAt';
    postId: 'postId';
    authorId: 'authorId';
  };

  export type CommentScalarFieldEnum =
    (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum];

  export const LikeScalarFieldEnum: {
    id: 'id';
    postId: 'postId';
    userId: 'userId';
    createdAt: 'createdAt';
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum];

  export const ShareScalarFieldEnum: {
    id: 'id';
    postId: 'postId';
    userId: 'userId';
    createdAt: 'createdAt';
  };

  export type ShareScalarFieldEnum =
    (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum];

  export const FeedScalarFieldEnum: {
    id: 'id';
    postId: 'postId';
    userId: 'userId';
    createdAt: 'createdAt';
  };

  export type FeedScalarFieldEnum = (typeof FeedScalarFieldEnum)[keyof typeof FeedScalarFieldEnum];

  export const FeedTrackScalarFieldEnum: {
    id: 'id';
    userId: 'userId';
    lastSeen: 'lastSeen';
  };

  export type FeedTrackScalarFieldEnum =
    (typeof FeedTrackScalarFieldEnum)[keyof typeof FeedTrackScalarFieldEnum];

  export const NotificationScalarFieldEnum: {
    id: 'id';
    recipientId: 'recipientId';
    senderId: 'senderId';
    type: 'type';
    message: 'message';
    link: 'link';
    read: 'read';
    createdAt: 'createdAt';
  };

  export type NotificationScalarFieldEnum =
    (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum];

  export const SortOrder: {
    asc: 'asc';
    desc: 'desc';
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

  export const QueryMode: {
    default: 'default';
    insensitive: 'insensitive';
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

  export const NullsOrder: {
    first: 'first';
    last: 'last';
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

  /**
   * Field references
   */

  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>;

  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>;

  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>;

  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>;

  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>;

  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    'DateTime[]'
  >;

  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>;

  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    'Gender[]'
  >;

  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    'NotificationType'
  >;

  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
    $PrismaModel,
    'NotificationType[]'
  >;

  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>;

  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>;

  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>;

  /**
   * Deep Input Types
   */

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[];
    OR?: UserWhereInput[];
    NOT?: UserWhereInput | UserWhereInput[];
    id?: IntFilter<'User'> | number;
    email?: StringFilter<'User'> | string;
    password?: StringFilter<'User'> | string;
    name?: StringNullableFilter<'User'> | string | null;
    roles?: StringNullableListFilter<'User'>;
    userProfile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null;
    post?: PostListRelationFilter;
    tagStats?: UserTagStatsListRelationFilter;
    feed?: FeedListRelationFilter;
    feedTrack?: FeedTrackListRelationFilter;
    heapmap?: UserHeatmapListRelationFilter;
    like?: LikeListRelationFilter;
    comment?: CommentListRelationFilter;
    shared?: ShareListRelationFilter;
    tagFollows?: TagFollowListRelationFilter;
    followers?: FollowListRelationFilter;
    following?: FollowListRelationFilter;
    notificationsSent?: NotificationListRelationFilter;
    notificationsReceived?: NotificationListRelationFilter;
  };

  export type UserOrderByWithRelationInput = {
    id?: SortOrder;
    email?: SortOrder;
    password?: SortOrder;
    name?: SortOrderInput | SortOrder;
    roles?: SortOrder;
    userProfile?: UserProfileOrderByWithRelationInput;
    post?: PostOrderByRelationAggregateInput;
    tagStats?: UserTagStatsOrderByRelationAggregateInput;
    feed?: FeedOrderByRelationAggregateInput;
    feedTrack?: FeedTrackOrderByRelationAggregateInput;
    heapmap?: UserHeatmapOrderByRelationAggregateInput;
    like?: LikeOrderByRelationAggregateInput;
    comment?: CommentOrderByRelationAggregateInput;
    shared?: ShareOrderByRelationAggregateInput;
    tagFollows?: TagFollowOrderByRelationAggregateInput;
    followers?: FollowOrderByRelationAggregateInput;
    following?: FollowOrderByRelationAggregateInput;
    notificationsSent?: NotificationOrderByRelationAggregateInput;
    notificationsReceived?: NotificationOrderByRelationAggregateInput;
  };

  export type UserWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      email?: string;
      password?: string;
      AND?: UserWhereInput | UserWhereInput[];
      OR?: UserWhereInput[];
      NOT?: UserWhereInput | UserWhereInput[];
      name?: StringNullableFilter<'User'> | string | null;
      roles?: StringNullableListFilter<'User'>;
      userProfile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null;
      post?: PostListRelationFilter;
      tagStats?: UserTagStatsListRelationFilter;
      feed?: FeedListRelationFilter;
      feedTrack?: FeedTrackListRelationFilter;
      heapmap?: UserHeatmapListRelationFilter;
      like?: LikeListRelationFilter;
      comment?: CommentListRelationFilter;
      shared?: ShareListRelationFilter;
      tagFollows?: TagFollowListRelationFilter;
      followers?: FollowListRelationFilter;
      following?: FollowListRelationFilter;
      notificationsSent?: NotificationListRelationFilter;
      notificationsReceived?: NotificationListRelationFilter;
    },
    'id' | 'email' | 'password'
  >;

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder;
    email?: SortOrder;
    password?: SortOrder;
    name?: SortOrderInput | SortOrder;
    roles?: SortOrder;
    _count?: UserCountOrderByAggregateInput;
    _avg?: UserAvgOrderByAggregateInput;
    _max?: UserMaxOrderByAggregateInput;
    _min?: UserMinOrderByAggregateInput;
    _sum?: UserSumOrderByAggregateInput;
  };

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[];
    OR?: UserScalarWhereWithAggregatesInput[];
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'User'> | number;
    email?: StringWithAggregatesFilter<'User'> | string;
    password?: StringWithAggregatesFilter<'User'> | string;
    name?: StringNullableWithAggregatesFilter<'User'> | string | null;
    roles?: StringNullableListFilter<'User'>;
  };

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[];
    OR?: UserProfileWhereInput[];
    NOT?: UserProfileWhereInput | UserProfileWhereInput[];
    id?: IntFilter<'UserProfile'> | number;
    userId?: IntFilter<'UserProfile'> | number;
    bio?: StringNullableFilter<'UserProfile'> | string | null;
    company?: StringNullableFilter<'UserProfile'> | string | null;
    location?: StringNullableFilter<'UserProfile'> | string | null;
    profilePic?: StringNullableFilter<'UserProfile'> | string | null;
    coverPic?: StringNullableFilter<'UserProfile'> | string | null;
    birthDate?: DateTimeNullableFilter<'UserProfile'> | Date | string | null;
    gender?: EnumGenderNullableFilter<'UserProfile'> | $Enums.Gender | null;
    phone?: StringNullableFilter<'UserProfile'> | string | null;
    interests?: StringNullableListFilter<'UserProfile'>;
    github?: StringNullableFilter<'UserProfile'> | string | null;
    linkedin?: StringNullableFilter<'UserProfile'> | string | null;
    twitter?: StringNullableFilter<'UserProfile'> | string | null;
    leetcode?: StringNullableFilter<'UserProfile'> | string | null;
    instagram?: StringNullableFilter<'UserProfile'> | string | null;
    website?: StringNullableFilter<'UserProfile'> | string | null;
    resumeLink?: StringNullableFilter<'UserProfile'> | string | null;
    createdAt?: DateTimeFilter<'UserProfile'> | Date | string;
    updatedAt?: DateTimeFilter<'UserProfile'> | Date | string;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    bio?: SortOrderInput | SortOrder;
    company?: SortOrderInput | SortOrder;
    location?: SortOrderInput | SortOrder;
    profilePic?: SortOrderInput | SortOrder;
    coverPic?: SortOrderInput | SortOrder;
    birthDate?: SortOrderInput | SortOrder;
    gender?: SortOrderInput | SortOrder;
    phone?: SortOrderInput | SortOrder;
    interests?: SortOrder;
    github?: SortOrderInput | SortOrder;
    linkedin?: SortOrderInput | SortOrder;
    twitter?: SortOrderInput | SortOrder;
    leetcode?: SortOrderInput | SortOrder;
    instagram?: SortOrderInput | SortOrder;
    website?: SortOrderInput | SortOrder;
    resumeLink?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      userId?: number;
      AND?: UserProfileWhereInput | UserProfileWhereInput[];
      OR?: UserProfileWhereInput[];
      NOT?: UserProfileWhereInput | UserProfileWhereInput[];
      bio?: StringNullableFilter<'UserProfile'> | string | null;
      company?: StringNullableFilter<'UserProfile'> | string | null;
      location?: StringNullableFilter<'UserProfile'> | string | null;
      profilePic?: StringNullableFilter<'UserProfile'> | string | null;
      coverPic?: StringNullableFilter<'UserProfile'> | string | null;
      birthDate?: DateTimeNullableFilter<'UserProfile'> | Date | string | null;
      gender?: EnumGenderNullableFilter<'UserProfile'> | $Enums.Gender | null;
      phone?: StringNullableFilter<'UserProfile'> | string | null;
      interests?: StringNullableListFilter<'UserProfile'>;
      github?: StringNullableFilter<'UserProfile'> | string | null;
      linkedin?: StringNullableFilter<'UserProfile'> | string | null;
      twitter?: StringNullableFilter<'UserProfile'> | string | null;
      leetcode?: StringNullableFilter<'UserProfile'> | string | null;
      instagram?: StringNullableFilter<'UserProfile'> | string | null;
      website?: StringNullableFilter<'UserProfile'> | string | null;
      resumeLink?: StringNullableFilter<'UserProfile'> | string | null;
      createdAt?: DateTimeFilter<'UserProfile'> | Date | string;
      updatedAt?: DateTimeFilter<'UserProfile'> | Date | string;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'userId'
  >;

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    bio?: SortOrderInput | SortOrder;
    company?: SortOrderInput | SortOrder;
    location?: SortOrderInput | SortOrder;
    profilePic?: SortOrderInput | SortOrder;
    coverPic?: SortOrderInput | SortOrder;
    birthDate?: SortOrderInput | SortOrder;
    gender?: SortOrderInput | SortOrder;
    phone?: SortOrderInput | SortOrder;
    interests?: SortOrder;
    github?: SortOrderInput | SortOrder;
    linkedin?: SortOrderInput | SortOrder;
    twitter?: SortOrderInput | SortOrder;
    leetcode?: SortOrderInput | SortOrder;
    instagram?: SortOrderInput | SortOrder;
    website?: SortOrderInput | SortOrder;
    resumeLink?: SortOrderInput | SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: UserProfileCountOrderByAggregateInput;
    _avg?: UserProfileAvgOrderByAggregateInput;
    _max?: UserProfileMaxOrderByAggregateInput;
    _min?: UserProfileMinOrderByAggregateInput;
    _sum?: UserProfileSumOrderByAggregateInput;
  };

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[];
    OR?: UserProfileScalarWhereWithAggregatesInput[];
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'UserProfile'> | number;
    userId?: IntWithAggregatesFilter<'UserProfile'> | number;
    bio?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    company?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    location?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    profilePic?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    coverPic?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    birthDate?: DateTimeNullableWithAggregatesFilter<'UserProfile'> | Date | string | null;
    gender?: EnumGenderNullableWithAggregatesFilter<'UserProfile'> | $Enums.Gender | null;
    phone?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    interests?: StringNullableListFilter<'UserProfile'>;
    github?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    linkedin?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    twitter?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    leetcode?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    instagram?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    website?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    resumeLink?: StringNullableWithAggregatesFilter<'UserProfile'> | string | null;
    createdAt?: DateTimeWithAggregatesFilter<'UserProfile'> | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter<'UserProfile'> | Date | string;
  };

  export type UserHeatmapWhereInput = {
    AND?: UserHeatmapWhereInput | UserHeatmapWhereInput[];
    OR?: UserHeatmapWhereInput[];
    NOT?: UserHeatmapWhereInput | UserHeatmapWhereInput[];
    id?: IntFilter<'UserHeatmap'> | number;
    userId?: IntFilter<'UserHeatmap'> | number;
    date?: DateTimeFilter<'UserHeatmap'> | Date | string;
    count?: IntFilter<'UserHeatmap'> | number;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type UserHeatmapOrderByWithRelationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    date?: SortOrder;
    count?: SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type UserHeatmapWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      userId_date?: UserHeatmapUserIdDateCompoundUniqueInput;
      AND?: UserHeatmapWhereInput | UserHeatmapWhereInput[];
      OR?: UserHeatmapWhereInput[];
      NOT?: UserHeatmapWhereInput | UserHeatmapWhereInput[];
      userId?: IntFilter<'UserHeatmap'> | number;
      date?: DateTimeFilter<'UserHeatmap'> | Date | string;
      count?: IntFilter<'UserHeatmap'> | number;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'userId_date'
  >;

  export type UserHeatmapOrderByWithAggregationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    date?: SortOrder;
    count?: SortOrder;
    _count?: UserHeatmapCountOrderByAggregateInput;
    _avg?: UserHeatmapAvgOrderByAggregateInput;
    _max?: UserHeatmapMaxOrderByAggregateInput;
    _min?: UserHeatmapMinOrderByAggregateInput;
    _sum?: UserHeatmapSumOrderByAggregateInput;
  };

  export type UserHeatmapScalarWhereWithAggregatesInput = {
    AND?: UserHeatmapScalarWhereWithAggregatesInput | UserHeatmapScalarWhereWithAggregatesInput[];
    OR?: UserHeatmapScalarWhereWithAggregatesInput[];
    NOT?: UserHeatmapScalarWhereWithAggregatesInput | UserHeatmapScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'UserHeatmap'> | number;
    userId?: IntWithAggregatesFilter<'UserHeatmap'> | number;
    date?: DateTimeWithAggregatesFilter<'UserHeatmap'> | Date | string;
    count?: IntWithAggregatesFilter<'UserHeatmap'> | number;
  };

  export type UserTagStatsWhereInput = {
    AND?: UserTagStatsWhereInput | UserTagStatsWhereInput[];
    OR?: UserTagStatsWhereInput[];
    NOT?: UserTagStatsWhereInput | UserTagStatsWhereInput[];
    id?: IntFilter<'UserTagStats'> | number;
    userId?: IntFilter<'UserTagStats'> | number;
    tagId?: IntFilter<'UserTagStats'> | number;
    postCount?: IntFilter<'UserTagStats'> | number;
    updatedAt?: DateTimeFilter<'UserTagStats'> | Date | string;
    createdAt?: DateTimeFilter<'UserTagStats'> | Date | string;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>;
  };

  export type UserTagStatsOrderByWithRelationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
    updatedAt?: SortOrder;
    createdAt?: SortOrder;
    user?: UserOrderByWithRelationInput;
    tag?: TagOrderByWithRelationInput;
  };

  export type UserTagStatsWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      userId_tagId?: UserTagStatsUserIdTagIdCompoundUniqueInput;
      AND?: UserTagStatsWhereInput | UserTagStatsWhereInput[];
      OR?: UserTagStatsWhereInput[];
      NOT?: UserTagStatsWhereInput | UserTagStatsWhereInput[];
      userId?: IntFilter<'UserTagStats'> | number;
      tagId?: IntFilter<'UserTagStats'> | number;
      postCount?: IntFilter<'UserTagStats'> | number;
      updatedAt?: DateTimeFilter<'UserTagStats'> | Date | string;
      createdAt?: DateTimeFilter<'UserTagStats'> | Date | string;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
      tag?: XOR<TagScalarRelationFilter, TagWhereInput>;
    },
    'id' | 'userId_tagId'
  >;

  export type UserTagStatsOrderByWithAggregationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
    updatedAt?: SortOrder;
    createdAt?: SortOrder;
    _count?: UserTagStatsCountOrderByAggregateInput;
    _avg?: UserTagStatsAvgOrderByAggregateInput;
    _max?: UserTagStatsMaxOrderByAggregateInput;
    _min?: UserTagStatsMinOrderByAggregateInput;
    _sum?: UserTagStatsSumOrderByAggregateInput;
  };

  export type UserTagStatsScalarWhereWithAggregatesInput = {
    AND?: UserTagStatsScalarWhereWithAggregatesInput | UserTagStatsScalarWhereWithAggregatesInput[];
    OR?: UserTagStatsScalarWhereWithAggregatesInput[];
    NOT?: UserTagStatsScalarWhereWithAggregatesInput | UserTagStatsScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'UserTagStats'> | number;
    userId?: IntWithAggregatesFilter<'UserTagStats'> | number;
    tagId?: IntWithAggregatesFilter<'UserTagStats'> | number;
    postCount?: IntWithAggregatesFilter<'UserTagStats'> | number;
    updatedAt?: DateTimeWithAggregatesFilter<'UserTagStats'> | Date | string;
    createdAt?: DateTimeWithAggregatesFilter<'UserTagStats'> | Date | string;
  };

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[];
    OR?: PostWhereInput[];
    NOT?: PostWhereInput | PostWhereInput[];
    id?: IntFilter<'Post'> | number;
    title?: StringFilter<'Post'> | string;
    content?: StringFilter<'Post'> | string;
    createdAt?: DateTimeFilter<'Post'> | Date | string;
    authorId?: IntFilter<'Post'> | number;
    likeCount?: IntFilter<'Post'> | number;
    commentCount?: IntFilter<'Post'> | number;
    author?: XOR<UserScalarRelationFilter, UserWhereInput>;
    tags?: PostTagListRelationFilter;
    comments?: CommentListRelationFilter;
    likes?: LikeListRelationFilter;
    shares?: ShareListRelationFilter;
    feed?: FeedListRelationFilter;
  };

  export type PostOrderByWithRelationInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
    author?: UserOrderByWithRelationInput;
    tags?: PostTagOrderByRelationAggregateInput;
    comments?: CommentOrderByRelationAggregateInput;
    likes?: LikeOrderByRelationAggregateInput;
    shares?: ShareOrderByRelationAggregateInput;
    feed?: FeedOrderByRelationAggregateInput;
  };

  export type PostWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      AND?: PostWhereInput | PostWhereInput[];
      OR?: PostWhereInput[];
      NOT?: PostWhereInput | PostWhereInput[];
      title?: StringFilter<'Post'> | string;
      content?: StringFilter<'Post'> | string;
      createdAt?: DateTimeFilter<'Post'> | Date | string;
      authorId?: IntFilter<'Post'> | number;
      likeCount?: IntFilter<'Post'> | number;
      commentCount?: IntFilter<'Post'> | number;
      author?: XOR<UserScalarRelationFilter, UserWhereInput>;
      tags?: PostTagListRelationFilter;
      comments?: CommentListRelationFilter;
      likes?: LikeListRelationFilter;
      shares?: ShareListRelationFilter;
      feed?: FeedListRelationFilter;
    },
    'id'
  >;

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
    _count?: PostCountOrderByAggregateInput;
    _avg?: PostAvgOrderByAggregateInput;
    _max?: PostMaxOrderByAggregateInput;
    _min?: PostMinOrderByAggregateInput;
    _sum?: PostSumOrderByAggregateInput;
  };

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[];
    OR?: PostScalarWhereWithAggregatesInput[];
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Post'> | number;
    title?: StringWithAggregatesFilter<'Post'> | string;
    content?: StringWithAggregatesFilter<'Post'> | string;
    createdAt?: DateTimeWithAggregatesFilter<'Post'> | Date | string;
    authorId?: IntWithAggregatesFilter<'Post'> | number;
    likeCount?: IntWithAggregatesFilter<'Post'> | number;
    commentCount?: IntWithAggregatesFilter<'Post'> | number;
  };

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[];
    OR?: FollowWhereInput[];
    NOT?: FollowWhereInput | FollowWhereInput[];
    id?: IntFilter<'Follow'> | number;
    followerId?: IntFilter<'Follow'> | number;
    followedId?: IntFilter<'Follow'> | number;
    createdAt?: DateTimeFilter<'Follow'> | Date | string;
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>;
    followed?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
    createdAt?: SortOrder;
    follower?: UserOrderByWithRelationInput;
    followed?: UserOrderByWithRelationInput;
  };

  export type FollowWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      followerId_followedId?: FollowFollowerIdFollowedIdCompoundUniqueInput;
      AND?: FollowWhereInput | FollowWhereInput[];
      OR?: FollowWhereInput[];
      NOT?: FollowWhereInput | FollowWhereInput[];
      followerId?: IntFilter<'Follow'> | number;
      followedId?: IntFilter<'Follow'> | number;
      createdAt?: DateTimeFilter<'Follow'> | Date | string;
      follower?: XOR<UserScalarRelationFilter, UserWhereInput>;
      followed?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'followerId_followedId'
  >;

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
    createdAt?: SortOrder;
    _count?: FollowCountOrderByAggregateInput;
    _avg?: FollowAvgOrderByAggregateInput;
    _max?: FollowMaxOrderByAggregateInput;
    _min?: FollowMinOrderByAggregateInput;
    _sum?: FollowSumOrderByAggregateInput;
  };

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[];
    OR?: FollowScalarWhereWithAggregatesInput[];
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Follow'> | number;
    followerId?: IntWithAggregatesFilter<'Follow'> | number;
    followedId?: IntWithAggregatesFilter<'Follow'> | number;
    createdAt?: DateTimeWithAggregatesFilter<'Follow'> | Date | string;
  };

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[];
    OR?: TagWhereInput[];
    NOT?: TagWhereInput | TagWhereInput[];
    id?: IntFilter<'Tag'> | number;
    name?: StringFilter<'Tag'> | string;
    createdAt?: DateTimeFilter<'Tag'> | Date | string;
    posts?: PostTagListRelationFilter;
    users?: UserTagStatsListRelationFilter;
    followers?: TagFollowListRelationFilter;
  };

  export type TagOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    posts?: PostTagOrderByRelationAggregateInput;
    users?: UserTagStatsOrderByRelationAggregateInput;
    followers?: TagFollowOrderByRelationAggregateInput;
  };

  export type TagWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      name?: string;
      AND?: TagWhereInput | TagWhereInput[];
      OR?: TagWhereInput[];
      NOT?: TagWhereInput | TagWhereInput[];
      createdAt?: DateTimeFilter<'Tag'> | Date | string;
      posts?: PostTagListRelationFilter;
      users?: UserTagStatsListRelationFilter;
      followers?: TagFollowListRelationFilter;
    },
    'id' | 'name'
  >;

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
    _count?: TagCountOrderByAggregateInput;
    _avg?: TagAvgOrderByAggregateInput;
    _max?: TagMaxOrderByAggregateInput;
    _min?: TagMinOrderByAggregateInput;
    _sum?: TagSumOrderByAggregateInput;
  };

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[];
    OR?: TagScalarWhereWithAggregatesInput[];
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Tag'> | number;
    name?: StringWithAggregatesFilter<'Tag'> | string;
    createdAt?: DateTimeWithAggregatesFilter<'Tag'> | Date | string;
  };

  export type PostTagWhereInput = {
    AND?: PostTagWhereInput | PostTagWhereInput[];
    OR?: PostTagWhereInput[];
    NOT?: PostTagWhereInput | PostTagWhereInput[];
    id?: IntFilter<'PostTag'> | number;
    postId?: IntFilter<'PostTag'> | number;
    tagId?: IntFilter<'PostTag'> | number;
    createdAt?: DateTimeFilter<'PostTag'> | Date | string;
    post?: XOR<PostScalarRelationFilter, PostWhereInput>;
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>;
  };

  export type PostTagOrderByWithRelationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
    createdAt?: SortOrder;
    post?: PostOrderByWithRelationInput;
    tag?: TagOrderByWithRelationInput;
  };

  export type PostTagWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      postId_tagId?: PostTagPostIdTagIdCompoundUniqueInput;
      AND?: PostTagWhereInput | PostTagWhereInput[];
      OR?: PostTagWhereInput[];
      NOT?: PostTagWhereInput | PostTagWhereInput[];
      postId?: IntFilter<'PostTag'> | number;
      tagId?: IntFilter<'PostTag'> | number;
      createdAt?: DateTimeFilter<'PostTag'> | Date | string;
      post?: XOR<PostScalarRelationFilter, PostWhereInput>;
      tag?: XOR<TagScalarRelationFilter, TagWhereInput>;
    },
    'id' | 'postId_tagId'
  >;

  export type PostTagOrderByWithAggregationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
    createdAt?: SortOrder;
    _count?: PostTagCountOrderByAggregateInput;
    _avg?: PostTagAvgOrderByAggregateInput;
    _max?: PostTagMaxOrderByAggregateInput;
    _min?: PostTagMinOrderByAggregateInput;
    _sum?: PostTagSumOrderByAggregateInput;
  };

  export type PostTagScalarWhereWithAggregatesInput = {
    AND?: PostTagScalarWhereWithAggregatesInput | PostTagScalarWhereWithAggregatesInput[];
    OR?: PostTagScalarWhereWithAggregatesInput[];
    NOT?: PostTagScalarWhereWithAggregatesInput | PostTagScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'PostTag'> | number;
    postId?: IntWithAggregatesFilter<'PostTag'> | number;
    tagId?: IntWithAggregatesFilter<'PostTag'> | number;
    createdAt?: DateTimeWithAggregatesFilter<'PostTag'> | Date | string;
  };

  export type TagFollowWhereInput = {
    AND?: TagFollowWhereInput | TagFollowWhereInput[];
    OR?: TagFollowWhereInput[];
    NOT?: TagFollowWhereInput | TagFollowWhereInput[];
    id?: IntFilter<'TagFollow'> | number;
    tagId?: IntFilter<'TagFollow'> | number;
    userId?: IntFilter<'TagFollow'> | number;
    createdAt?: DateTimeFilter<'TagFollow'> | Date | string;
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type TagFollowOrderByWithRelationInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    tag?: TagOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
  };

  export type TagFollowWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      tagId_userId?: TagFollowTagIdUserIdCompoundUniqueInput;
      AND?: TagFollowWhereInput | TagFollowWhereInput[];
      OR?: TagFollowWhereInput[];
      NOT?: TagFollowWhereInput | TagFollowWhereInput[];
      tagId?: IntFilter<'TagFollow'> | number;
      userId?: IntFilter<'TagFollow'> | number;
      createdAt?: DateTimeFilter<'TagFollow'> | Date | string;
      tag?: XOR<TagScalarRelationFilter, TagWhereInput>;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'tagId_userId'
  >;

  export type TagFollowOrderByWithAggregationInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    _count?: TagFollowCountOrderByAggregateInput;
    _avg?: TagFollowAvgOrderByAggregateInput;
    _max?: TagFollowMaxOrderByAggregateInput;
    _min?: TagFollowMinOrderByAggregateInput;
    _sum?: TagFollowSumOrderByAggregateInput;
  };

  export type TagFollowScalarWhereWithAggregatesInput = {
    AND?: TagFollowScalarWhereWithAggregatesInput | TagFollowScalarWhereWithAggregatesInput[];
    OR?: TagFollowScalarWhereWithAggregatesInput[];
    NOT?: TagFollowScalarWhereWithAggregatesInput | TagFollowScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'TagFollow'> | number;
    tagId?: IntWithAggregatesFilter<'TagFollow'> | number;
    userId?: IntWithAggregatesFilter<'TagFollow'> | number;
    createdAt?: DateTimeWithAggregatesFilter<'TagFollow'> | Date | string;
  };

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[];
    OR?: CommentWhereInput[];
    NOT?: CommentWhereInput | CommentWhereInput[];
    id?: IntFilter<'Comment'> | number;
    content?: StringFilter<'Comment'> | string;
    createdAt?: DateTimeFilter<'Comment'> | Date | string;
    postId?: IntFilter<'Comment'> | number;
    authorId?: IntFilter<'Comment'> | number;
    post?: XOR<PostScalarRelationFilter, PostWhereInput>;
    author?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
    post?: PostOrderByWithRelationInput;
    author?: UserOrderByWithRelationInput;
  };

  export type CommentWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      AND?: CommentWhereInput | CommentWhereInput[];
      OR?: CommentWhereInput[];
      NOT?: CommentWhereInput | CommentWhereInput[];
      content?: StringFilter<'Comment'> | string;
      createdAt?: DateTimeFilter<'Comment'> | Date | string;
      postId?: IntFilter<'Comment'> | number;
      authorId?: IntFilter<'Comment'> | number;
      post?: XOR<PostScalarRelationFilter, PostWhereInput>;
      author?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id'
  >;

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
    _count?: CommentCountOrderByAggregateInput;
    _avg?: CommentAvgOrderByAggregateInput;
    _max?: CommentMaxOrderByAggregateInput;
    _min?: CommentMinOrderByAggregateInput;
    _sum?: CommentSumOrderByAggregateInput;
  };

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[];
    OR?: CommentScalarWhereWithAggregatesInput[];
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Comment'> | number;
    content?: StringWithAggregatesFilter<'Comment'> | string;
    createdAt?: DateTimeWithAggregatesFilter<'Comment'> | Date | string;
    postId?: IntWithAggregatesFilter<'Comment'> | number;
    authorId?: IntWithAggregatesFilter<'Comment'> | number;
  };

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[];
    OR?: LikeWhereInput[];
    NOT?: LikeWhereInput | LikeWhereInput[];
    id?: IntFilter<'Like'> | number;
    postId?: IntFilter<'Like'> | number;
    userId?: IntFilter<'Like'> | number;
    createdAt?: DateTimeFilter<'Like'> | Date | string;
    post?: XOR<PostScalarRelationFilter, PostWhereInput>;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    post?: PostOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
  };

  export type LikeWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      postId_userId?: LikePostIdUserIdCompoundUniqueInput;
      AND?: LikeWhereInput | LikeWhereInput[];
      OR?: LikeWhereInput[];
      NOT?: LikeWhereInput | LikeWhereInput[];
      postId?: IntFilter<'Like'> | number;
      userId?: IntFilter<'Like'> | number;
      createdAt?: DateTimeFilter<'Like'> | Date | string;
      post?: XOR<PostScalarRelationFilter, PostWhereInput>;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'postId_userId'
  >;

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    _count?: LikeCountOrderByAggregateInput;
    _avg?: LikeAvgOrderByAggregateInput;
    _max?: LikeMaxOrderByAggregateInput;
    _min?: LikeMinOrderByAggregateInput;
    _sum?: LikeSumOrderByAggregateInput;
  };

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[];
    OR?: LikeScalarWhereWithAggregatesInput[];
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Like'> | number;
    postId?: IntWithAggregatesFilter<'Like'> | number;
    userId?: IntWithAggregatesFilter<'Like'> | number;
    createdAt?: DateTimeWithAggregatesFilter<'Like'> | Date | string;
  };

  export type ShareWhereInput = {
    AND?: ShareWhereInput | ShareWhereInput[];
    OR?: ShareWhereInput[];
    NOT?: ShareWhereInput | ShareWhereInput[];
    id?: IntFilter<'Share'> | number;
    postId?: IntFilter<'Share'> | number;
    userId?: IntFilter<'Share'> | number;
    createdAt?: DateTimeFilter<'Share'> | Date | string;
    post?: XOR<PostScalarRelationFilter, PostWhereInput>;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type ShareOrderByWithRelationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    post?: PostOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
  };

  export type ShareWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      postId_userId?: SharePostIdUserIdCompoundUniqueInput;
      AND?: ShareWhereInput | ShareWhereInput[];
      OR?: ShareWhereInput[];
      NOT?: ShareWhereInput | ShareWhereInput[];
      postId?: IntFilter<'Share'> | number;
      userId?: IntFilter<'Share'> | number;
      createdAt?: DateTimeFilter<'Share'> | Date | string;
      post?: XOR<PostScalarRelationFilter, PostWhereInput>;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'postId_userId'
  >;

  export type ShareOrderByWithAggregationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    _count?: ShareCountOrderByAggregateInput;
    _avg?: ShareAvgOrderByAggregateInput;
    _max?: ShareMaxOrderByAggregateInput;
    _min?: ShareMinOrderByAggregateInput;
    _sum?: ShareSumOrderByAggregateInput;
  };

  export type ShareScalarWhereWithAggregatesInput = {
    AND?: ShareScalarWhereWithAggregatesInput | ShareScalarWhereWithAggregatesInput[];
    OR?: ShareScalarWhereWithAggregatesInput[];
    NOT?: ShareScalarWhereWithAggregatesInput | ShareScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Share'> | number;
    postId?: IntWithAggregatesFilter<'Share'> | number;
    userId?: IntWithAggregatesFilter<'Share'> | number;
    createdAt?: DateTimeWithAggregatesFilter<'Share'> | Date | string;
  };

  export type FeedWhereInput = {
    AND?: FeedWhereInput | FeedWhereInput[];
    OR?: FeedWhereInput[];
    NOT?: FeedWhereInput | FeedWhereInput[];
    id?: IntFilter<'Feed'> | number;
    postId?: IntFilter<'Feed'> | number;
    userId?: IntFilter<'Feed'> | number;
    createdAt?: DateTimeFilter<'Feed'> | Date | string;
    post?: XOR<PostScalarRelationFilter, PostWhereInput>;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type FeedOrderByWithRelationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    post?: PostOrderByWithRelationInput;
    user?: UserOrderByWithRelationInput;
  };

  export type FeedWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      postId_userId?: FeedPostIdUserIdCompoundUniqueInput;
      AND?: FeedWhereInput | FeedWhereInput[];
      OR?: FeedWhereInput[];
      NOT?: FeedWhereInput | FeedWhereInput[];
      postId?: IntFilter<'Feed'> | number;
      userId?: IntFilter<'Feed'> | number;
      createdAt?: DateTimeFilter<'Feed'> | Date | string;
      post?: XOR<PostScalarRelationFilter, PostWhereInput>;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'postId_userId'
  >;

  export type FeedOrderByWithAggregationInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    _count?: FeedCountOrderByAggregateInput;
    _avg?: FeedAvgOrderByAggregateInput;
    _max?: FeedMaxOrderByAggregateInput;
    _min?: FeedMinOrderByAggregateInput;
    _sum?: FeedSumOrderByAggregateInput;
  };

  export type FeedScalarWhereWithAggregatesInput = {
    AND?: FeedScalarWhereWithAggregatesInput | FeedScalarWhereWithAggregatesInput[];
    OR?: FeedScalarWhereWithAggregatesInput[];
    NOT?: FeedScalarWhereWithAggregatesInput | FeedScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Feed'> | number;
    postId?: IntWithAggregatesFilter<'Feed'> | number;
    userId?: IntWithAggregatesFilter<'Feed'> | number;
    createdAt?: DateTimeWithAggregatesFilter<'Feed'> | Date | string;
  };

  export type FeedTrackWhereInput = {
    AND?: FeedTrackWhereInput | FeedTrackWhereInput[];
    OR?: FeedTrackWhereInput[];
    NOT?: FeedTrackWhereInput | FeedTrackWhereInput[];
    id?: IntFilter<'FeedTrack'> | number;
    userId?: IntFilter<'FeedTrack'> | number;
    lastSeen?: DateTimeFilter<'FeedTrack'> | Date | string;
    user?: XOR<UserScalarRelationFilter, UserWhereInput>;
  };

  export type FeedTrackOrderByWithRelationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    lastSeen?: SortOrder;
    user?: UserOrderByWithRelationInput;
  };

  export type FeedTrackWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      userId?: number;
      AND?: FeedTrackWhereInput | FeedTrackWhereInput[];
      OR?: FeedTrackWhereInput[];
      NOT?: FeedTrackWhereInput | FeedTrackWhereInput[];
      lastSeen?: DateTimeFilter<'FeedTrack'> | Date | string;
      user?: XOR<UserScalarRelationFilter, UserWhereInput>;
    },
    'id' | 'userId'
  >;

  export type FeedTrackOrderByWithAggregationInput = {
    id?: SortOrder;
    userId?: SortOrder;
    lastSeen?: SortOrder;
    _count?: FeedTrackCountOrderByAggregateInput;
    _avg?: FeedTrackAvgOrderByAggregateInput;
    _max?: FeedTrackMaxOrderByAggregateInput;
    _min?: FeedTrackMinOrderByAggregateInput;
    _sum?: FeedTrackSumOrderByAggregateInput;
  };

  export type FeedTrackScalarWhereWithAggregatesInput = {
    AND?: FeedTrackScalarWhereWithAggregatesInput | FeedTrackScalarWhereWithAggregatesInput[];
    OR?: FeedTrackScalarWhereWithAggregatesInput[];
    NOT?: FeedTrackScalarWhereWithAggregatesInput | FeedTrackScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'FeedTrack'> | number;
    userId?: IntWithAggregatesFilter<'FeedTrack'> | number;
    lastSeen?: DateTimeWithAggregatesFilter<'FeedTrack'> | Date | string;
  };

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[];
    OR?: NotificationWhereInput[];
    NOT?: NotificationWhereInput | NotificationWhereInput[];
    id?: IntFilter<'Notification'> | number;
    recipientId?: IntFilter<'Notification'> | number;
    senderId?: IntNullableFilter<'Notification'> | number | null;
    type?: EnumNotificationTypeFilter<'Notification'> | $Enums.NotificationType;
    message?: StringFilter<'Notification'> | string;
    link?: StringNullableFilter<'Notification'> | string | null;
    read?: BoolFilter<'Notification'> | boolean;
    createdAt?: DateTimeFilter<'Notification'> | Date | string;
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>;
    sender?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null;
  };

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrderInput | SortOrder;
    type?: SortOrder;
    message?: SortOrder;
    link?: SortOrderInput | SortOrder;
    read?: SortOrder;
    createdAt?: SortOrder;
    recipient?: UserOrderByWithRelationInput;
    sender?: UserOrderByWithRelationInput;
  };

  export type NotificationWhereUniqueInput = Prisma.AtLeast<
    {
      id?: number;
      AND?: NotificationWhereInput | NotificationWhereInput[];
      OR?: NotificationWhereInput[];
      NOT?: NotificationWhereInput | NotificationWhereInput[];
      recipientId?: IntFilter<'Notification'> | number;
      senderId?: IntNullableFilter<'Notification'> | number | null;
      type?: EnumNotificationTypeFilter<'Notification'> | $Enums.NotificationType;
      message?: StringFilter<'Notification'> | string;
      link?: StringNullableFilter<'Notification'> | string | null;
      read?: BoolFilter<'Notification'> | boolean;
      createdAt?: DateTimeFilter<'Notification'> | Date | string;
      recipient?: XOR<UserScalarRelationFilter, UserWhereInput>;
      sender?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null;
    },
    'id'
  >;

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrderInput | SortOrder;
    type?: SortOrder;
    message?: SortOrder;
    link?: SortOrderInput | SortOrder;
    read?: SortOrder;
    createdAt?: SortOrder;
    _count?: NotificationCountOrderByAggregateInput;
    _avg?: NotificationAvgOrderByAggregateInput;
    _max?: NotificationMaxOrderByAggregateInput;
    _min?: NotificationMinOrderByAggregateInput;
    _sum?: NotificationSumOrderByAggregateInput;
  };

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[];
    OR?: NotificationScalarWhereWithAggregatesInput[];
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[];
    id?: IntWithAggregatesFilter<'Notification'> | number;
    recipientId?: IntWithAggregatesFilter<'Notification'> | number;
    senderId?: IntNullableWithAggregatesFilter<'Notification'> | number | null;
    type?: EnumNotificationTypeWithAggregatesFilter<'Notification'> | $Enums.NotificationType;
    message?: StringWithAggregatesFilter<'Notification'> | string;
    link?: StringNullableWithAggregatesFilter<'Notification'> | string | null;
    read?: BoolWithAggregatesFilter<'Notification'> | boolean;
    createdAt?: DateTimeWithAggregatesFilter<'Notification'> | Date | string;
  };

  export type UserCreateInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type UserCreateManyInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
  };

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
  };

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
  };

  export type UserProfileCreateInput = {
    bio?: string | null;
    company?: string | null;
    location?: string | null;
    profilePic?: string | null;
    coverPic?: string | null;
    birthDate?: Date | string | null;
    gender?: $Enums.Gender | null;
    phone?: string | null;
    interests?: UserProfileCreateinterestsInput | string[];
    github?: string | null;
    linkedin?: string | null;
    twitter?: string | null;
    leetcode?: string | null;
    instagram?: string | null;
    website?: string | null;
    resumeLink?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    user: UserCreateNestedOneWithoutUserProfileInput;
  };

  export type UserProfileUncheckedCreateInput = {
    id?: number;
    userId: number;
    bio?: string | null;
    company?: string | null;
    location?: string | null;
    profilePic?: string | null;
    coverPic?: string | null;
    birthDate?: Date | string | null;
    gender?: $Enums.Gender | null;
    phone?: string | null;
    interests?: UserProfileCreateinterestsInput | string[];
    github?: string | null;
    linkedin?: string | null;
    twitter?: string | null;
    leetcode?: string | null;
    instagram?: string | null;
    website?: string | null;
    resumeLink?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserProfileUpdateInput = {
    bio?: NullableStringFieldUpdateOperationsInput | string | null;
    company?: NullableStringFieldUpdateOperationsInput | string | null;
    location?: NullableStringFieldUpdateOperationsInput | string | null;
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null;
    coverPic?: NullableStringFieldUpdateOperationsInput | string | null;
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    interests?: UserProfileUpdateinterestsInput | string[];
    github?: NullableStringFieldUpdateOperationsInput | string | null;
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null;
    twitter?: NullableStringFieldUpdateOperationsInput | string | null;
    leetcode?: NullableStringFieldUpdateOperationsInput | string | null;
    instagram?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    resumeLink?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutUserProfileNestedInput;
  };

  export type UserProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    bio?: NullableStringFieldUpdateOperationsInput | string | null;
    company?: NullableStringFieldUpdateOperationsInput | string | null;
    location?: NullableStringFieldUpdateOperationsInput | string | null;
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null;
    coverPic?: NullableStringFieldUpdateOperationsInput | string | null;
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    interests?: UserProfileUpdateinterestsInput | string[];
    github?: NullableStringFieldUpdateOperationsInput | string | null;
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null;
    twitter?: NullableStringFieldUpdateOperationsInput | string | null;
    leetcode?: NullableStringFieldUpdateOperationsInput | string | null;
    instagram?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    resumeLink?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserProfileCreateManyInput = {
    id?: number;
    userId: number;
    bio?: string | null;
    company?: string | null;
    location?: string | null;
    profilePic?: string | null;
    coverPic?: string | null;
    birthDate?: Date | string | null;
    gender?: $Enums.Gender | null;
    phone?: string | null;
    interests?: UserProfileCreateinterestsInput | string[];
    github?: string | null;
    linkedin?: string | null;
    twitter?: string | null;
    leetcode?: string | null;
    instagram?: string | null;
    website?: string | null;
    resumeLink?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserProfileUpdateManyMutationInput = {
    bio?: NullableStringFieldUpdateOperationsInput | string | null;
    company?: NullableStringFieldUpdateOperationsInput | string | null;
    location?: NullableStringFieldUpdateOperationsInput | string | null;
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null;
    coverPic?: NullableStringFieldUpdateOperationsInput | string | null;
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    interests?: UserProfileUpdateinterestsInput | string[];
    github?: NullableStringFieldUpdateOperationsInput | string | null;
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null;
    twitter?: NullableStringFieldUpdateOperationsInput | string | null;
    leetcode?: NullableStringFieldUpdateOperationsInput | string | null;
    instagram?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    resumeLink?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    bio?: NullableStringFieldUpdateOperationsInput | string | null;
    company?: NullableStringFieldUpdateOperationsInput | string | null;
    location?: NullableStringFieldUpdateOperationsInput | string | null;
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null;
    coverPic?: NullableStringFieldUpdateOperationsInput | string | null;
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    interests?: UserProfileUpdateinterestsInput | string[];
    github?: NullableStringFieldUpdateOperationsInput | string | null;
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null;
    twitter?: NullableStringFieldUpdateOperationsInput | string | null;
    leetcode?: NullableStringFieldUpdateOperationsInput | string | null;
    instagram?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    resumeLink?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserHeatmapCreateInput = {
    date: Date | string;
    count: number;
    user: UserCreateNestedOneWithoutHeapmapInput;
  };

  export type UserHeatmapUncheckedCreateInput = {
    id?: number;
    userId: number;
    date: Date | string;
    count: number;
  };

  export type UserHeatmapUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
    user?: UserUpdateOneRequiredWithoutHeapmapNestedInput;
  };

  export type UserHeatmapUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
  };

  export type UserHeatmapCreateManyInput = {
    id?: number;
    userId: number;
    date: Date | string;
    count: number;
  };

  export type UserHeatmapUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
  };

  export type UserHeatmapUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
  };

  export type UserTagStatsCreateInput = {
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutTagStatsInput;
    tag: TagCreateNestedOneWithoutUsersInput;
  };

  export type UserTagStatsUncheckedCreateInput = {
    id?: number;
    userId: number;
    tagId: number;
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
  };

  export type UserTagStatsUpdateInput = {
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutTagStatsNestedInput;
    tag?: TagUpdateOneRequiredWithoutUsersNestedInput;
  };

  export type UserTagStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserTagStatsCreateManyInput = {
    id?: number;
    userId: number;
    tagId: number;
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
  };

  export type UserTagStatsUpdateManyMutationInput = {
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserTagStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostCreateInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    author: UserCreateNestedOneWithoutPostInput;
    tags?: PostTagCreateNestedManyWithoutPostInput;
    comments?: CommentCreateNestedManyWithoutPostInput;
    likes?: LikeCreateNestedManyWithoutPostInput;
    shares?: ShareCreateNestedManyWithoutPostInput;
    feed?: FeedCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput;
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput;
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput;
    shares?: ShareUncheckedCreateNestedManyWithoutPostInput;
    feed?: FeedUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    author?: UserUpdateOneRequiredWithoutPostNestedInput;
    tags?: PostTagUpdateManyWithoutPostNestedInput;
    comments?: CommentUpdateManyWithoutPostNestedInput;
    likes?: LikeUpdateManyWithoutPostNestedInput;
    shares?: ShareUpdateManyWithoutPostNestedInput;
    feed?: FeedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput;
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput;
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput;
    shares?: ShareUncheckedUpdateManyWithoutPostNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type PostCreateManyInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
  };

  export type PostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
  };

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
  };

  export type FollowCreateInput = {
    createdAt?: Date | string;
    follower: UserCreateNestedOneWithoutFollowersInput;
    followed: UserCreateNestedOneWithoutFollowingInput;
  };

  export type FollowUncheckedCreateInput = {
    id?: number;
    followerId: number;
    followedId: number;
    createdAt?: Date | string;
  };

  export type FollowUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    follower?: UserUpdateOneRequiredWithoutFollowersNestedInput;
    followed?: UserUpdateOneRequiredWithoutFollowingNestedInput;
  };

  export type FollowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    followerId?: IntFieldUpdateOperationsInput | number;
    followedId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FollowCreateManyInput = {
    id?: number;
    followerId: number;
    followedId: number;
    createdAt?: Date | string;
  };

  export type FollowUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FollowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    followerId?: IntFieldUpdateOperationsInput | number;
    followedId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagCreateInput = {
    name: string;
    createdAt?: Date | string;
    posts?: PostTagCreateNestedManyWithoutTagInput;
    users?: UserTagStatsCreateNestedManyWithoutTagInput;
    followers?: TagFollowCreateNestedManyWithoutTagInput;
  };

  export type TagUncheckedCreateInput = {
    id?: number;
    name: string;
    createdAt?: Date | string;
    posts?: PostTagUncheckedCreateNestedManyWithoutTagInput;
    users?: UserTagStatsUncheckedCreateNestedManyWithoutTagInput;
    followers?: TagFollowUncheckedCreateNestedManyWithoutTagInput;
  };

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    posts?: PostTagUpdateManyWithoutTagNestedInput;
    users?: UserTagStatsUpdateManyWithoutTagNestedInput;
    followers?: TagFollowUpdateManyWithoutTagNestedInput;
  };

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    posts?: PostTagUncheckedUpdateManyWithoutTagNestedInput;
    users?: UserTagStatsUncheckedUpdateManyWithoutTagNestedInput;
    followers?: TagFollowUncheckedUpdateManyWithoutTagNestedInput;
  };

  export type TagCreateManyInput = {
    id?: number;
    name: string;
    createdAt?: Date | string;
  };

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagCreateInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutTagsInput;
    tag: TagCreateNestedOneWithoutPostsInput;
  };

  export type PostTagUncheckedCreateInput = {
    id?: number;
    postId: number;
    tagId: number;
    createdAt?: Date | string;
  };

  export type PostTagUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutTagsNestedInput;
    tag?: TagUpdateOneRequiredWithoutPostsNestedInput;
  };

  export type PostTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagCreateManyInput = {
    id?: number;
    postId: number;
    tagId: number;
    createdAt?: Date | string;
  };

  export type PostTagUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowCreateInput = {
    createdAt?: Date | string;
    tag: TagCreateNestedOneWithoutFollowersInput;
    user: UserCreateNestedOneWithoutTagFollowsInput;
  };

  export type TagFollowUncheckedCreateInput = {
    id?: number;
    tagId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type TagFollowUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    tag?: TagUpdateOneRequiredWithoutFollowersNestedInput;
    user?: UserUpdateOneRequiredWithoutTagFollowsNestedInput;
  };

  export type TagFollowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowCreateManyInput = {
    id?: number;
    tagId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type TagFollowUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type CommentCreateInput = {
    content: string;
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutCommentsInput;
    author: UserCreateNestedOneWithoutCommentInput;
  };

  export type CommentUncheckedCreateInput = {
    id?: number;
    content: string;
    createdAt?: Date | string;
    postId: number;
    authorId: number;
  };

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput;
    author?: UserUpdateOneRequiredWithoutCommentNestedInput;
  };

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    postId?: IntFieldUpdateOperationsInput | number;
    authorId?: IntFieldUpdateOperationsInput | number;
  };

  export type CommentCreateManyInput = {
    id?: number;
    content: string;
    createdAt?: Date | string;
    postId: number;
    authorId: number;
  };

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    postId?: IntFieldUpdateOperationsInput | number;
    authorId?: IntFieldUpdateOperationsInput | number;
  };

  export type LikeCreateInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutLikesInput;
    user: UserCreateNestedOneWithoutLikeInput;
  };

  export type LikeUncheckedCreateInput = {
    id?: number;
    postId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type LikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutLikesNestedInput;
    user?: UserUpdateOneRequiredWithoutLikeNestedInput;
  };

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type LikeCreateManyInput = {
    id?: number;
    postId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type LikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ShareCreateInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutSharesInput;
    user: UserCreateNestedOneWithoutSharedInput;
  };

  export type ShareUncheckedCreateInput = {
    id?: number;
    postId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type ShareUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutSharesNestedInput;
    user?: UserUpdateOneRequiredWithoutSharedNestedInput;
  };

  export type ShareUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ShareCreateManyInput = {
    id?: number;
    postId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type ShareUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ShareUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedCreateInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutFeedInput;
    user: UserCreateNestedOneWithoutFeedInput;
  };

  export type FeedUncheckedCreateInput = {
    id?: number;
    postId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type FeedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutFeedNestedInput;
    user?: UserUpdateOneRequiredWithoutFeedNestedInput;
  };

  export type FeedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedCreateManyInput = {
    id?: number;
    postId: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type FeedUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedTrackCreateInput = {
    lastSeen: Date | string;
    user: UserCreateNestedOneWithoutFeedTrackInput;
  };

  export type FeedTrackUncheckedCreateInput = {
    id?: number;
    userId: number;
    lastSeen: Date | string;
  };

  export type FeedTrackUpdateInput = {
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutFeedTrackNestedInput;
  };

  export type FeedTrackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedTrackCreateManyInput = {
    id?: number;
    userId: number;
    lastSeen: Date | string;
  };

  export type FeedTrackUpdateManyMutationInput = {
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedTrackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationCreateInput = {
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
    recipient: UserCreateNestedOneWithoutNotificationsReceivedInput;
    sender?: UserCreateNestedOneWithoutNotificationsSentInput;
  };

  export type NotificationUncheckedCreateInput = {
    id?: number;
    recipientId: number;
    senderId?: number | null;
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationUpdateInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    recipient?: UserUpdateOneRequiredWithoutNotificationsReceivedNestedInput;
    sender?: UserUpdateOneWithoutNotificationsSentNestedInput;
  };

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    recipientId?: IntFieldUpdateOperationsInput | number;
    senderId?: NullableIntFieldUpdateOperationsInput | number | null;
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationCreateManyInput = {
    id?: number;
    recipientId: number;
    senderId?: number | null;
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationUpdateManyMutationInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    recipientId?: IntFieldUpdateOperationsInput | number;
    senderId?: NullableIntFieldUpdateOperationsInput | number | null;
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntFilter<$PrismaModel> | number;
  };

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringFilter<$PrismaModel> | string;
  };

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringNullableFilter<$PrismaModel> | string | null;
  };

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    has?: string | StringFieldRefInput<$PrismaModel> | null;
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>;
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>;
    isEmpty?: boolean;
  };

  export type UserProfileNullableScalarRelationFilter = {
    is?: UserProfileWhereInput | null;
    isNot?: UserProfileWhereInput | null;
  };

  export type PostListRelationFilter = {
    every?: PostWhereInput;
    some?: PostWhereInput;
    none?: PostWhereInput;
  };

  export type UserTagStatsListRelationFilter = {
    every?: UserTagStatsWhereInput;
    some?: UserTagStatsWhereInput;
    none?: UserTagStatsWhereInput;
  };

  export type FeedListRelationFilter = {
    every?: FeedWhereInput;
    some?: FeedWhereInput;
    none?: FeedWhereInput;
  };

  export type FeedTrackListRelationFilter = {
    every?: FeedTrackWhereInput;
    some?: FeedTrackWhereInput;
    none?: FeedTrackWhereInput;
  };

  export type UserHeatmapListRelationFilter = {
    every?: UserHeatmapWhereInput;
    some?: UserHeatmapWhereInput;
    none?: UserHeatmapWhereInput;
  };

  export type LikeListRelationFilter = {
    every?: LikeWhereInput;
    some?: LikeWhereInput;
    none?: LikeWhereInput;
  };

  export type CommentListRelationFilter = {
    every?: CommentWhereInput;
    some?: CommentWhereInput;
    none?: CommentWhereInput;
  };

  export type ShareListRelationFilter = {
    every?: ShareWhereInput;
    some?: ShareWhereInput;
    none?: ShareWhereInput;
  };

  export type TagFollowListRelationFilter = {
    every?: TagFollowWhereInput;
    some?: TagFollowWhereInput;
    none?: TagFollowWhereInput;
  };

  export type FollowListRelationFilter = {
    every?: FollowWhereInput;
    some?: FollowWhereInput;
    none?: FollowWhereInput;
  };

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput;
    some?: NotificationWhereInput;
    none?: NotificationWhereInput;
  };

  export type SortOrderInput = {
    sort: SortOrder;
    nulls?: NullsOrder;
  };

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserTagStatsOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type FeedOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type FeedTrackOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserHeatmapOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ShareOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type TagFollowOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    password?: SortOrder;
    name?: SortOrder;
    roles?: SortOrder;
  };

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    password?: SortOrder;
    name?: SortOrder;
  };

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    password?: SortOrder;
    name?: SortOrder;
  };

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number;
    _count?: NestedIntFilter<$PrismaModel>;
    _avg?: NestedFloatFilter<$PrismaModel>;
    _sum?: NestedIntFilter<$PrismaModel>;
    _min?: NestedIntFilter<$PrismaModel>;
    _max?: NestedIntFilter<$PrismaModel>;
  };

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedStringFilter<$PrismaModel>;
    _max?: NestedStringFilter<$PrismaModel>;
  };

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    mode?: QueryMode;
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedStringNullableFilter<$PrismaModel>;
    _max?: NestedStringNullableFilter<$PrismaModel>;
  };

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null;
  };

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null;
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null;
  };

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string;
  };

  export type UserScalarRelationFilter = {
    is?: UserWhereInput;
    isNot?: UserWhereInput;
  };

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    bio?: SortOrder;
    company?: SortOrder;
    location?: SortOrder;
    profilePic?: SortOrder;
    coverPic?: SortOrder;
    birthDate?: SortOrder;
    gender?: SortOrder;
    phone?: SortOrder;
    interests?: SortOrder;
    github?: SortOrder;
    linkedin?: SortOrder;
    twitter?: SortOrder;
    leetcode?: SortOrder;
    instagram?: SortOrder;
    website?: SortOrder;
    resumeLink?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserProfileAvgOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
  };

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    bio?: SortOrder;
    company?: SortOrder;
    location?: SortOrder;
    profilePic?: SortOrder;
    coverPic?: SortOrder;
    birthDate?: SortOrder;
    gender?: SortOrder;
    phone?: SortOrder;
    github?: SortOrder;
    linkedin?: SortOrder;
    twitter?: SortOrder;
    leetcode?: SortOrder;
    instagram?: SortOrder;
    website?: SortOrder;
    resumeLink?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    bio?: SortOrder;
    company?: SortOrder;
    location?: SortOrder;
    profilePic?: SortOrder;
    coverPic?: SortOrder;
    birthDate?: SortOrder;
    gender?: SortOrder;
    phone?: SortOrder;
    github?: SortOrder;
    linkedin?: SortOrder;
    twitter?: SortOrder;
    leetcode?: SortOrder;
    instagram?: SortOrder;
    website?: SortOrder;
    resumeLink?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserProfileSumOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
  };

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedDateTimeNullableFilter<$PrismaModel>;
    _max?: NestedDateTimeNullableFilter<$PrismaModel>;
  };

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null;
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>;
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>;
  };

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedDateTimeFilter<$PrismaModel>;
    _max?: NestedDateTimeFilter<$PrismaModel>;
  };

  export type UserHeatmapUserIdDateCompoundUniqueInput = {
    userId: number;
    date: Date | string;
  };

  export type UserHeatmapCountOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    date?: SortOrder;
    count?: SortOrder;
  };

  export type UserHeatmapAvgOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    count?: SortOrder;
  };

  export type UserHeatmapMaxOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    date?: SortOrder;
    count?: SortOrder;
  };

  export type UserHeatmapMinOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    date?: SortOrder;
    count?: SortOrder;
  };

  export type UserHeatmapSumOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    count?: SortOrder;
  };

  export type TagScalarRelationFilter = {
    is?: TagWhereInput;
    isNot?: TagWhereInput;
  };

  export type UserTagStatsUserIdTagIdCompoundUniqueInput = {
    userId: number;
    tagId: number;
  };

  export type UserTagStatsCountOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
    updatedAt?: SortOrder;
    createdAt?: SortOrder;
  };

  export type UserTagStatsAvgOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
  };

  export type UserTagStatsMaxOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
    updatedAt?: SortOrder;
    createdAt?: SortOrder;
  };

  export type UserTagStatsMinOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
    updatedAt?: SortOrder;
    createdAt?: SortOrder;
  };

  export type UserTagStatsSumOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    tagId?: SortOrder;
    postCount?: SortOrder;
  };

  export type PostTagListRelationFilter = {
    every?: PostTagWhereInput;
    some?: PostTagWhereInput;
    none?: PostTagWhereInput;
  };

  export type PostTagOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
  };

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
  };

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
  };

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
  };

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder;
    authorId?: SortOrder;
    likeCount?: SortOrder;
    commentCount?: SortOrder;
  };

  export type FollowFollowerIdFollowedIdCompoundUniqueInput = {
    followerId: number;
    followedId: number;
  };

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type FollowAvgOrderByAggregateInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
  };

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type FollowSumOrderByAggregateInput = {
    id?: SortOrder;
    followerId?: SortOrder;
    followedId?: SortOrder;
  };

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
  };

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
  };

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    createdAt?: SortOrder;
  };

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type PostScalarRelationFilter = {
    is?: PostWhereInput;
    isNot?: PostWhereInput;
  };

  export type PostTagPostIdTagIdCompoundUniqueInput = {
    postId: number;
    tagId: number;
  };

  export type PostTagCountOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type PostTagAvgOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
  };

  export type PostTagMaxOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type PostTagMinOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type PostTagSumOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    tagId?: SortOrder;
  };

  export type TagFollowTagIdUserIdCompoundUniqueInput = {
    tagId: number;
    userId: number;
  };

  export type TagFollowCountOrderByAggregateInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type TagFollowAvgOrderByAggregateInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
  };

  export type TagFollowMaxOrderByAggregateInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type TagFollowMinOrderByAggregateInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type TagFollowSumOrderByAggregateInput = {
    id?: SortOrder;
    tagId?: SortOrder;
    userId?: SortOrder;
  };

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
  };

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
  };

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
  };

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder;
    content?: SortOrder;
    createdAt?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
  };

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    authorId?: SortOrder;
  };

  export type LikePostIdUserIdCompoundUniqueInput = {
    postId: number;
    userId: number;
  };

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type LikeAvgOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
  };

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type LikeSumOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
  };

  export type SharePostIdUserIdCompoundUniqueInput = {
    postId: number;
    userId: number;
  };

  export type ShareCountOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type ShareAvgOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
  };

  export type ShareMaxOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type ShareMinOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type ShareSumOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
  };

  export type FeedPostIdUserIdCompoundUniqueInput = {
    postId: number;
    userId: number;
  };

  export type FeedCountOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type FeedAvgOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
  };

  export type FeedMaxOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type FeedMinOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
  };

  export type FeedSumOrderByAggregateInput = {
    id?: SortOrder;
    postId?: SortOrder;
    userId?: SortOrder;
  };

  export type FeedTrackCountOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    lastSeen?: SortOrder;
  };

  export type FeedTrackAvgOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
  };

  export type FeedTrackMaxOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    lastSeen?: SortOrder;
  };

  export type FeedTrackMinOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
    lastSeen?: SortOrder;
  };

  export type FeedTrackSumOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
  };

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableFilter<$PrismaModel> | number | null;
  };

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType;
  };

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolFilter<$PrismaModel> | boolean;
  };

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null;
    isNot?: UserWhereInput | null;
  };

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrder;
    type?: SortOrder;
    message?: SortOrder;
    link?: SortOrder;
    read?: SortOrder;
    createdAt?: SortOrder;
  };

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrder;
  };

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrder;
    type?: SortOrder;
    message?: SortOrder;
    link?: SortOrder;
    read?: SortOrder;
    createdAt?: SortOrder;
  };

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrder;
    type?: SortOrder;
    message?: SortOrder;
    link?: SortOrder;
    read?: SortOrder;
    createdAt?: SortOrder;
  };

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder;
    recipientId?: SortOrder;
    senderId?: SortOrder;
  };

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _avg?: NestedFloatNullableFilter<$PrismaModel>;
    _sum?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedIntNullableFilter<$PrismaModel>;
    _max?: NestedIntNullableFilter<$PrismaModel>;
  };

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>;
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>;
  };

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedBoolFilter<$PrismaModel>;
    _max?: NestedBoolFilter<$PrismaModel>;
  };

  export type UserCreaterolesInput = {
    set: string[];
  };

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>;
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput;
    connect?: UserProfileWhereUniqueInput;
  };

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?:
      | XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
      | PostCreateWithoutAuthorInput[]
      | PostUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | PostCreateOrConnectWithoutAuthorInput
      | PostCreateOrConnectWithoutAuthorInput[];
    createMany?: PostCreateManyAuthorInputEnvelope;
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[];
  };

  export type UserTagStatsCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutUserInput, UserTagStatsUncheckedCreateWithoutUserInput>
      | UserTagStatsCreateWithoutUserInput[]
      | UserTagStatsUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutUserInput
      | UserTagStatsCreateOrConnectWithoutUserInput[];
    createMany?: UserTagStatsCreateManyUserInputEnvelope;
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
  };

  export type FeedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>
      | FeedCreateWithoutUserInput[]
      | FeedUncheckedCreateWithoutUserInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[];
    createMany?: FeedCreateManyUserInputEnvelope;
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
  };

  export type FeedTrackCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<FeedTrackCreateWithoutUserInput, FeedTrackUncheckedCreateWithoutUserInput>
      | FeedTrackCreateWithoutUserInput[]
      | FeedTrackUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | FeedTrackCreateOrConnectWithoutUserInput
      | FeedTrackCreateOrConnectWithoutUserInput[];
    createMany?: FeedTrackCreateManyUserInputEnvelope;
    connect?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
  };

  export type UserHeatmapCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<UserHeatmapCreateWithoutUserInput, UserHeatmapUncheckedCreateWithoutUserInput>
      | UserHeatmapCreateWithoutUserInput[]
      | UserHeatmapUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserHeatmapCreateOrConnectWithoutUserInput
      | UserHeatmapCreateOrConnectWithoutUserInput[];
    createMany?: UserHeatmapCreateManyUserInputEnvelope;
    connect?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
  };

  export type LikeCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
      | LikeCreateWithoutUserInput[]
      | LikeUncheckedCreateWithoutUserInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[];
    createMany?: LikeCreateManyUserInputEnvelope;
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
  };

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?:
      | XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
      | CommentCreateWithoutAuthorInput[]
      | CommentUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutAuthorInput
      | CommentCreateOrConnectWithoutAuthorInput[];
    createMany?: CommentCreateManyAuthorInputEnvelope;
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
  };

  export type ShareCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>
      | ShareCreateWithoutUserInput[]
      | ShareUncheckedCreateWithoutUserInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutUserInput | ShareCreateOrConnectWithoutUserInput[];
    createMany?: ShareCreateManyUserInputEnvelope;
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
  };

  export type TagFollowCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<TagFollowCreateWithoutUserInput, TagFollowUncheckedCreateWithoutUserInput>
      | TagFollowCreateWithoutUserInput[]
      | TagFollowUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutUserInput
      | TagFollowCreateOrConnectWithoutUserInput[];
    createMany?: TagFollowCreateManyUserInputEnvelope;
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
  };

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?:
      | XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
      | FollowCreateWithoutFollowerInput[]
      | FollowUncheckedCreateWithoutFollowerInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowerInput
      | FollowCreateOrConnectWithoutFollowerInput[];
    createMany?: FollowCreateManyFollowerInputEnvelope;
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
  };

  export type FollowCreateNestedManyWithoutFollowedInput = {
    create?:
      | XOR<FollowCreateWithoutFollowedInput, FollowUncheckedCreateWithoutFollowedInput>
      | FollowCreateWithoutFollowedInput[]
      | FollowUncheckedCreateWithoutFollowedInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowedInput
      | FollowCreateOrConnectWithoutFollowedInput[];
    createMany?: FollowCreateManyFollowedInputEnvelope;
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
  };

  export type NotificationCreateNestedManyWithoutSenderInput = {
    create?:
      | XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
      | NotificationCreateWithoutSenderInput[]
      | NotificationUncheckedCreateWithoutSenderInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutSenderInput
      | NotificationCreateOrConnectWithoutSenderInput[];
    createMany?: NotificationCreateManySenderInputEnvelope;
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
  };

  export type NotificationCreateNestedManyWithoutRecipientInput = {
    create?:
      | XOR<
          NotificationCreateWithoutRecipientInput,
          NotificationUncheckedCreateWithoutRecipientInput
        >
      | NotificationCreateWithoutRecipientInput[]
      | NotificationUncheckedCreateWithoutRecipientInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutRecipientInput
      | NotificationCreateOrConnectWithoutRecipientInput[];
    createMany?: NotificationCreateManyRecipientInputEnvelope;
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
  };

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>;
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput;
    connect?: UserProfileWhereUniqueInput;
  };

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?:
      | XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
      | PostCreateWithoutAuthorInput[]
      | PostUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | PostCreateOrConnectWithoutAuthorInput
      | PostCreateOrConnectWithoutAuthorInput[];
    createMany?: PostCreateManyAuthorInputEnvelope;
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[];
  };

  export type UserTagStatsUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutUserInput, UserTagStatsUncheckedCreateWithoutUserInput>
      | UserTagStatsCreateWithoutUserInput[]
      | UserTagStatsUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutUserInput
      | UserTagStatsCreateOrConnectWithoutUserInput[];
    createMany?: UserTagStatsCreateManyUserInputEnvelope;
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
  };

  export type FeedUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>
      | FeedCreateWithoutUserInput[]
      | FeedUncheckedCreateWithoutUserInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[];
    createMany?: FeedCreateManyUserInputEnvelope;
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
  };

  export type FeedTrackUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<FeedTrackCreateWithoutUserInput, FeedTrackUncheckedCreateWithoutUserInput>
      | FeedTrackCreateWithoutUserInput[]
      | FeedTrackUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | FeedTrackCreateOrConnectWithoutUserInput
      | FeedTrackCreateOrConnectWithoutUserInput[];
    createMany?: FeedTrackCreateManyUserInputEnvelope;
    connect?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
  };

  export type UserHeatmapUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<UserHeatmapCreateWithoutUserInput, UserHeatmapUncheckedCreateWithoutUserInput>
      | UserHeatmapCreateWithoutUserInput[]
      | UserHeatmapUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserHeatmapCreateOrConnectWithoutUserInput
      | UserHeatmapCreateOrConnectWithoutUserInput[];
    createMany?: UserHeatmapCreateManyUserInputEnvelope;
    connect?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
  };

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
      | LikeCreateWithoutUserInput[]
      | LikeUncheckedCreateWithoutUserInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[];
    createMany?: LikeCreateManyUserInputEnvelope;
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
  };

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?:
      | XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
      | CommentCreateWithoutAuthorInput[]
      | CommentUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutAuthorInput
      | CommentCreateOrConnectWithoutAuthorInput[];
    createMany?: CommentCreateManyAuthorInputEnvelope;
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
  };

  export type ShareUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>
      | ShareCreateWithoutUserInput[]
      | ShareUncheckedCreateWithoutUserInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutUserInput | ShareCreateOrConnectWithoutUserInput[];
    createMany?: ShareCreateManyUserInputEnvelope;
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
  };

  export type TagFollowUncheckedCreateNestedManyWithoutUserInput = {
    create?:
      | XOR<TagFollowCreateWithoutUserInput, TagFollowUncheckedCreateWithoutUserInput>
      | TagFollowCreateWithoutUserInput[]
      | TagFollowUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutUserInput
      | TagFollowCreateOrConnectWithoutUserInput[];
    createMany?: TagFollowCreateManyUserInputEnvelope;
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
  };

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?:
      | XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
      | FollowCreateWithoutFollowerInput[]
      | FollowUncheckedCreateWithoutFollowerInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowerInput
      | FollowCreateOrConnectWithoutFollowerInput[];
    createMany?: FollowCreateManyFollowerInputEnvelope;
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
  };

  export type FollowUncheckedCreateNestedManyWithoutFollowedInput = {
    create?:
      | XOR<FollowCreateWithoutFollowedInput, FollowUncheckedCreateWithoutFollowedInput>
      | FollowCreateWithoutFollowedInput[]
      | FollowUncheckedCreateWithoutFollowedInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowedInput
      | FollowCreateOrConnectWithoutFollowedInput[];
    createMany?: FollowCreateManyFollowedInputEnvelope;
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
  };

  export type NotificationUncheckedCreateNestedManyWithoutSenderInput = {
    create?:
      | XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
      | NotificationCreateWithoutSenderInput[]
      | NotificationUncheckedCreateWithoutSenderInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutSenderInput
      | NotificationCreateOrConnectWithoutSenderInput[];
    createMany?: NotificationCreateManySenderInputEnvelope;
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
  };

  export type NotificationUncheckedCreateNestedManyWithoutRecipientInput = {
    create?:
      | XOR<
          NotificationCreateWithoutRecipientInput,
          NotificationUncheckedCreateWithoutRecipientInput
        >
      | NotificationCreateWithoutRecipientInput[]
      | NotificationUncheckedCreateWithoutRecipientInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutRecipientInput
      | NotificationCreateOrConnectWithoutRecipientInput[];
    createMany?: NotificationCreateManyRecipientInputEnvelope;
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
  };

  export type StringFieldUpdateOperationsInput = {
    set?: string;
  };

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null;
  };

  export type UserUpdaterolesInput = {
    set?: string[];
    push?: string | string[];
  };

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>;
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput;
    upsert?: UserProfileUpsertWithoutUserInput;
    disconnect?: UserProfileWhereInput | boolean;
    delete?: UserProfileWhereInput | boolean;
    connect?: UserProfileWhereUniqueInput;
    update?: XOR<
      XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>,
      UserProfileUncheckedUpdateWithoutUserInput
    >;
  };

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?:
      | XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
      | PostCreateWithoutAuthorInput[]
      | PostUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | PostCreateOrConnectWithoutAuthorInput
      | PostCreateOrConnectWithoutAuthorInput[];
    upsert?:
      | PostUpsertWithWhereUniqueWithoutAuthorInput
      | PostUpsertWithWhereUniqueWithoutAuthorInput[];
    createMany?: PostCreateManyAuthorInputEnvelope;
    set?: PostWhereUniqueInput | PostWhereUniqueInput[];
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[];
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[];
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[];
    update?:
      | PostUpdateWithWhereUniqueWithoutAuthorInput
      | PostUpdateWithWhereUniqueWithoutAuthorInput[];
    updateMany?:
      | PostUpdateManyWithWhereWithoutAuthorInput
      | PostUpdateManyWithWhereWithoutAuthorInput[];
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[];
  };

  export type UserTagStatsUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutUserInput, UserTagStatsUncheckedCreateWithoutUserInput>
      | UserTagStatsCreateWithoutUserInput[]
      | UserTagStatsUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutUserInput
      | UserTagStatsCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserTagStatsUpsertWithWhereUniqueWithoutUserInput
      | UserTagStatsUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserTagStatsCreateManyUserInputEnvelope;
    set?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    disconnect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    delete?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    update?:
      | UserTagStatsUpdateWithWhereUniqueWithoutUserInput
      | UserTagStatsUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserTagStatsUpdateManyWithWhereWithoutUserInput
      | UserTagStatsUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserTagStatsScalarWhereInput | UserTagStatsScalarWhereInput[];
  };

  export type FeedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>
      | FeedCreateWithoutUserInput[]
      | FeedUncheckedCreateWithoutUserInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[];
    upsert?:
      | FeedUpsertWithWhereUniqueWithoutUserInput
      | FeedUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: FeedCreateManyUserInputEnvelope;
    set?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    disconnect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    delete?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    update?:
      | FeedUpdateWithWhereUniqueWithoutUserInput
      | FeedUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | FeedUpdateManyWithWhereWithoutUserInput
      | FeedUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: FeedScalarWhereInput | FeedScalarWhereInput[];
  };

  export type FeedTrackUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<FeedTrackCreateWithoutUserInput, FeedTrackUncheckedCreateWithoutUserInput>
      | FeedTrackCreateWithoutUserInput[]
      | FeedTrackUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | FeedTrackCreateOrConnectWithoutUserInput
      | FeedTrackCreateOrConnectWithoutUserInput[];
    upsert?:
      | FeedTrackUpsertWithWhereUniqueWithoutUserInput
      | FeedTrackUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: FeedTrackCreateManyUserInputEnvelope;
    set?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    disconnect?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    delete?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    connect?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    update?:
      | FeedTrackUpdateWithWhereUniqueWithoutUserInput
      | FeedTrackUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | FeedTrackUpdateManyWithWhereWithoutUserInput
      | FeedTrackUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: FeedTrackScalarWhereInput | FeedTrackScalarWhereInput[];
  };

  export type UserHeatmapUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<UserHeatmapCreateWithoutUserInput, UserHeatmapUncheckedCreateWithoutUserInput>
      | UserHeatmapCreateWithoutUserInput[]
      | UserHeatmapUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserHeatmapCreateOrConnectWithoutUserInput
      | UserHeatmapCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserHeatmapUpsertWithWhereUniqueWithoutUserInput
      | UserHeatmapUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserHeatmapCreateManyUserInputEnvelope;
    set?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    disconnect?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    delete?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    connect?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    update?:
      | UserHeatmapUpdateWithWhereUniqueWithoutUserInput
      | UserHeatmapUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserHeatmapUpdateManyWithWhereWithoutUserInput
      | UserHeatmapUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserHeatmapScalarWhereInput | UserHeatmapScalarWhereInput[];
  };

  export type LikeUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
      | LikeCreateWithoutUserInput[]
      | LikeUncheckedCreateWithoutUserInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[];
    upsert?:
      | LikeUpsertWithWhereUniqueWithoutUserInput
      | LikeUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: LikeCreateManyUserInputEnvelope;
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    update?:
      | LikeUpdateWithWhereUniqueWithoutUserInput
      | LikeUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | LikeUpdateManyWithWhereWithoutUserInput
      | LikeUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[];
  };

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?:
      | XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
      | CommentCreateWithoutAuthorInput[]
      | CommentUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutAuthorInput
      | CommentCreateOrConnectWithoutAuthorInput[];
    upsert?:
      | CommentUpsertWithWhereUniqueWithoutAuthorInput
      | CommentUpsertWithWhereUniqueWithoutAuthorInput[];
    createMany?: CommentCreateManyAuthorInputEnvelope;
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    update?:
      | CommentUpdateWithWhereUniqueWithoutAuthorInput
      | CommentUpdateWithWhereUniqueWithoutAuthorInput[];
    updateMany?:
      | CommentUpdateManyWithWhereWithoutAuthorInput
      | CommentUpdateManyWithWhereWithoutAuthorInput[];
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[];
  };

  export type ShareUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>
      | ShareCreateWithoutUserInput[]
      | ShareUncheckedCreateWithoutUserInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutUserInput | ShareCreateOrConnectWithoutUserInput[];
    upsert?:
      | ShareUpsertWithWhereUniqueWithoutUserInput
      | ShareUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: ShareCreateManyUserInputEnvelope;
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    update?:
      | ShareUpdateWithWhereUniqueWithoutUserInput
      | ShareUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | ShareUpdateManyWithWhereWithoutUserInput
      | ShareUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[];
  };

  export type TagFollowUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<TagFollowCreateWithoutUserInput, TagFollowUncheckedCreateWithoutUserInput>
      | TagFollowCreateWithoutUserInput[]
      | TagFollowUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutUserInput
      | TagFollowCreateOrConnectWithoutUserInput[];
    upsert?:
      | TagFollowUpsertWithWhereUniqueWithoutUserInput
      | TagFollowUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: TagFollowCreateManyUserInputEnvelope;
    set?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    disconnect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    delete?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    update?:
      | TagFollowUpdateWithWhereUniqueWithoutUserInput
      | TagFollowUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | TagFollowUpdateManyWithWhereWithoutUserInput
      | TagFollowUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: TagFollowScalarWhereInput | TagFollowScalarWhereInput[];
  };

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?:
      | XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
      | FollowCreateWithoutFollowerInput[]
      | FollowUncheckedCreateWithoutFollowerInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowerInput
      | FollowCreateOrConnectWithoutFollowerInput[];
    upsert?:
      | FollowUpsertWithWhereUniqueWithoutFollowerInput
      | FollowUpsertWithWhereUniqueWithoutFollowerInput[];
    createMany?: FollowCreateManyFollowerInputEnvelope;
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    update?:
      | FollowUpdateWithWhereUniqueWithoutFollowerInput
      | FollowUpdateWithWhereUniqueWithoutFollowerInput[];
    updateMany?:
      | FollowUpdateManyWithWhereWithoutFollowerInput
      | FollowUpdateManyWithWhereWithoutFollowerInput[];
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[];
  };

  export type FollowUpdateManyWithoutFollowedNestedInput = {
    create?:
      | XOR<FollowCreateWithoutFollowedInput, FollowUncheckedCreateWithoutFollowedInput>
      | FollowCreateWithoutFollowedInput[]
      | FollowUncheckedCreateWithoutFollowedInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowedInput
      | FollowCreateOrConnectWithoutFollowedInput[];
    upsert?:
      | FollowUpsertWithWhereUniqueWithoutFollowedInput
      | FollowUpsertWithWhereUniqueWithoutFollowedInput[];
    createMany?: FollowCreateManyFollowedInputEnvelope;
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    update?:
      | FollowUpdateWithWhereUniqueWithoutFollowedInput
      | FollowUpdateWithWhereUniqueWithoutFollowedInput[];
    updateMany?:
      | FollowUpdateManyWithWhereWithoutFollowedInput
      | FollowUpdateManyWithWhereWithoutFollowedInput[];
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[];
  };

  export type NotificationUpdateManyWithoutSenderNestedInput = {
    create?:
      | XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
      | NotificationCreateWithoutSenderInput[]
      | NotificationUncheckedCreateWithoutSenderInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutSenderInput
      | NotificationCreateOrConnectWithoutSenderInput[];
    upsert?:
      | NotificationUpsertWithWhereUniqueWithoutSenderInput
      | NotificationUpsertWithWhereUniqueWithoutSenderInput[];
    createMany?: NotificationCreateManySenderInputEnvelope;
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    update?:
      | NotificationUpdateWithWhereUniqueWithoutSenderInput
      | NotificationUpdateWithWhereUniqueWithoutSenderInput[];
    updateMany?:
      | NotificationUpdateManyWithWhereWithoutSenderInput
      | NotificationUpdateManyWithWhereWithoutSenderInput[];
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
  };

  export type NotificationUpdateManyWithoutRecipientNestedInput = {
    create?:
      | XOR<
          NotificationCreateWithoutRecipientInput,
          NotificationUncheckedCreateWithoutRecipientInput
        >
      | NotificationCreateWithoutRecipientInput[]
      | NotificationUncheckedCreateWithoutRecipientInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutRecipientInput
      | NotificationCreateOrConnectWithoutRecipientInput[];
    upsert?:
      | NotificationUpsertWithWhereUniqueWithoutRecipientInput
      | NotificationUpsertWithWhereUniqueWithoutRecipientInput[];
    createMany?: NotificationCreateManyRecipientInputEnvelope;
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    update?:
      | NotificationUpdateWithWhereUniqueWithoutRecipientInput
      | NotificationUpdateWithWhereUniqueWithoutRecipientInput[];
    updateMany?:
      | NotificationUpdateManyWithWhereWithoutRecipientInput
      | NotificationUpdateManyWithWhereWithoutRecipientInput[];
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
  };

  export type IntFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>;
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput;
    upsert?: UserProfileUpsertWithoutUserInput;
    disconnect?: UserProfileWhereInput | boolean;
    delete?: UserProfileWhereInput | boolean;
    connect?: UserProfileWhereUniqueInput;
    update?: XOR<
      XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>,
      UserProfileUncheckedUpdateWithoutUserInput
    >;
  };

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?:
      | XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
      | PostCreateWithoutAuthorInput[]
      | PostUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | PostCreateOrConnectWithoutAuthorInput
      | PostCreateOrConnectWithoutAuthorInput[];
    upsert?:
      | PostUpsertWithWhereUniqueWithoutAuthorInput
      | PostUpsertWithWhereUniqueWithoutAuthorInput[];
    createMany?: PostCreateManyAuthorInputEnvelope;
    set?: PostWhereUniqueInput | PostWhereUniqueInput[];
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[];
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[];
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[];
    update?:
      | PostUpdateWithWhereUniqueWithoutAuthorInput
      | PostUpdateWithWhereUniqueWithoutAuthorInput[];
    updateMany?:
      | PostUpdateManyWithWhereWithoutAuthorInput
      | PostUpdateManyWithWhereWithoutAuthorInput[];
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[];
  };

  export type UserTagStatsUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutUserInput, UserTagStatsUncheckedCreateWithoutUserInput>
      | UserTagStatsCreateWithoutUserInput[]
      | UserTagStatsUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutUserInput
      | UserTagStatsCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserTagStatsUpsertWithWhereUniqueWithoutUserInput
      | UserTagStatsUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserTagStatsCreateManyUserInputEnvelope;
    set?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    disconnect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    delete?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    update?:
      | UserTagStatsUpdateWithWhereUniqueWithoutUserInput
      | UserTagStatsUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserTagStatsUpdateManyWithWhereWithoutUserInput
      | UserTagStatsUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserTagStatsScalarWhereInput | UserTagStatsScalarWhereInput[];
  };

  export type FeedUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>
      | FeedCreateWithoutUserInput[]
      | FeedUncheckedCreateWithoutUserInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutUserInput | FeedCreateOrConnectWithoutUserInput[];
    upsert?:
      | FeedUpsertWithWhereUniqueWithoutUserInput
      | FeedUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: FeedCreateManyUserInputEnvelope;
    set?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    disconnect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    delete?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    update?:
      | FeedUpdateWithWhereUniqueWithoutUserInput
      | FeedUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | FeedUpdateManyWithWhereWithoutUserInput
      | FeedUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: FeedScalarWhereInput | FeedScalarWhereInput[];
  };

  export type FeedTrackUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<FeedTrackCreateWithoutUserInput, FeedTrackUncheckedCreateWithoutUserInput>
      | FeedTrackCreateWithoutUserInput[]
      | FeedTrackUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | FeedTrackCreateOrConnectWithoutUserInput
      | FeedTrackCreateOrConnectWithoutUserInput[];
    upsert?:
      | FeedTrackUpsertWithWhereUniqueWithoutUserInput
      | FeedTrackUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: FeedTrackCreateManyUserInputEnvelope;
    set?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    disconnect?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    delete?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    connect?: FeedTrackWhereUniqueInput | FeedTrackWhereUniqueInput[];
    update?:
      | FeedTrackUpdateWithWhereUniqueWithoutUserInput
      | FeedTrackUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | FeedTrackUpdateManyWithWhereWithoutUserInput
      | FeedTrackUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: FeedTrackScalarWhereInput | FeedTrackScalarWhereInput[];
  };

  export type UserHeatmapUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<UserHeatmapCreateWithoutUserInput, UserHeatmapUncheckedCreateWithoutUserInput>
      | UserHeatmapCreateWithoutUserInput[]
      | UserHeatmapUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | UserHeatmapCreateOrConnectWithoutUserInput
      | UserHeatmapCreateOrConnectWithoutUserInput[];
    upsert?:
      | UserHeatmapUpsertWithWhereUniqueWithoutUserInput
      | UserHeatmapUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: UserHeatmapCreateManyUserInputEnvelope;
    set?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    disconnect?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    delete?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    connect?: UserHeatmapWhereUniqueInput | UserHeatmapWhereUniqueInput[];
    update?:
      | UserHeatmapUpdateWithWhereUniqueWithoutUserInput
      | UserHeatmapUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | UserHeatmapUpdateManyWithWhereWithoutUserInput
      | UserHeatmapUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: UserHeatmapScalarWhereInput | UserHeatmapScalarWhereInput[];
  };

  export type LikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
      | LikeCreateWithoutUserInput[]
      | LikeUncheckedCreateWithoutUserInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[];
    upsert?:
      | LikeUpsertWithWhereUniqueWithoutUserInput
      | LikeUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: LikeCreateManyUserInputEnvelope;
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    update?:
      | LikeUpdateWithWhereUniqueWithoutUserInput
      | LikeUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | LikeUpdateManyWithWhereWithoutUserInput
      | LikeUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[];
  };

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?:
      | XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
      | CommentCreateWithoutAuthorInput[]
      | CommentUncheckedCreateWithoutAuthorInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutAuthorInput
      | CommentCreateOrConnectWithoutAuthorInput[];
    upsert?:
      | CommentUpsertWithWhereUniqueWithoutAuthorInput
      | CommentUpsertWithWhereUniqueWithoutAuthorInput[];
    createMany?: CommentCreateManyAuthorInputEnvelope;
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    update?:
      | CommentUpdateWithWhereUniqueWithoutAuthorInput
      | CommentUpdateWithWhereUniqueWithoutAuthorInput[];
    updateMany?:
      | CommentUpdateManyWithWhereWithoutAuthorInput
      | CommentUpdateManyWithWhereWithoutAuthorInput[];
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[];
  };

  export type ShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>
      | ShareCreateWithoutUserInput[]
      | ShareUncheckedCreateWithoutUserInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutUserInput | ShareCreateOrConnectWithoutUserInput[];
    upsert?:
      | ShareUpsertWithWhereUniqueWithoutUserInput
      | ShareUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: ShareCreateManyUserInputEnvelope;
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    update?:
      | ShareUpdateWithWhereUniqueWithoutUserInput
      | ShareUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | ShareUpdateManyWithWhereWithoutUserInput
      | ShareUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[];
  };

  export type TagFollowUncheckedUpdateManyWithoutUserNestedInput = {
    create?:
      | XOR<TagFollowCreateWithoutUserInput, TagFollowUncheckedCreateWithoutUserInput>
      | TagFollowCreateWithoutUserInput[]
      | TagFollowUncheckedCreateWithoutUserInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutUserInput
      | TagFollowCreateOrConnectWithoutUserInput[];
    upsert?:
      | TagFollowUpsertWithWhereUniqueWithoutUserInput
      | TagFollowUpsertWithWhereUniqueWithoutUserInput[];
    createMany?: TagFollowCreateManyUserInputEnvelope;
    set?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    disconnect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    delete?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    update?:
      | TagFollowUpdateWithWhereUniqueWithoutUserInput
      | TagFollowUpdateWithWhereUniqueWithoutUserInput[];
    updateMany?:
      | TagFollowUpdateManyWithWhereWithoutUserInput
      | TagFollowUpdateManyWithWhereWithoutUserInput[];
    deleteMany?: TagFollowScalarWhereInput | TagFollowScalarWhereInput[];
  };

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?:
      | XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
      | FollowCreateWithoutFollowerInput[]
      | FollowUncheckedCreateWithoutFollowerInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowerInput
      | FollowCreateOrConnectWithoutFollowerInput[];
    upsert?:
      | FollowUpsertWithWhereUniqueWithoutFollowerInput
      | FollowUpsertWithWhereUniqueWithoutFollowerInput[];
    createMany?: FollowCreateManyFollowerInputEnvelope;
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    update?:
      | FollowUpdateWithWhereUniqueWithoutFollowerInput
      | FollowUpdateWithWhereUniqueWithoutFollowerInput[];
    updateMany?:
      | FollowUpdateManyWithWhereWithoutFollowerInput
      | FollowUpdateManyWithWhereWithoutFollowerInput[];
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[];
  };

  export type FollowUncheckedUpdateManyWithoutFollowedNestedInput = {
    create?:
      | XOR<FollowCreateWithoutFollowedInput, FollowUncheckedCreateWithoutFollowedInput>
      | FollowCreateWithoutFollowedInput[]
      | FollowUncheckedCreateWithoutFollowedInput[];
    connectOrCreate?:
      | FollowCreateOrConnectWithoutFollowedInput
      | FollowCreateOrConnectWithoutFollowedInput[];
    upsert?:
      | FollowUpsertWithWhereUniqueWithoutFollowedInput
      | FollowUpsertWithWhereUniqueWithoutFollowedInput[];
    createMany?: FollowCreateManyFollowedInputEnvelope;
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[];
    update?:
      | FollowUpdateWithWhereUniqueWithoutFollowedInput
      | FollowUpdateWithWhereUniqueWithoutFollowedInput[];
    updateMany?:
      | FollowUpdateManyWithWhereWithoutFollowedInput
      | FollowUpdateManyWithWhereWithoutFollowedInput[];
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[];
  };

  export type NotificationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?:
      | XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
      | NotificationCreateWithoutSenderInput[]
      | NotificationUncheckedCreateWithoutSenderInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutSenderInput
      | NotificationCreateOrConnectWithoutSenderInput[];
    upsert?:
      | NotificationUpsertWithWhereUniqueWithoutSenderInput
      | NotificationUpsertWithWhereUniqueWithoutSenderInput[];
    createMany?: NotificationCreateManySenderInputEnvelope;
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    update?:
      | NotificationUpdateWithWhereUniqueWithoutSenderInput
      | NotificationUpdateWithWhereUniqueWithoutSenderInput[];
    updateMany?:
      | NotificationUpdateManyWithWhereWithoutSenderInput
      | NotificationUpdateManyWithWhereWithoutSenderInput[];
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
  };

  export type NotificationUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?:
      | XOR<
          NotificationCreateWithoutRecipientInput,
          NotificationUncheckedCreateWithoutRecipientInput
        >
      | NotificationCreateWithoutRecipientInput[]
      | NotificationUncheckedCreateWithoutRecipientInput[];
    connectOrCreate?:
      | NotificationCreateOrConnectWithoutRecipientInput
      | NotificationCreateOrConnectWithoutRecipientInput[];
    upsert?:
      | NotificationUpsertWithWhereUniqueWithoutRecipientInput
      | NotificationUpsertWithWhereUniqueWithoutRecipientInput[];
    createMany?: NotificationCreateManyRecipientInputEnvelope;
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[];
    update?:
      | NotificationUpdateWithWhereUniqueWithoutRecipientInput
      | NotificationUpdateWithWhereUniqueWithoutRecipientInput[];
    updateMany?:
      | NotificationUpdateManyWithWhereWithoutRecipientInput
      | NotificationUpdateManyWithWhereWithoutRecipientInput[];
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
  };

  export type UserProfileCreateinterestsInput = {
    set: string[];
  };

  export type UserCreateNestedOneWithoutUserProfileInput = {
    create?: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>;
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileInput;
    connect?: UserWhereUniqueInput;
  };

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null;
  };

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null;
  };

  export type UserProfileUpdateinterestsInput = {
    set?: string[];
    push?: string | string[];
  };

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string;
  };

  export type UserUpdateOneRequiredWithoutUserProfileNestedInput = {
    create?: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>;
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileInput;
    upsert?: UserUpsertWithoutUserProfileInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutUserProfileInput, UserUpdateWithoutUserProfileInput>,
      UserUncheckedUpdateWithoutUserProfileInput
    >;
  };

  export type UserCreateNestedOneWithoutHeapmapInput = {
    create?: XOR<UserCreateWithoutHeapmapInput, UserUncheckedCreateWithoutHeapmapInput>;
    connectOrCreate?: UserCreateOrConnectWithoutHeapmapInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutHeapmapNestedInput = {
    create?: XOR<UserCreateWithoutHeapmapInput, UserUncheckedCreateWithoutHeapmapInput>;
    connectOrCreate?: UserCreateOrConnectWithoutHeapmapInput;
    upsert?: UserUpsertWithoutHeapmapInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutHeapmapInput, UserUpdateWithoutHeapmapInput>,
      UserUncheckedUpdateWithoutHeapmapInput
    >;
  };

  export type UserCreateNestedOneWithoutTagStatsInput = {
    create?: XOR<UserCreateWithoutTagStatsInput, UserUncheckedCreateWithoutTagStatsInput>;
    connectOrCreate?: UserCreateOrConnectWithoutTagStatsInput;
    connect?: UserWhereUniqueInput;
  };

  export type TagCreateNestedOneWithoutUsersInput = {
    create?: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>;
    connectOrCreate?: TagCreateOrConnectWithoutUsersInput;
    connect?: TagWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutTagStatsNestedInput = {
    create?: XOR<UserCreateWithoutTagStatsInput, UserUncheckedCreateWithoutTagStatsInput>;
    connectOrCreate?: UserCreateOrConnectWithoutTagStatsInput;
    upsert?: UserUpsertWithoutTagStatsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutTagStatsInput, UserUpdateWithoutTagStatsInput>,
      UserUncheckedUpdateWithoutTagStatsInput
    >;
  };

  export type TagUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>;
    connectOrCreate?: TagCreateOrConnectWithoutUsersInput;
    upsert?: TagUpsertWithoutUsersInput;
    connect?: TagWhereUniqueInput;
    update?: XOR<
      XOR<TagUpdateToOneWithWhereWithoutUsersInput, TagUpdateWithoutUsersInput>,
      TagUncheckedUpdateWithoutUsersInput
    >;
  };

  export type UserCreateNestedOneWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>;
    connectOrCreate?: UserCreateOrConnectWithoutPostInput;
    connect?: UserWhereUniqueInput;
  };

  export type PostTagCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>
      | PostTagCreateWithoutPostInput[]
      | PostTagUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutPostInput
      | PostTagCreateOrConnectWithoutPostInput[];
    createMany?: PostTagCreateManyPostInputEnvelope;
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
  };

  export type CommentCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
      | CommentCreateWithoutPostInput[]
      | CommentUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutPostInput
      | CommentCreateOrConnectWithoutPostInput[];
    createMany?: CommentCreateManyPostInputEnvelope;
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
  };

  export type LikeCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
      | LikeCreateWithoutPostInput[]
      | LikeUncheckedCreateWithoutPostInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[];
    createMany?: LikeCreateManyPostInputEnvelope;
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
  };

  export type ShareCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>
      | ShareCreateWithoutPostInput[]
      | ShareUncheckedCreateWithoutPostInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutPostInput | ShareCreateOrConnectWithoutPostInput[];
    createMany?: ShareCreateManyPostInputEnvelope;
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
  };

  export type FeedCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<FeedCreateWithoutPostInput, FeedUncheckedCreateWithoutPostInput>
      | FeedCreateWithoutPostInput[]
      | FeedUncheckedCreateWithoutPostInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutPostInput | FeedCreateOrConnectWithoutPostInput[];
    createMany?: FeedCreateManyPostInputEnvelope;
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
  };

  export type PostTagUncheckedCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>
      | PostTagCreateWithoutPostInput[]
      | PostTagUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutPostInput
      | PostTagCreateOrConnectWithoutPostInput[];
    createMany?: PostTagCreateManyPostInputEnvelope;
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
  };

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
      | CommentCreateWithoutPostInput[]
      | CommentUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutPostInput
      | CommentCreateOrConnectWithoutPostInput[];
    createMany?: CommentCreateManyPostInputEnvelope;
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
  };

  export type LikeUncheckedCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
      | LikeCreateWithoutPostInput[]
      | LikeUncheckedCreateWithoutPostInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[];
    createMany?: LikeCreateManyPostInputEnvelope;
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
  };

  export type ShareUncheckedCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>
      | ShareCreateWithoutPostInput[]
      | ShareUncheckedCreateWithoutPostInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutPostInput | ShareCreateOrConnectWithoutPostInput[];
    createMany?: ShareCreateManyPostInputEnvelope;
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
  };

  export type FeedUncheckedCreateNestedManyWithoutPostInput = {
    create?:
      | XOR<FeedCreateWithoutPostInput, FeedUncheckedCreateWithoutPostInput>
      | FeedCreateWithoutPostInput[]
      | FeedUncheckedCreateWithoutPostInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutPostInput | FeedCreateOrConnectWithoutPostInput[];
    createMany?: FeedCreateManyPostInputEnvelope;
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
  };

  export type UserUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>;
    connectOrCreate?: UserCreateOrConnectWithoutPostInput;
    upsert?: UserUpsertWithoutPostInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutPostInput, UserUpdateWithoutPostInput>,
      UserUncheckedUpdateWithoutPostInput
    >;
  };

  export type PostTagUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>
      | PostTagCreateWithoutPostInput[]
      | PostTagUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutPostInput
      | PostTagCreateOrConnectWithoutPostInput[];
    upsert?:
      | PostTagUpsertWithWhereUniqueWithoutPostInput
      | PostTagUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: PostTagCreateManyPostInputEnvelope;
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    update?:
      | PostTagUpdateWithWhereUniqueWithoutPostInput
      | PostTagUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | PostTagUpdateManyWithWhereWithoutPostInput
      | PostTagUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[];
  };

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
      | CommentCreateWithoutPostInput[]
      | CommentUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutPostInput
      | CommentCreateOrConnectWithoutPostInput[];
    upsert?:
      | CommentUpsertWithWhereUniqueWithoutPostInput
      | CommentUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: CommentCreateManyPostInputEnvelope;
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    update?:
      | CommentUpdateWithWhereUniqueWithoutPostInput
      | CommentUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | CommentUpdateManyWithWhereWithoutPostInput
      | CommentUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[];
  };

  export type LikeUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
      | LikeCreateWithoutPostInput[]
      | LikeUncheckedCreateWithoutPostInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[];
    upsert?:
      | LikeUpsertWithWhereUniqueWithoutPostInput
      | LikeUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: LikeCreateManyPostInputEnvelope;
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    update?:
      | LikeUpdateWithWhereUniqueWithoutPostInput
      | LikeUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | LikeUpdateManyWithWhereWithoutPostInput
      | LikeUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[];
  };

  export type ShareUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>
      | ShareCreateWithoutPostInput[]
      | ShareUncheckedCreateWithoutPostInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutPostInput | ShareCreateOrConnectWithoutPostInput[];
    upsert?:
      | ShareUpsertWithWhereUniqueWithoutPostInput
      | ShareUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: ShareCreateManyPostInputEnvelope;
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    update?:
      | ShareUpdateWithWhereUniqueWithoutPostInput
      | ShareUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | ShareUpdateManyWithWhereWithoutPostInput
      | ShareUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[];
  };

  export type FeedUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<FeedCreateWithoutPostInput, FeedUncheckedCreateWithoutPostInput>
      | FeedCreateWithoutPostInput[]
      | FeedUncheckedCreateWithoutPostInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutPostInput | FeedCreateOrConnectWithoutPostInput[];
    upsert?:
      | FeedUpsertWithWhereUniqueWithoutPostInput
      | FeedUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: FeedCreateManyPostInputEnvelope;
    set?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    disconnect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    delete?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    update?:
      | FeedUpdateWithWhereUniqueWithoutPostInput
      | FeedUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | FeedUpdateManyWithWhereWithoutPostInput
      | FeedUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: FeedScalarWhereInput | FeedScalarWhereInput[];
  };

  export type PostTagUncheckedUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>
      | PostTagCreateWithoutPostInput[]
      | PostTagUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutPostInput
      | PostTagCreateOrConnectWithoutPostInput[];
    upsert?:
      | PostTagUpsertWithWhereUniqueWithoutPostInput
      | PostTagUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: PostTagCreateManyPostInputEnvelope;
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    update?:
      | PostTagUpdateWithWhereUniqueWithoutPostInput
      | PostTagUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | PostTagUpdateManyWithWhereWithoutPostInput
      | PostTagUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[];
  };

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
      | CommentCreateWithoutPostInput[]
      | CommentUncheckedCreateWithoutPostInput[];
    connectOrCreate?:
      | CommentCreateOrConnectWithoutPostInput
      | CommentCreateOrConnectWithoutPostInput[];
    upsert?:
      | CommentUpsertWithWhereUniqueWithoutPostInput
      | CommentUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: CommentCreateManyPostInputEnvelope;
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[];
    update?:
      | CommentUpdateWithWhereUniqueWithoutPostInput
      | CommentUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | CommentUpdateManyWithWhereWithoutPostInput
      | CommentUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[];
  };

  export type LikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
      | LikeCreateWithoutPostInput[]
      | LikeUncheckedCreateWithoutPostInput[];
    connectOrCreate?: LikeCreateOrConnectWithoutPostInput | LikeCreateOrConnectWithoutPostInput[];
    upsert?:
      | LikeUpsertWithWhereUniqueWithoutPostInput
      | LikeUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: LikeCreateManyPostInputEnvelope;
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[];
    update?:
      | LikeUpdateWithWhereUniqueWithoutPostInput
      | LikeUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | LikeUpdateManyWithWhereWithoutPostInput
      | LikeUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[];
  };

  export type ShareUncheckedUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>
      | ShareCreateWithoutPostInput[]
      | ShareUncheckedCreateWithoutPostInput[];
    connectOrCreate?: ShareCreateOrConnectWithoutPostInput | ShareCreateOrConnectWithoutPostInput[];
    upsert?:
      | ShareUpsertWithWhereUniqueWithoutPostInput
      | ShareUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: ShareCreateManyPostInputEnvelope;
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[];
    update?:
      | ShareUpdateWithWhereUniqueWithoutPostInput
      | ShareUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | ShareUpdateManyWithWhereWithoutPostInput
      | ShareUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[];
  };

  export type FeedUncheckedUpdateManyWithoutPostNestedInput = {
    create?:
      | XOR<FeedCreateWithoutPostInput, FeedUncheckedCreateWithoutPostInput>
      | FeedCreateWithoutPostInput[]
      | FeedUncheckedCreateWithoutPostInput[];
    connectOrCreate?: FeedCreateOrConnectWithoutPostInput | FeedCreateOrConnectWithoutPostInput[];
    upsert?:
      | FeedUpsertWithWhereUniqueWithoutPostInput
      | FeedUpsertWithWhereUniqueWithoutPostInput[];
    createMany?: FeedCreateManyPostInputEnvelope;
    set?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    disconnect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    delete?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    connect?: FeedWhereUniqueInput | FeedWhereUniqueInput[];
    update?:
      | FeedUpdateWithWhereUniqueWithoutPostInput
      | FeedUpdateWithWhereUniqueWithoutPostInput[];
    updateMany?:
      | FeedUpdateManyWithWhereWithoutPostInput
      | FeedUpdateManyWithWhereWithoutPostInput[];
    deleteMany?: FeedScalarWhereInput | FeedScalarWhereInput[];
  };

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput;
    upsert?: UserUpsertWithoutFollowersInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>,
      UserUncheckedUpdateWithoutFollowersInput
    >;
  };

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput;
    upsert?: UserUpsertWithoutFollowingInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>,
      UserUncheckedUpdateWithoutFollowingInput
    >;
  };

  export type PostTagCreateNestedManyWithoutTagInput = {
    create?:
      | XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>
      | PostTagCreateWithoutTagInput[]
      | PostTagUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutTagInput
      | PostTagCreateOrConnectWithoutTagInput[];
    createMany?: PostTagCreateManyTagInputEnvelope;
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
  };

  export type UserTagStatsCreateNestedManyWithoutTagInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutTagInput, UserTagStatsUncheckedCreateWithoutTagInput>
      | UserTagStatsCreateWithoutTagInput[]
      | UserTagStatsUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutTagInput
      | UserTagStatsCreateOrConnectWithoutTagInput[];
    createMany?: UserTagStatsCreateManyTagInputEnvelope;
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
  };

  export type TagFollowCreateNestedManyWithoutTagInput = {
    create?:
      | XOR<TagFollowCreateWithoutTagInput, TagFollowUncheckedCreateWithoutTagInput>
      | TagFollowCreateWithoutTagInput[]
      | TagFollowUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutTagInput
      | TagFollowCreateOrConnectWithoutTagInput[];
    createMany?: TagFollowCreateManyTagInputEnvelope;
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
  };

  export type PostTagUncheckedCreateNestedManyWithoutTagInput = {
    create?:
      | XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>
      | PostTagCreateWithoutTagInput[]
      | PostTagUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutTagInput
      | PostTagCreateOrConnectWithoutTagInput[];
    createMany?: PostTagCreateManyTagInputEnvelope;
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
  };

  export type UserTagStatsUncheckedCreateNestedManyWithoutTagInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutTagInput, UserTagStatsUncheckedCreateWithoutTagInput>
      | UserTagStatsCreateWithoutTagInput[]
      | UserTagStatsUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutTagInput
      | UserTagStatsCreateOrConnectWithoutTagInput[];
    createMany?: UserTagStatsCreateManyTagInputEnvelope;
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
  };

  export type TagFollowUncheckedCreateNestedManyWithoutTagInput = {
    create?:
      | XOR<TagFollowCreateWithoutTagInput, TagFollowUncheckedCreateWithoutTagInput>
      | TagFollowCreateWithoutTagInput[]
      | TagFollowUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutTagInput
      | TagFollowCreateOrConnectWithoutTagInput[];
    createMany?: TagFollowCreateManyTagInputEnvelope;
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
  };

  export type PostTagUpdateManyWithoutTagNestedInput = {
    create?:
      | XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>
      | PostTagCreateWithoutTagInput[]
      | PostTagUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutTagInput
      | PostTagCreateOrConnectWithoutTagInput[];
    upsert?:
      | PostTagUpsertWithWhereUniqueWithoutTagInput
      | PostTagUpsertWithWhereUniqueWithoutTagInput[];
    createMany?: PostTagCreateManyTagInputEnvelope;
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    update?:
      | PostTagUpdateWithWhereUniqueWithoutTagInput
      | PostTagUpdateWithWhereUniqueWithoutTagInput[];
    updateMany?:
      | PostTagUpdateManyWithWhereWithoutTagInput
      | PostTagUpdateManyWithWhereWithoutTagInput[];
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[];
  };

  export type UserTagStatsUpdateManyWithoutTagNestedInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutTagInput, UserTagStatsUncheckedCreateWithoutTagInput>
      | UserTagStatsCreateWithoutTagInput[]
      | UserTagStatsUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutTagInput
      | UserTagStatsCreateOrConnectWithoutTagInput[];
    upsert?:
      | UserTagStatsUpsertWithWhereUniqueWithoutTagInput
      | UserTagStatsUpsertWithWhereUniqueWithoutTagInput[];
    createMany?: UserTagStatsCreateManyTagInputEnvelope;
    set?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    disconnect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    delete?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    update?:
      | UserTagStatsUpdateWithWhereUniqueWithoutTagInput
      | UserTagStatsUpdateWithWhereUniqueWithoutTagInput[];
    updateMany?:
      | UserTagStatsUpdateManyWithWhereWithoutTagInput
      | UserTagStatsUpdateManyWithWhereWithoutTagInput[];
    deleteMany?: UserTagStatsScalarWhereInput | UserTagStatsScalarWhereInput[];
  };

  export type TagFollowUpdateManyWithoutTagNestedInput = {
    create?:
      | XOR<TagFollowCreateWithoutTagInput, TagFollowUncheckedCreateWithoutTagInput>
      | TagFollowCreateWithoutTagInput[]
      | TagFollowUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutTagInput
      | TagFollowCreateOrConnectWithoutTagInput[];
    upsert?:
      | TagFollowUpsertWithWhereUniqueWithoutTagInput
      | TagFollowUpsertWithWhereUniqueWithoutTagInput[];
    createMany?: TagFollowCreateManyTagInputEnvelope;
    set?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    disconnect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    delete?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    update?:
      | TagFollowUpdateWithWhereUniqueWithoutTagInput
      | TagFollowUpdateWithWhereUniqueWithoutTagInput[];
    updateMany?:
      | TagFollowUpdateManyWithWhereWithoutTagInput
      | TagFollowUpdateManyWithWhereWithoutTagInput[];
    deleteMany?: TagFollowScalarWhereInput | TagFollowScalarWhereInput[];
  };

  export type PostTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?:
      | XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>
      | PostTagCreateWithoutTagInput[]
      | PostTagUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | PostTagCreateOrConnectWithoutTagInput
      | PostTagCreateOrConnectWithoutTagInput[];
    upsert?:
      | PostTagUpsertWithWhereUniqueWithoutTagInput
      | PostTagUpsertWithWhereUniqueWithoutTagInput[];
    createMany?: PostTagCreateManyTagInputEnvelope;
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[];
    update?:
      | PostTagUpdateWithWhereUniqueWithoutTagInput
      | PostTagUpdateWithWhereUniqueWithoutTagInput[];
    updateMany?:
      | PostTagUpdateManyWithWhereWithoutTagInput
      | PostTagUpdateManyWithWhereWithoutTagInput[];
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[];
  };

  export type UserTagStatsUncheckedUpdateManyWithoutTagNestedInput = {
    create?:
      | XOR<UserTagStatsCreateWithoutTagInput, UserTagStatsUncheckedCreateWithoutTagInput>
      | UserTagStatsCreateWithoutTagInput[]
      | UserTagStatsUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | UserTagStatsCreateOrConnectWithoutTagInput
      | UserTagStatsCreateOrConnectWithoutTagInput[];
    upsert?:
      | UserTagStatsUpsertWithWhereUniqueWithoutTagInput
      | UserTagStatsUpsertWithWhereUniqueWithoutTagInput[];
    createMany?: UserTagStatsCreateManyTagInputEnvelope;
    set?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    disconnect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    delete?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    connect?: UserTagStatsWhereUniqueInput | UserTagStatsWhereUniqueInput[];
    update?:
      | UserTagStatsUpdateWithWhereUniqueWithoutTagInput
      | UserTagStatsUpdateWithWhereUniqueWithoutTagInput[];
    updateMany?:
      | UserTagStatsUpdateManyWithWhereWithoutTagInput
      | UserTagStatsUpdateManyWithWhereWithoutTagInput[];
    deleteMany?: UserTagStatsScalarWhereInput | UserTagStatsScalarWhereInput[];
  };

  export type TagFollowUncheckedUpdateManyWithoutTagNestedInput = {
    create?:
      | XOR<TagFollowCreateWithoutTagInput, TagFollowUncheckedCreateWithoutTagInput>
      | TagFollowCreateWithoutTagInput[]
      | TagFollowUncheckedCreateWithoutTagInput[];
    connectOrCreate?:
      | TagFollowCreateOrConnectWithoutTagInput
      | TagFollowCreateOrConnectWithoutTagInput[];
    upsert?:
      | TagFollowUpsertWithWhereUniqueWithoutTagInput
      | TagFollowUpsertWithWhereUniqueWithoutTagInput[];
    createMany?: TagFollowCreateManyTagInputEnvelope;
    set?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    disconnect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    delete?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    connect?: TagFollowWhereUniqueInput | TagFollowWhereUniqueInput[];
    update?:
      | TagFollowUpdateWithWhereUniqueWithoutTagInput
      | TagFollowUpdateWithWhereUniqueWithoutTagInput[];
    updateMany?:
      | TagFollowUpdateManyWithWhereWithoutTagInput
      | TagFollowUpdateManyWithWhereWithoutTagInput[];
    deleteMany?: TagFollowScalarWhereInput | TagFollowScalarWhereInput[];
  };

  export type PostCreateNestedOneWithoutTagsInput = {
    create?: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>;
    connectOrCreate?: PostCreateOrConnectWithoutTagsInput;
    connect?: PostWhereUniqueInput;
  };

  export type TagCreateNestedOneWithoutPostsInput = {
    create?: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>;
    connectOrCreate?: TagCreateOrConnectWithoutPostsInput;
    connect?: TagWhereUniqueInput;
  };

  export type PostUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>;
    connectOrCreate?: PostCreateOrConnectWithoutTagsInput;
    upsert?: PostUpsertWithoutTagsInput;
    connect?: PostWhereUniqueInput;
    update?: XOR<
      XOR<PostUpdateToOneWithWhereWithoutTagsInput, PostUpdateWithoutTagsInput>,
      PostUncheckedUpdateWithoutTagsInput
    >;
  };

  export type TagUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>;
    connectOrCreate?: TagCreateOrConnectWithoutPostsInput;
    upsert?: TagUpsertWithoutPostsInput;
    connect?: TagWhereUniqueInput;
    update?: XOR<
      XOR<TagUpdateToOneWithWhereWithoutPostsInput, TagUpdateWithoutPostsInput>,
      TagUncheckedUpdateWithoutPostsInput
    >;
  };

  export type TagCreateNestedOneWithoutFollowersInput = {
    create?: XOR<TagCreateWithoutFollowersInput, TagUncheckedCreateWithoutFollowersInput>;
    connectOrCreate?: TagCreateOrConnectWithoutFollowersInput;
    connect?: TagWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutTagFollowsInput = {
    create?: XOR<UserCreateWithoutTagFollowsInput, UserUncheckedCreateWithoutTagFollowsInput>;
    connectOrCreate?: UserCreateOrConnectWithoutTagFollowsInput;
    connect?: UserWhereUniqueInput;
  };

  export type TagUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<TagCreateWithoutFollowersInput, TagUncheckedCreateWithoutFollowersInput>;
    connectOrCreate?: TagCreateOrConnectWithoutFollowersInput;
    upsert?: TagUpsertWithoutFollowersInput;
    connect?: TagWhereUniqueInput;
    update?: XOR<
      XOR<TagUpdateToOneWithWhereWithoutFollowersInput, TagUpdateWithoutFollowersInput>,
      TagUncheckedUpdateWithoutFollowersInput
    >;
  };

  export type UserUpdateOneRequiredWithoutTagFollowsNestedInput = {
    create?: XOR<UserCreateWithoutTagFollowsInput, UserUncheckedCreateWithoutTagFollowsInput>;
    connectOrCreate?: UserCreateOrConnectWithoutTagFollowsInput;
    upsert?: UserUpsertWithoutTagFollowsInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutTagFollowsInput, UserUpdateWithoutTagFollowsInput>,
      UserUncheckedUpdateWithoutTagFollowsInput
    >;
  };

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>;
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput;
    connect?: PostWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>;
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput;
    connect?: UserWhereUniqueInput;
  };

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>;
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput;
    upsert?: PostUpsertWithoutCommentsInput;
    connect?: PostWhereUniqueInput;
    update?: XOR<
      XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>,
      PostUncheckedUpdateWithoutCommentsInput
    >;
  };

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>;
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput;
    upsert?: UserUpsertWithoutCommentInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>,
      UserUncheckedUpdateWithoutCommentInput
    >;
  };

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>;
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput;
    connect?: PostWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutLikeInput = {
    create?: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>;
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput;
    connect?: UserWhereUniqueInput;
  };

  export type PostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>;
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput;
    upsert?: PostUpsertWithoutLikesInput;
    connect?: PostWhereUniqueInput;
    update?: XOR<
      XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>,
      PostUncheckedUpdateWithoutLikesInput
    >;
  };

  export type UserUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>;
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput;
    upsert?: UserUpsertWithoutLikeInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutLikeInput, UserUpdateWithoutLikeInput>,
      UserUncheckedUpdateWithoutLikeInput
    >;
  };

  export type PostCreateNestedOneWithoutSharesInput = {
    create?: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>;
    connectOrCreate?: PostCreateOrConnectWithoutSharesInput;
    connect?: PostWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutSharedInput = {
    create?: XOR<UserCreateWithoutSharedInput, UserUncheckedCreateWithoutSharedInput>;
    connectOrCreate?: UserCreateOrConnectWithoutSharedInput;
    connect?: UserWhereUniqueInput;
  };

  export type PostUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>;
    connectOrCreate?: PostCreateOrConnectWithoutSharesInput;
    upsert?: PostUpsertWithoutSharesInput;
    connect?: PostWhereUniqueInput;
    update?: XOR<
      XOR<PostUpdateToOneWithWhereWithoutSharesInput, PostUpdateWithoutSharesInput>,
      PostUncheckedUpdateWithoutSharesInput
    >;
  };

  export type UserUpdateOneRequiredWithoutSharedNestedInput = {
    create?: XOR<UserCreateWithoutSharedInput, UserUncheckedCreateWithoutSharedInput>;
    connectOrCreate?: UserCreateOrConnectWithoutSharedInput;
    upsert?: UserUpsertWithoutSharedInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutSharedInput, UserUpdateWithoutSharedInput>,
      UserUncheckedUpdateWithoutSharedInput
    >;
  };

  export type PostCreateNestedOneWithoutFeedInput = {
    create?: XOR<PostCreateWithoutFeedInput, PostUncheckedCreateWithoutFeedInput>;
    connectOrCreate?: PostCreateOrConnectWithoutFeedInput;
    connect?: PostWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutFeedInput = {
    create?: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFeedInput;
    connect?: UserWhereUniqueInput;
  };

  export type PostUpdateOneRequiredWithoutFeedNestedInput = {
    create?: XOR<PostCreateWithoutFeedInput, PostUncheckedCreateWithoutFeedInput>;
    connectOrCreate?: PostCreateOrConnectWithoutFeedInput;
    upsert?: PostUpsertWithoutFeedInput;
    connect?: PostWhereUniqueInput;
    update?: XOR<
      XOR<PostUpdateToOneWithWhereWithoutFeedInput, PostUpdateWithoutFeedInput>,
      PostUncheckedUpdateWithoutFeedInput
    >;
  };

  export type UserUpdateOneRequiredWithoutFeedNestedInput = {
    create?: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFeedInput;
    upsert?: UserUpsertWithoutFeedInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutFeedInput, UserUpdateWithoutFeedInput>,
      UserUncheckedUpdateWithoutFeedInput
    >;
  };

  export type UserCreateNestedOneWithoutFeedTrackInput = {
    create?: XOR<UserCreateWithoutFeedTrackInput, UserUncheckedCreateWithoutFeedTrackInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFeedTrackInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutFeedTrackNestedInput = {
    create?: XOR<UserCreateWithoutFeedTrackInput, UserUncheckedCreateWithoutFeedTrackInput>;
    connectOrCreate?: UserCreateOrConnectWithoutFeedTrackInput;
    upsert?: UserUpsertWithoutFeedTrackInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<UserUpdateToOneWithWhereWithoutFeedTrackInput, UserUpdateWithoutFeedTrackInput>,
      UserUncheckedUpdateWithoutFeedTrackInput
    >;
  };

  export type UserCreateNestedOneWithoutNotificationsReceivedInput = {
    create?: XOR<
      UserCreateWithoutNotificationsReceivedInput,
      UserUncheckedCreateWithoutNotificationsReceivedInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsReceivedInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutNotificationsSentInput = {
    create?: XOR<
      UserCreateWithoutNotificationsSentInput,
      UserUncheckedCreateWithoutNotificationsSentInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsSentInput;
    connect?: UserWhereUniqueInput;
  };

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType;
  };

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean;
  };

  export type UserUpdateOneRequiredWithoutNotificationsReceivedNestedInput = {
    create?: XOR<
      UserCreateWithoutNotificationsReceivedInput,
      UserUncheckedCreateWithoutNotificationsReceivedInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsReceivedInput;
    upsert?: UserUpsertWithoutNotificationsReceivedInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutNotificationsReceivedInput,
        UserUpdateWithoutNotificationsReceivedInput
      >,
      UserUncheckedUpdateWithoutNotificationsReceivedInput
    >;
  };

  export type UserUpdateOneWithoutNotificationsSentNestedInput = {
    create?: XOR<
      UserCreateWithoutNotificationsSentInput,
      UserUncheckedCreateWithoutNotificationsSentInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsSentInput;
    upsert?: UserUpsertWithoutNotificationsSentInput;
    disconnect?: UserWhereInput | boolean;
    delete?: UserWhereInput | boolean;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      XOR<
        UserUpdateToOneWithWhereWithoutNotificationsSentInput,
        UserUpdateWithoutNotificationsSentInput
      >,
      UserUncheckedUpdateWithoutNotificationsSentInput
    >;
  };

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntFilter<$PrismaModel> | number;
  };

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringFilter<$PrismaModel> | string;
  };

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringNullableFilter<$PrismaModel> | string | null;
  };

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>;
    in?: number[] | ListIntFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number;
    _count?: NestedIntFilter<$PrismaModel>;
    _avg?: NestedFloatFilter<$PrismaModel>;
    _sum?: NestedIntFilter<$PrismaModel>;
    _min?: NestedIntFilter<$PrismaModel>;
    _max?: NestedIntFilter<$PrismaModel>;
  };

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>;
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>;
    lt?: number | FloatFieldRefInput<$PrismaModel>;
    lte?: number | FloatFieldRefInput<$PrismaModel>;
    gt?: number | FloatFieldRefInput<$PrismaModel>;
    gte?: number | FloatFieldRefInput<$PrismaModel>;
    not?: NestedFloatFilter<$PrismaModel> | number;
  };

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>;
    in?: string[] | ListStringFieldRefInput<$PrismaModel>;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedStringFilter<$PrismaModel>;
    _max?: NestedStringFilter<$PrismaModel>;
  };

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null;
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null;
    lt?: string | StringFieldRefInput<$PrismaModel>;
    lte?: string | StringFieldRefInput<$PrismaModel>;
    gt?: string | StringFieldRefInput<$PrismaModel>;
    gte?: string | StringFieldRefInput<$PrismaModel>;
    contains?: string | StringFieldRefInput<$PrismaModel>;
    startsWith?: string | StringFieldRefInput<$PrismaModel>;
    endsWith?: string | StringFieldRefInput<$PrismaModel>;
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedStringNullableFilter<$PrismaModel>;
    _max?: NestedStringNullableFilter<$PrismaModel>;
  };

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableFilter<$PrismaModel> | number | null;
  };

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null;
  };

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null;
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null;
  };

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string;
  };

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedDateTimeNullableFilter<$PrismaModel>;
    _max?: NestedDateTimeNullableFilter<$PrismaModel>;
  };

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null;
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null;
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>;
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>;
  };

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>;
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>;
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedDateTimeFilter<$PrismaModel>;
    _max?: NestedDateTimeFilter<$PrismaModel>;
  };

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType;
  };

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolFilter<$PrismaModel> | boolean;
  };

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null;
    lt?: number | IntFieldRefInput<$PrismaModel>;
    lte?: number | IntFieldRefInput<$PrismaModel>;
    gt?: number | IntFieldRefInput<$PrismaModel>;
    gte?: number | IntFieldRefInput<$PrismaModel>;
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null;
    _count?: NestedIntNullableFilter<$PrismaModel>;
    _avg?: NestedFloatNullableFilter<$PrismaModel>;
    _sum?: NestedIntNullableFilter<$PrismaModel>;
    _min?: NestedIntNullableFilter<$PrismaModel>;
    _max?: NestedIntNullableFilter<$PrismaModel>;
  };

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null;
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null;
    lt?: number | FloatFieldRefInput<$PrismaModel>;
    lte?: number | FloatFieldRefInput<$PrismaModel>;
    gt?: number | FloatFieldRefInput<$PrismaModel>;
    gte?: number | FloatFieldRefInput<$PrismaModel>;
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null;
  };

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>;
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>;
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>;
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>;
  };

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>;
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean;
    _count?: NestedIntFilter<$PrismaModel>;
    _min?: NestedBoolFilter<$PrismaModel>;
    _max?: NestedBoolFilter<$PrismaModel>;
  };

  export type UserProfileCreateWithoutUserInput = {
    bio?: string | null;
    company?: string | null;
    location?: string | null;
    profilePic?: string | null;
    coverPic?: string | null;
    birthDate?: Date | string | null;
    gender?: $Enums.Gender | null;
    phone?: string | null;
    interests?: UserProfileCreateinterestsInput | string[];
    github?: string | null;
    linkedin?: string | null;
    twitter?: string | null;
    leetcode?: string | null;
    instagram?: string | null;
    website?: string | null;
    resumeLink?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: number;
    bio?: string | null;
    company?: string | null;
    location?: string | null;
    profilePic?: string | null;
    coverPic?: string | null;
    birthDate?: Date | string | null;
    gender?: $Enums.Gender | null;
    phone?: string | null;
    interests?: UserProfileCreateinterestsInput | string[];
    github?: string | null;
    linkedin?: string | null;
    twitter?: string | null;
    leetcode?: string | null;
    instagram?: string | null;
    website?: string | null;
    resumeLink?: string | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput;
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>;
  };

  export type PostCreateWithoutAuthorInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagCreateNestedManyWithoutPostInput;
    comments?: CommentCreateNestedManyWithoutPostInput;
    likes?: LikeCreateNestedManyWithoutPostInput;
    shares?: ShareCreateNestedManyWithoutPostInput;
    feed?: FeedCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput;
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput;
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput;
    shares?: ShareUncheckedCreateNestedManyWithoutPostInput;
    feed?: FeedUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput;
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>;
  };

  export type PostCreateManyAuthorInputEnvelope = {
    data: PostCreateManyAuthorInput | PostCreateManyAuthorInput[];
    skipDuplicates?: boolean;
  };

  export type UserTagStatsCreateWithoutUserInput = {
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
    tag: TagCreateNestedOneWithoutUsersInput;
  };

  export type UserTagStatsUncheckedCreateWithoutUserInput = {
    id?: number;
    tagId: number;
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
  };

  export type UserTagStatsCreateOrConnectWithoutUserInput = {
    where: UserTagStatsWhereUniqueInput;
    create: XOR<UserTagStatsCreateWithoutUserInput, UserTagStatsUncheckedCreateWithoutUserInput>;
  };

  export type UserTagStatsCreateManyUserInputEnvelope = {
    data: UserTagStatsCreateManyUserInput | UserTagStatsCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type FeedCreateWithoutUserInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutFeedInput;
  };

  export type FeedUncheckedCreateWithoutUserInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type FeedCreateOrConnectWithoutUserInput = {
    where: FeedWhereUniqueInput;
    create: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>;
  };

  export type FeedCreateManyUserInputEnvelope = {
    data: FeedCreateManyUserInput | FeedCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type FeedTrackCreateWithoutUserInput = {
    lastSeen: Date | string;
  };

  export type FeedTrackUncheckedCreateWithoutUserInput = {
    id?: number;
    lastSeen: Date | string;
  };

  export type FeedTrackCreateOrConnectWithoutUserInput = {
    where: FeedTrackWhereUniqueInput;
    create: XOR<FeedTrackCreateWithoutUserInput, FeedTrackUncheckedCreateWithoutUserInput>;
  };

  export type FeedTrackCreateManyUserInputEnvelope = {
    data: FeedTrackCreateManyUserInput | FeedTrackCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type UserHeatmapCreateWithoutUserInput = {
    date: Date | string;
    count: number;
  };

  export type UserHeatmapUncheckedCreateWithoutUserInput = {
    id?: number;
    date: Date | string;
    count: number;
  };

  export type UserHeatmapCreateOrConnectWithoutUserInput = {
    where: UserHeatmapWhereUniqueInput;
    create: XOR<UserHeatmapCreateWithoutUserInput, UserHeatmapUncheckedCreateWithoutUserInput>;
  };

  export type UserHeatmapCreateManyUserInputEnvelope = {
    data: UserHeatmapCreateManyUserInput | UserHeatmapCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type LikeCreateWithoutUserInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutLikesInput;
  };

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput;
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>;
  };

  export type LikeCreateManyUserInputEnvelope = {
    data: LikeCreateManyUserInput | LikeCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type CommentCreateWithoutAuthorInput = {
    content: string;
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutCommentsInput;
  };

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: number;
    content: string;
    createdAt?: Date | string;
    postId: number;
  };

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput;
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>;
  };

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[];
    skipDuplicates?: boolean;
  };

  export type ShareCreateWithoutUserInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutSharesInput;
  };

  export type ShareUncheckedCreateWithoutUserInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type ShareCreateOrConnectWithoutUserInput = {
    where: ShareWhereUniqueInput;
    create: XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>;
  };

  export type ShareCreateManyUserInputEnvelope = {
    data: ShareCreateManyUserInput | ShareCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type TagFollowCreateWithoutUserInput = {
    createdAt?: Date | string;
    tag: TagCreateNestedOneWithoutFollowersInput;
  };

  export type TagFollowUncheckedCreateWithoutUserInput = {
    id?: number;
    tagId: number;
    createdAt?: Date | string;
  };

  export type TagFollowCreateOrConnectWithoutUserInput = {
    where: TagFollowWhereUniqueInput;
    create: XOR<TagFollowCreateWithoutUserInput, TagFollowUncheckedCreateWithoutUserInput>;
  };

  export type TagFollowCreateManyUserInputEnvelope = {
    data: TagFollowCreateManyUserInput | TagFollowCreateManyUserInput[];
    skipDuplicates?: boolean;
  };

  export type FollowCreateWithoutFollowerInput = {
    createdAt?: Date | string;
    followed: UserCreateNestedOneWithoutFollowingInput;
  };

  export type FollowUncheckedCreateWithoutFollowerInput = {
    id?: number;
    followedId: number;
    createdAt?: Date | string;
  };

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput;
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>;
  };

  export type FollowCreateManyFollowerInputEnvelope = {
    data: FollowCreateManyFollowerInput | FollowCreateManyFollowerInput[];
    skipDuplicates?: boolean;
  };

  export type FollowCreateWithoutFollowedInput = {
    createdAt?: Date | string;
    follower: UserCreateNestedOneWithoutFollowersInput;
  };

  export type FollowUncheckedCreateWithoutFollowedInput = {
    id?: number;
    followerId: number;
    createdAt?: Date | string;
  };

  export type FollowCreateOrConnectWithoutFollowedInput = {
    where: FollowWhereUniqueInput;
    create: XOR<FollowCreateWithoutFollowedInput, FollowUncheckedCreateWithoutFollowedInput>;
  };

  export type FollowCreateManyFollowedInputEnvelope = {
    data: FollowCreateManyFollowedInput | FollowCreateManyFollowedInput[];
    skipDuplicates?: boolean;
  };

  export type NotificationCreateWithoutSenderInput = {
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
    recipient: UserCreateNestedOneWithoutNotificationsReceivedInput;
  };

  export type NotificationUncheckedCreateWithoutSenderInput = {
    id?: number;
    recipientId: number;
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationCreateOrConnectWithoutSenderInput = {
    where: NotificationWhereUniqueInput;
    create: XOR<
      NotificationCreateWithoutSenderInput,
      NotificationUncheckedCreateWithoutSenderInput
    >;
  };

  export type NotificationCreateManySenderInputEnvelope = {
    data: NotificationCreateManySenderInput | NotificationCreateManySenderInput[];
    skipDuplicates?: boolean;
  };

  export type NotificationCreateWithoutRecipientInput = {
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
    sender?: UserCreateNestedOneWithoutNotificationsSentInput;
  };

  export type NotificationUncheckedCreateWithoutRecipientInput = {
    id?: number;
    senderId?: number | null;
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationCreateOrConnectWithoutRecipientInput = {
    where: NotificationWhereUniqueInput;
    create: XOR<
      NotificationCreateWithoutRecipientInput,
      NotificationUncheckedCreateWithoutRecipientInput
    >;
  };

  export type NotificationCreateManyRecipientInputEnvelope = {
    data: NotificationCreateManyRecipientInput | NotificationCreateManyRecipientInput[];
    skipDuplicates?: boolean;
  };

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>;
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>;
    where?: UserProfileWhereInput;
  };

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput;
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>;
  };

  export type UserProfileUpdateWithoutUserInput = {
    bio?: NullableStringFieldUpdateOperationsInput | string | null;
    company?: NullableStringFieldUpdateOperationsInput | string | null;
    location?: NullableStringFieldUpdateOperationsInput | string | null;
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null;
    coverPic?: NullableStringFieldUpdateOperationsInput | string | null;
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    interests?: UserProfileUpdateinterestsInput | string[];
    github?: NullableStringFieldUpdateOperationsInput | string | null;
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null;
    twitter?: NullableStringFieldUpdateOperationsInput | string | null;
    leetcode?: NullableStringFieldUpdateOperationsInput | string | null;
    instagram?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    resumeLink?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    bio?: NullableStringFieldUpdateOperationsInput | string | null;
    company?: NullableStringFieldUpdateOperationsInput | string | null;
    location?: NullableStringFieldUpdateOperationsInput | string | null;
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null;
    coverPic?: NullableStringFieldUpdateOperationsInput | string | null;
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    interests?: UserProfileUpdateinterestsInput | string[];
    github?: NullableStringFieldUpdateOperationsInput | string | null;
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null;
    twitter?: NullableStringFieldUpdateOperationsInput | string | null;
    leetcode?: NullableStringFieldUpdateOperationsInput | string | null;
    instagram?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    resumeLink?: NullableStringFieldUpdateOperationsInput | string | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput;
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>;
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>;
  };

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput;
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>;
  };

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput;
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAuthorInput>;
  };

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[];
    OR?: PostScalarWhereInput[];
    NOT?: PostScalarWhereInput | PostScalarWhereInput[];
    id?: IntFilter<'Post'> | number;
    title?: StringFilter<'Post'> | string;
    content?: StringFilter<'Post'> | string;
    createdAt?: DateTimeFilter<'Post'> | Date | string;
    authorId?: IntFilter<'Post'> | number;
    likeCount?: IntFilter<'Post'> | number;
    commentCount?: IntFilter<'Post'> | number;
  };

  export type UserTagStatsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTagStatsWhereUniqueInput;
    update: XOR<UserTagStatsUpdateWithoutUserInput, UserTagStatsUncheckedUpdateWithoutUserInput>;
    create: XOR<UserTagStatsCreateWithoutUserInput, UserTagStatsUncheckedCreateWithoutUserInput>;
  };

  export type UserTagStatsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTagStatsWhereUniqueInput;
    data: XOR<UserTagStatsUpdateWithoutUserInput, UserTagStatsUncheckedUpdateWithoutUserInput>;
  };

  export type UserTagStatsUpdateManyWithWhereWithoutUserInput = {
    where: UserTagStatsScalarWhereInput;
    data: XOR<UserTagStatsUpdateManyMutationInput, UserTagStatsUncheckedUpdateManyWithoutUserInput>;
  };

  export type UserTagStatsScalarWhereInput = {
    AND?: UserTagStatsScalarWhereInput | UserTagStatsScalarWhereInput[];
    OR?: UserTagStatsScalarWhereInput[];
    NOT?: UserTagStatsScalarWhereInput | UserTagStatsScalarWhereInput[];
    id?: IntFilter<'UserTagStats'> | number;
    userId?: IntFilter<'UserTagStats'> | number;
    tagId?: IntFilter<'UserTagStats'> | number;
    postCount?: IntFilter<'UserTagStats'> | number;
    updatedAt?: DateTimeFilter<'UserTagStats'> | Date | string;
    createdAt?: DateTimeFilter<'UserTagStats'> | Date | string;
  };

  export type FeedUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedWhereUniqueInput;
    update: XOR<FeedUpdateWithoutUserInput, FeedUncheckedUpdateWithoutUserInput>;
    create: XOR<FeedCreateWithoutUserInput, FeedUncheckedCreateWithoutUserInput>;
  };

  export type FeedUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedWhereUniqueInput;
    data: XOR<FeedUpdateWithoutUserInput, FeedUncheckedUpdateWithoutUserInput>;
  };

  export type FeedUpdateManyWithWhereWithoutUserInput = {
    where: FeedScalarWhereInput;
    data: XOR<FeedUpdateManyMutationInput, FeedUncheckedUpdateManyWithoutUserInput>;
  };

  export type FeedScalarWhereInput = {
    AND?: FeedScalarWhereInput | FeedScalarWhereInput[];
    OR?: FeedScalarWhereInput[];
    NOT?: FeedScalarWhereInput | FeedScalarWhereInput[];
    id?: IntFilter<'Feed'> | number;
    postId?: IntFilter<'Feed'> | number;
    userId?: IntFilter<'Feed'> | number;
    createdAt?: DateTimeFilter<'Feed'> | Date | string;
  };

  export type FeedTrackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedTrackWhereUniqueInput;
    update: XOR<FeedTrackUpdateWithoutUserInput, FeedTrackUncheckedUpdateWithoutUserInput>;
    create: XOR<FeedTrackCreateWithoutUserInput, FeedTrackUncheckedCreateWithoutUserInput>;
  };

  export type FeedTrackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedTrackWhereUniqueInput;
    data: XOR<FeedTrackUpdateWithoutUserInput, FeedTrackUncheckedUpdateWithoutUserInput>;
  };

  export type FeedTrackUpdateManyWithWhereWithoutUserInput = {
    where: FeedTrackScalarWhereInput;
    data: XOR<FeedTrackUpdateManyMutationInput, FeedTrackUncheckedUpdateManyWithoutUserInput>;
  };

  export type FeedTrackScalarWhereInput = {
    AND?: FeedTrackScalarWhereInput | FeedTrackScalarWhereInput[];
    OR?: FeedTrackScalarWhereInput[];
    NOT?: FeedTrackScalarWhereInput | FeedTrackScalarWhereInput[];
    id?: IntFilter<'FeedTrack'> | number;
    userId?: IntFilter<'FeedTrack'> | number;
    lastSeen?: DateTimeFilter<'FeedTrack'> | Date | string;
  };

  export type UserHeatmapUpsertWithWhereUniqueWithoutUserInput = {
    where: UserHeatmapWhereUniqueInput;
    update: XOR<UserHeatmapUpdateWithoutUserInput, UserHeatmapUncheckedUpdateWithoutUserInput>;
    create: XOR<UserHeatmapCreateWithoutUserInput, UserHeatmapUncheckedCreateWithoutUserInput>;
  };

  export type UserHeatmapUpdateWithWhereUniqueWithoutUserInput = {
    where: UserHeatmapWhereUniqueInput;
    data: XOR<UserHeatmapUpdateWithoutUserInput, UserHeatmapUncheckedUpdateWithoutUserInput>;
  };

  export type UserHeatmapUpdateManyWithWhereWithoutUserInput = {
    where: UserHeatmapScalarWhereInput;
    data: XOR<UserHeatmapUpdateManyMutationInput, UserHeatmapUncheckedUpdateManyWithoutUserInput>;
  };

  export type UserHeatmapScalarWhereInput = {
    AND?: UserHeatmapScalarWhereInput | UserHeatmapScalarWhereInput[];
    OR?: UserHeatmapScalarWhereInput[];
    NOT?: UserHeatmapScalarWhereInput | UserHeatmapScalarWhereInput[];
    id?: IntFilter<'UserHeatmap'> | number;
    userId?: IntFilter<'UserHeatmap'> | number;
    date?: DateTimeFilter<'UserHeatmap'> | Date | string;
    count?: IntFilter<'UserHeatmap'> | number;
  };

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput;
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>;
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>;
  };

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput;
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>;
  };

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput;
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUserInput>;
  };

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[];
    OR?: LikeScalarWhereInput[];
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[];
    id?: IntFilter<'Like'> | number;
    postId?: IntFilter<'Like'> | number;
    userId?: IntFilter<'Like'> | number;
    createdAt?: DateTimeFilter<'Like'> | Date | string;
  };

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput;
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>;
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>;
  };

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput;
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>;
  };

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput;
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>;
  };

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[];
    OR?: CommentScalarWhereInput[];
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[];
    id?: IntFilter<'Comment'> | number;
    content?: StringFilter<'Comment'> | string;
    createdAt?: DateTimeFilter<'Comment'> | Date | string;
    postId?: IntFilter<'Comment'> | number;
    authorId?: IntFilter<'Comment'> | number;
  };

  export type ShareUpsertWithWhereUniqueWithoutUserInput = {
    where: ShareWhereUniqueInput;
    update: XOR<ShareUpdateWithoutUserInput, ShareUncheckedUpdateWithoutUserInput>;
    create: XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>;
  };

  export type ShareUpdateWithWhereUniqueWithoutUserInput = {
    where: ShareWhereUniqueInput;
    data: XOR<ShareUpdateWithoutUserInput, ShareUncheckedUpdateWithoutUserInput>;
  };

  export type ShareUpdateManyWithWhereWithoutUserInput = {
    where: ShareScalarWhereInput;
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutUserInput>;
  };

  export type ShareScalarWhereInput = {
    AND?: ShareScalarWhereInput | ShareScalarWhereInput[];
    OR?: ShareScalarWhereInput[];
    NOT?: ShareScalarWhereInput | ShareScalarWhereInput[];
    id?: IntFilter<'Share'> | number;
    postId?: IntFilter<'Share'> | number;
    userId?: IntFilter<'Share'> | number;
    createdAt?: DateTimeFilter<'Share'> | Date | string;
  };

  export type TagFollowUpsertWithWhereUniqueWithoutUserInput = {
    where: TagFollowWhereUniqueInput;
    update: XOR<TagFollowUpdateWithoutUserInput, TagFollowUncheckedUpdateWithoutUserInput>;
    create: XOR<TagFollowCreateWithoutUserInput, TagFollowUncheckedCreateWithoutUserInput>;
  };

  export type TagFollowUpdateWithWhereUniqueWithoutUserInput = {
    where: TagFollowWhereUniqueInput;
    data: XOR<TagFollowUpdateWithoutUserInput, TagFollowUncheckedUpdateWithoutUserInput>;
  };

  export type TagFollowUpdateManyWithWhereWithoutUserInput = {
    where: TagFollowScalarWhereInput;
    data: XOR<TagFollowUpdateManyMutationInput, TagFollowUncheckedUpdateManyWithoutUserInput>;
  };

  export type TagFollowScalarWhereInput = {
    AND?: TagFollowScalarWhereInput | TagFollowScalarWhereInput[];
    OR?: TagFollowScalarWhereInput[];
    NOT?: TagFollowScalarWhereInput | TagFollowScalarWhereInput[];
    id?: IntFilter<'TagFollow'> | number;
    tagId?: IntFilter<'TagFollow'> | number;
    userId?: IntFilter<'TagFollow'> | number;
    createdAt?: DateTimeFilter<'TagFollow'> | Date | string;
  };

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput;
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>;
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>;
  };

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput;
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>;
  };

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput;
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowerInput>;
  };

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[];
    OR?: FollowScalarWhereInput[];
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[];
    id?: IntFilter<'Follow'> | number;
    followerId?: IntFilter<'Follow'> | number;
    followedId?: IntFilter<'Follow'> | number;
    createdAt?: DateTimeFilter<'Follow'> | Date | string;
  };

  export type FollowUpsertWithWhereUniqueWithoutFollowedInput = {
    where: FollowWhereUniqueInput;
    update: XOR<FollowUpdateWithoutFollowedInput, FollowUncheckedUpdateWithoutFollowedInput>;
    create: XOR<FollowCreateWithoutFollowedInput, FollowUncheckedCreateWithoutFollowedInput>;
  };

  export type FollowUpdateWithWhereUniqueWithoutFollowedInput = {
    where: FollowWhereUniqueInput;
    data: XOR<FollowUpdateWithoutFollowedInput, FollowUncheckedUpdateWithoutFollowedInput>;
  };

  export type FollowUpdateManyWithWhereWithoutFollowedInput = {
    where: FollowScalarWhereInput;
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowedInput>;
  };

  export type NotificationUpsertWithWhereUniqueWithoutSenderInput = {
    where: NotificationWhereUniqueInput;
    update: XOR<
      NotificationUpdateWithoutSenderInput,
      NotificationUncheckedUpdateWithoutSenderInput
    >;
    create: XOR<
      NotificationCreateWithoutSenderInput,
      NotificationUncheckedCreateWithoutSenderInput
    >;
  };

  export type NotificationUpdateWithWhereUniqueWithoutSenderInput = {
    where: NotificationWhereUniqueInput;
    data: XOR<NotificationUpdateWithoutSenderInput, NotificationUncheckedUpdateWithoutSenderInput>;
  };

  export type NotificationUpdateManyWithWhereWithoutSenderInput = {
    where: NotificationScalarWhereInput;
    data: XOR<
      NotificationUpdateManyMutationInput,
      NotificationUncheckedUpdateManyWithoutSenderInput
    >;
  };

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
    OR?: NotificationScalarWhereInput[];
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[];
    id?: IntFilter<'Notification'> | number;
    recipientId?: IntFilter<'Notification'> | number;
    senderId?: IntNullableFilter<'Notification'> | number | null;
    type?: EnumNotificationTypeFilter<'Notification'> | $Enums.NotificationType;
    message?: StringFilter<'Notification'> | string;
    link?: StringNullableFilter<'Notification'> | string | null;
    read?: BoolFilter<'Notification'> | boolean;
    createdAt?: DateTimeFilter<'Notification'> | Date | string;
  };

  export type NotificationUpsertWithWhereUniqueWithoutRecipientInput = {
    where: NotificationWhereUniqueInput;
    update: XOR<
      NotificationUpdateWithoutRecipientInput,
      NotificationUncheckedUpdateWithoutRecipientInput
    >;
    create: XOR<
      NotificationCreateWithoutRecipientInput,
      NotificationUncheckedCreateWithoutRecipientInput
    >;
  };

  export type NotificationUpdateWithWhereUniqueWithoutRecipientInput = {
    where: NotificationWhereUniqueInput;
    data: XOR<
      NotificationUpdateWithoutRecipientInput,
      NotificationUncheckedUpdateWithoutRecipientInput
    >;
  };

  export type NotificationUpdateManyWithWhereWithoutRecipientInput = {
    where: NotificationScalarWhereInput;
    data: XOR<
      NotificationUpdateManyMutationInput,
      NotificationUncheckedUpdateManyWithoutRecipientInput
    >;
  };

  export type UserCreateWithoutUserProfileInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutUserProfileInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutUserProfileInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>;
  };

  export type UserUpsertWithoutUserProfileInput = {
    update: XOR<UserUpdateWithoutUserProfileInput, UserUncheckedUpdateWithoutUserProfileInput>;
    create: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutUserProfileInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutUserProfileInput, UserUncheckedUpdateWithoutUserProfileInput>;
  };

  export type UserUpdateWithoutUserProfileInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutUserProfileInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type UserCreateWithoutHeapmapInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutHeapmapInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutHeapmapInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutHeapmapInput, UserUncheckedCreateWithoutHeapmapInput>;
  };

  export type UserUpsertWithoutHeapmapInput = {
    update: XOR<UserUpdateWithoutHeapmapInput, UserUncheckedUpdateWithoutHeapmapInput>;
    create: XOR<UserCreateWithoutHeapmapInput, UserUncheckedCreateWithoutHeapmapInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutHeapmapInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutHeapmapInput, UserUncheckedUpdateWithoutHeapmapInput>;
  };

  export type UserUpdateWithoutHeapmapInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutHeapmapInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type UserCreateWithoutTagStatsInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutTagStatsInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutTagStatsInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutTagStatsInput, UserUncheckedCreateWithoutTagStatsInput>;
  };

  export type TagCreateWithoutUsersInput = {
    name: string;
    createdAt?: Date | string;
    posts?: PostTagCreateNestedManyWithoutTagInput;
    followers?: TagFollowCreateNestedManyWithoutTagInput;
  };

  export type TagUncheckedCreateWithoutUsersInput = {
    id?: number;
    name: string;
    createdAt?: Date | string;
    posts?: PostTagUncheckedCreateNestedManyWithoutTagInput;
    followers?: TagFollowUncheckedCreateNestedManyWithoutTagInput;
  };

  export type TagCreateOrConnectWithoutUsersInput = {
    where: TagWhereUniqueInput;
    create: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>;
  };

  export type UserUpsertWithoutTagStatsInput = {
    update: XOR<UserUpdateWithoutTagStatsInput, UserUncheckedUpdateWithoutTagStatsInput>;
    create: XOR<UserCreateWithoutTagStatsInput, UserUncheckedCreateWithoutTagStatsInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutTagStatsInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutTagStatsInput, UserUncheckedUpdateWithoutTagStatsInput>;
  };

  export type UserUpdateWithoutTagStatsInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutTagStatsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type TagUpsertWithoutUsersInput = {
    update: XOR<TagUpdateWithoutUsersInput, TagUncheckedUpdateWithoutUsersInput>;
    create: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>;
    where?: TagWhereInput;
  };

  export type TagUpdateToOneWithWhereWithoutUsersInput = {
    where?: TagWhereInput;
    data: XOR<TagUpdateWithoutUsersInput, TagUncheckedUpdateWithoutUsersInput>;
  };

  export type TagUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    posts?: PostTagUpdateManyWithoutTagNestedInput;
    followers?: TagFollowUpdateManyWithoutTagNestedInput;
  };

  export type TagUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    posts?: PostTagUncheckedUpdateManyWithoutTagNestedInput;
    followers?: TagFollowUncheckedUpdateManyWithoutTagNestedInput;
  };

  export type UserCreateWithoutPostInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutPostInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutPostInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>;
  };

  export type PostTagCreateWithoutPostInput = {
    createdAt?: Date | string;
    tag: TagCreateNestedOneWithoutPostsInput;
  };

  export type PostTagUncheckedCreateWithoutPostInput = {
    id?: number;
    tagId: number;
    createdAt?: Date | string;
  };

  export type PostTagCreateOrConnectWithoutPostInput = {
    where: PostTagWhereUniqueInput;
    create: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>;
  };

  export type PostTagCreateManyPostInputEnvelope = {
    data: PostTagCreateManyPostInput | PostTagCreateManyPostInput[];
    skipDuplicates?: boolean;
  };

  export type CommentCreateWithoutPostInput = {
    content: string;
    createdAt?: Date | string;
    author: UserCreateNestedOneWithoutCommentInput;
  };

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: number;
    content: string;
    createdAt?: Date | string;
    authorId: number;
  };

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput;
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>;
  };

  export type CommentCreateManyPostInputEnvelope = {
    data: CommentCreateManyPostInput | CommentCreateManyPostInput[];
    skipDuplicates?: boolean;
  };

  export type LikeCreateWithoutPostInput = {
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutLikeInput;
  };

  export type LikeUncheckedCreateWithoutPostInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type LikeCreateOrConnectWithoutPostInput = {
    where: LikeWhereUniqueInput;
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>;
  };

  export type LikeCreateManyPostInputEnvelope = {
    data: LikeCreateManyPostInput | LikeCreateManyPostInput[];
    skipDuplicates?: boolean;
  };

  export type ShareCreateWithoutPostInput = {
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutSharedInput;
  };

  export type ShareUncheckedCreateWithoutPostInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type ShareCreateOrConnectWithoutPostInput = {
    where: ShareWhereUniqueInput;
    create: XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>;
  };

  export type ShareCreateManyPostInputEnvelope = {
    data: ShareCreateManyPostInput | ShareCreateManyPostInput[];
    skipDuplicates?: boolean;
  };

  export type FeedCreateWithoutPostInput = {
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutFeedInput;
  };

  export type FeedUncheckedCreateWithoutPostInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type FeedCreateOrConnectWithoutPostInput = {
    where: FeedWhereUniqueInput;
    create: XOR<FeedCreateWithoutPostInput, FeedUncheckedCreateWithoutPostInput>;
  };

  export type FeedCreateManyPostInputEnvelope = {
    data: FeedCreateManyPostInput | FeedCreateManyPostInput[];
    skipDuplicates?: boolean;
  };

  export type UserUpsertWithoutPostInput = {
    update: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>;
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutPostInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>;
  };

  export type UserUpdateWithoutPostInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostTagUpsertWithWhereUniqueWithoutPostInput = {
    where: PostTagWhereUniqueInput;
    update: XOR<PostTagUpdateWithoutPostInput, PostTagUncheckedUpdateWithoutPostInput>;
    create: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>;
  };

  export type PostTagUpdateWithWhereUniqueWithoutPostInput = {
    where: PostTagWhereUniqueInput;
    data: XOR<PostTagUpdateWithoutPostInput, PostTagUncheckedUpdateWithoutPostInput>;
  };

  export type PostTagUpdateManyWithWhereWithoutPostInput = {
    where: PostTagScalarWhereInput;
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyWithoutPostInput>;
  };

  export type PostTagScalarWhereInput = {
    AND?: PostTagScalarWhereInput | PostTagScalarWhereInput[];
    OR?: PostTagScalarWhereInput[];
    NOT?: PostTagScalarWhereInput | PostTagScalarWhereInput[];
    id?: IntFilter<'PostTag'> | number;
    postId?: IntFilter<'PostTag'> | number;
    tagId?: IntFilter<'PostTag'> | number;
    createdAt?: DateTimeFilter<'PostTag'> | Date | string;
  };

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput;
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>;
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>;
  };

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput;
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>;
  };

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput;
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>;
  };

  export type LikeUpsertWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput;
    update: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>;
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>;
  };

  export type LikeUpdateWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput;
    data: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>;
  };

  export type LikeUpdateManyWithWhereWithoutPostInput = {
    where: LikeScalarWhereInput;
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutPostInput>;
  };

  export type ShareUpsertWithWhereUniqueWithoutPostInput = {
    where: ShareWhereUniqueInput;
    update: XOR<ShareUpdateWithoutPostInput, ShareUncheckedUpdateWithoutPostInput>;
    create: XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>;
  };

  export type ShareUpdateWithWhereUniqueWithoutPostInput = {
    where: ShareWhereUniqueInput;
    data: XOR<ShareUpdateWithoutPostInput, ShareUncheckedUpdateWithoutPostInput>;
  };

  export type ShareUpdateManyWithWhereWithoutPostInput = {
    where: ShareScalarWhereInput;
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutPostInput>;
  };

  export type FeedUpsertWithWhereUniqueWithoutPostInput = {
    where: FeedWhereUniqueInput;
    update: XOR<FeedUpdateWithoutPostInput, FeedUncheckedUpdateWithoutPostInput>;
    create: XOR<FeedCreateWithoutPostInput, FeedUncheckedCreateWithoutPostInput>;
  };

  export type FeedUpdateWithWhereUniqueWithoutPostInput = {
    where: FeedWhereUniqueInput;
    data: XOR<FeedUpdateWithoutPostInput, FeedUncheckedUpdateWithoutPostInput>;
  };

  export type FeedUpdateManyWithWhereWithoutPostInput = {
    where: FeedScalarWhereInput;
    data: XOR<FeedUpdateManyMutationInput, FeedUncheckedUpdateManyWithoutPostInput>;
  };

  export type UserCreateWithoutFollowersInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>;
  };

  export type UserCreateWithoutFollowingInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>;
  };

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>;
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>;
  };

  export type UserUpdateWithoutFollowersInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>;
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>;
  };

  export type UserUpdateWithoutFollowingInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostTagCreateWithoutTagInput = {
    createdAt?: Date | string;
    post: PostCreateNestedOneWithoutTagsInput;
  };

  export type PostTagUncheckedCreateWithoutTagInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type PostTagCreateOrConnectWithoutTagInput = {
    where: PostTagWhereUniqueInput;
    create: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>;
  };

  export type PostTagCreateManyTagInputEnvelope = {
    data: PostTagCreateManyTagInput | PostTagCreateManyTagInput[];
    skipDuplicates?: boolean;
  };

  export type UserTagStatsCreateWithoutTagInput = {
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutTagStatsInput;
  };

  export type UserTagStatsUncheckedCreateWithoutTagInput = {
    id?: number;
    userId: number;
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
  };

  export type UserTagStatsCreateOrConnectWithoutTagInput = {
    where: UserTagStatsWhereUniqueInput;
    create: XOR<UserTagStatsCreateWithoutTagInput, UserTagStatsUncheckedCreateWithoutTagInput>;
  };

  export type UserTagStatsCreateManyTagInputEnvelope = {
    data: UserTagStatsCreateManyTagInput | UserTagStatsCreateManyTagInput[];
    skipDuplicates?: boolean;
  };

  export type TagFollowCreateWithoutTagInput = {
    createdAt?: Date | string;
    user: UserCreateNestedOneWithoutTagFollowsInput;
  };

  export type TagFollowUncheckedCreateWithoutTagInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type TagFollowCreateOrConnectWithoutTagInput = {
    where: TagFollowWhereUniqueInput;
    create: XOR<TagFollowCreateWithoutTagInput, TagFollowUncheckedCreateWithoutTagInput>;
  };

  export type TagFollowCreateManyTagInputEnvelope = {
    data: TagFollowCreateManyTagInput | TagFollowCreateManyTagInput[];
    skipDuplicates?: boolean;
  };

  export type PostTagUpsertWithWhereUniqueWithoutTagInput = {
    where: PostTagWhereUniqueInput;
    update: XOR<PostTagUpdateWithoutTagInput, PostTagUncheckedUpdateWithoutTagInput>;
    create: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>;
  };

  export type PostTagUpdateWithWhereUniqueWithoutTagInput = {
    where: PostTagWhereUniqueInput;
    data: XOR<PostTagUpdateWithoutTagInput, PostTagUncheckedUpdateWithoutTagInput>;
  };

  export type PostTagUpdateManyWithWhereWithoutTagInput = {
    where: PostTagScalarWhereInput;
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyWithoutTagInput>;
  };

  export type UserTagStatsUpsertWithWhereUniqueWithoutTagInput = {
    where: UserTagStatsWhereUniqueInput;
    update: XOR<UserTagStatsUpdateWithoutTagInput, UserTagStatsUncheckedUpdateWithoutTagInput>;
    create: XOR<UserTagStatsCreateWithoutTagInput, UserTagStatsUncheckedCreateWithoutTagInput>;
  };

  export type UserTagStatsUpdateWithWhereUniqueWithoutTagInput = {
    where: UserTagStatsWhereUniqueInput;
    data: XOR<UserTagStatsUpdateWithoutTagInput, UserTagStatsUncheckedUpdateWithoutTagInput>;
  };

  export type UserTagStatsUpdateManyWithWhereWithoutTagInput = {
    where: UserTagStatsScalarWhereInput;
    data: XOR<UserTagStatsUpdateManyMutationInput, UserTagStatsUncheckedUpdateManyWithoutTagInput>;
  };

  export type TagFollowUpsertWithWhereUniqueWithoutTagInput = {
    where: TagFollowWhereUniqueInput;
    update: XOR<TagFollowUpdateWithoutTagInput, TagFollowUncheckedUpdateWithoutTagInput>;
    create: XOR<TagFollowCreateWithoutTagInput, TagFollowUncheckedCreateWithoutTagInput>;
  };

  export type TagFollowUpdateWithWhereUniqueWithoutTagInput = {
    where: TagFollowWhereUniqueInput;
    data: XOR<TagFollowUpdateWithoutTagInput, TagFollowUncheckedUpdateWithoutTagInput>;
  };

  export type TagFollowUpdateManyWithWhereWithoutTagInput = {
    where: TagFollowScalarWhereInput;
    data: XOR<TagFollowUpdateManyMutationInput, TagFollowUncheckedUpdateManyWithoutTagInput>;
  };

  export type PostCreateWithoutTagsInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    author: UserCreateNestedOneWithoutPostInput;
    comments?: CommentCreateNestedManyWithoutPostInput;
    likes?: LikeCreateNestedManyWithoutPostInput;
    shares?: ShareCreateNestedManyWithoutPostInput;
    feed?: FeedCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateWithoutTagsInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput;
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput;
    shares?: ShareUncheckedCreateNestedManyWithoutPostInput;
    feed?: FeedUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostCreateOrConnectWithoutTagsInput = {
    where: PostWhereUniqueInput;
    create: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>;
  };

  export type TagCreateWithoutPostsInput = {
    name: string;
    createdAt?: Date | string;
    users?: UserTagStatsCreateNestedManyWithoutTagInput;
    followers?: TagFollowCreateNestedManyWithoutTagInput;
  };

  export type TagUncheckedCreateWithoutPostsInput = {
    id?: number;
    name: string;
    createdAt?: Date | string;
    users?: UserTagStatsUncheckedCreateNestedManyWithoutTagInput;
    followers?: TagFollowUncheckedCreateNestedManyWithoutTagInput;
  };

  export type TagCreateOrConnectWithoutPostsInput = {
    where: TagWhereUniqueInput;
    create: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>;
  };

  export type PostUpsertWithoutTagsInput = {
    update: XOR<PostUpdateWithoutTagsInput, PostUncheckedUpdateWithoutTagsInput>;
    create: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>;
    where?: PostWhereInput;
  };

  export type PostUpdateToOneWithWhereWithoutTagsInput = {
    where?: PostWhereInput;
    data: XOR<PostUpdateWithoutTagsInput, PostUncheckedUpdateWithoutTagsInput>;
  };

  export type PostUpdateWithoutTagsInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    author?: UserUpdateOneRequiredWithoutPostNestedInput;
    comments?: CommentUpdateManyWithoutPostNestedInput;
    likes?: LikeUpdateManyWithoutPostNestedInput;
    shares?: ShareUpdateManyWithoutPostNestedInput;
    feed?: FeedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput;
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput;
    shares?: ShareUncheckedUpdateManyWithoutPostNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type TagUpsertWithoutPostsInput = {
    update: XOR<TagUpdateWithoutPostsInput, TagUncheckedUpdateWithoutPostsInput>;
    create: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>;
    where?: TagWhereInput;
  };

  export type TagUpdateToOneWithWhereWithoutPostsInput = {
    where?: TagWhereInput;
    data: XOR<TagUpdateWithoutPostsInput, TagUncheckedUpdateWithoutPostsInput>;
  };

  export type TagUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    users?: UserTagStatsUpdateManyWithoutTagNestedInput;
    followers?: TagFollowUpdateManyWithoutTagNestedInput;
  };

  export type TagUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    users?: UserTagStatsUncheckedUpdateManyWithoutTagNestedInput;
    followers?: TagFollowUncheckedUpdateManyWithoutTagNestedInput;
  };

  export type TagCreateWithoutFollowersInput = {
    name: string;
    createdAt?: Date | string;
    posts?: PostTagCreateNestedManyWithoutTagInput;
    users?: UserTagStatsCreateNestedManyWithoutTagInput;
  };

  export type TagUncheckedCreateWithoutFollowersInput = {
    id?: number;
    name: string;
    createdAt?: Date | string;
    posts?: PostTagUncheckedCreateNestedManyWithoutTagInput;
    users?: UserTagStatsUncheckedCreateNestedManyWithoutTagInput;
  };

  export type TagCreateOrConnectWithoutFollowersInput = {
    where: TagWhereUniqueInput;
    create: XOR<TagCreateWithoutFollowersInput, TagUncheckedCreateWithoutFollowersInput>;
  };

  export type UserCreateWithoutTagFollowsInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutTagFollowsInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutTagFollowsInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutTagFollowsInput, UserUncheckedCreateWithoutTagFollowsInput>;
  };

  export type TagUpsertWithoutFollowersInput = {
    update: XOR<TagUpdateWithoutFollowersInput, TagUncheckedUpdateWithoutFollowersInput>;
    create: XOR<TagCreateWithoutFollowersInput, TagUncheckedCreateWithoutFollowersInput>;
    where?: TagWhereInput;
  };

  export type TagUpdateToOneWithWhereWithoutFollowersInput = {
    where?: TagWhereInput;
    data: XOR<TagUpdateWithoutFollowersInput, TagUncheckedUpdateWithoutFollowersInput>;
  };

  export type TagUpdateWithoutFollowersInput = {
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    posts?: PostTagUpdateManyWithoutTagNestedInput;
    users?: UserTagStatsUpdateManyWithoutTagNestedInput;
  };

  export type TagUncheckedUpdateWithoutFollowersInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    posts?: PostTagUncheckedUpdateManyWithoutTagNestedInput;
    users?: UserTagStatsUncheckedUpdateManyWithoutTagNestedInput;
  };

  export type UserUpsertWithoutTagFollowsInput = {
    update: XOR<UserUpdateWithoutTagFollowsInput, UserUncheckedUpdateWithoutTagFollowsInput>;
    create: XOR<UserCreateWithoutTagFollowsInput, UserUncheckedCreateWithoutTagFollowsInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutTagFollowsInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutTagFollowsInput, UserUncheckedUpdateWithoutTagFollowsInput>;
  };

  export type UserUpdateWithoutTagFollowsInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutTagFollowsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostCreateWithoutCommentsInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    author: UserCreateNestedOneWithoutPostInput;
    tags?: PostTagCreateNestedManyWithoutPostInput;
    likes?: LikeCreateNestedManyWithoutPostInput;
    shares?: ShareCreateNestedManyWithoutPostInput;
    feed?: FeedCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput;
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput;
    shares?: ShareUncheckedCreateNestedManyWithoutPostInput;
    feed?: FeedUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput;
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>;
  };

  export type UserCreateWithoutCommentInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>;
  };

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>;
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>;
    where?: PostWhereInput;
  };

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput;
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>;
  };

  export type PostUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    author?: UserUpdateOneRequiredWithoutPostNestedInput;
    tags?: PostTagUpdateManyWithoutPostNestedInput;
    likes?: LikeUpdateManyWithoutPostNestedInput;
    shares?: ShareUpdateManyWithoutPostNestedInput;
    feed?: FeedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput;
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput;
    shares?: ShareUncheckedUpdateManyWithoutPostNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>;
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>;
  };

  export type UserUpdateWithoutCommentInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostCreateWithoutLikesInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    author: UserCreateNestedOneWithoutPostInput;
    tags?: PostTagCreateNestedManyWithoutPostInput;
    comments?: CommentCreateNestedManyWithoutPostInput;
    shares?: ShareCreateNestedManyWithoutPostInput;
    feed?: FeedCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput;
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput;
    shares?: ShareUncheckedCreateNestedManyWithoutPostInput;
    feed?: FeedUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput;
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>;
  };

  export type UserCreateWithoutLikeInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutLikeInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutLikeInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>;
  };

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>;
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>;
    where?: PostWhereInput;
  };

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput;
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>;
  };

  export type PostUpdateWithoutLikesInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    author?: UserUpdateOneRequiredWithoutPostNestedInput;
    tags?: PostTagUpdateManyWithoutPostNestedInput;
    comments?: CommentUpdateManyWithoutPostNestedInput;
    shares?: ShareUpdateManyWithoutPostNestedInput;
    feed?: FeedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput;
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput;
    shares?: ShareUncheckedUpdateManyWithoutPostNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type UserUpsertWithoutLikeInput = {
    update: XOR<UserUpdateWithoutLikeInput, UserUncheckedUpdateWithoutLikeInput>;
    create: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutLikeInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutLikeInput, UserUncheckedUpdateWithoutLikeInput>;
  };

  export type UserUpdateWithoutLikeInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutLikeInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostCreateWithoutSharesInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    author: UserCreateNestedOneWithoutPostInput;
    tags?: PostTagCreateNestedManyWithoutPostInput;
    comments?: CommentCreateNestedManyWithoutPostInput;
    likes?: LikeCreateNestedManyWithoutPostInput;
    feed?: FeedCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateWithoutSharesInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput;
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput;
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput;
    feed?: FeedUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostCreateOrConnectWithoutSharesInput = {
    where: PostWhereUniqueInput;
    create: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>;
  };

  export type UserCreateWithoutSharedInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutSharedInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutSharedInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutSharedInput, UserUncheckedCreateWithoutSharedInput>;
  };

  export type PostUpsertWithoutSharesInput = {
    update: XOR<PostUpdateWithoutSharesInput, PostUncheckedUpdateWithoutSharesInput>;
    create: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>;
    where?: PostWhereInput;
  };

  export type PostUpdateToOneWithWhereWithoutSharesInput = {
    where?: PostWhereInput;
    data: XOR<PostUpdateWithoutSharesInput, PostUncheckedUpdateWithoutSharesInput>;
  };

  export type PostUpdateWithoutSharesInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    author?: UserUpdateOneRequiredWithoutPostNestedInput;
    tags?: PostTagUpdateManyWithoutPostNestedInput;
    comments?: CommentUpdateManyWithoutPostNestedInput;
    likes?: LikeUpdateManyWithoutPostNestedInput;
    feed?: FeedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateWithoutSharesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput;
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput;
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type UserUpsertWithoutSharedInput = {
    update: XOR<UserUpdateWithoutSharedInput, UserUncheckedUpdateWithoutSharedInput>;
    create: XOR<UserCreateWithoutSharedInput, UserUncheckedCreateWithoutSharedInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutSharedInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutSharedInput, UserUncheckedUpdateWithoutSharedInput>;
  };

  export type UserUpdateWithoutSharedInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutSharedInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostCreateWithoutFeedInput = {
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
    author: UserCreateNestedOneWithoutPostInput;
    tags?: PostTagCreateNestedManyWithoutPostInput;
    comments?: CommentCreateNestedManyWithoutPostInput;
    likes?: LikeCreateNestedManyWithoutPostInput;
    shares?: ShareCreateNestedManyWithoutPostInput;
  };

  export type PostUncheckedCreateWithoutFeedInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    authorId: number;
    likeCount?: number;
    commentCount?: number;
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput;
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput;
    likes?: LikeUncheckedCreateNestedManyWithoutPostInput;
    shares?: ShareUncheckedCreateNestedManyWithoutPostInput;
  };

  export type PostCreateOrConnectWithoutFeedInput = {
    where: PostWhereUniqueInput;
    create: XOR<PostCreateWithoutFeedInput, PostUncheckedCreateWithoutFeedInput>;
  };

  export type UserCreateWithoutFeedInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutFeedInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutFeedInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>;
  };

  export type PostUpsertWithoutFeedInput = {
    update: XOR<PostUpdateWithoutFeedInput, PostUncheckedUpdateWithoutFeedInput>;
    create: XOR<PostCreateWithoutFeedInput, PostUncheckedCreateWithoutFeedInput>;
    where?: PostWhereInput;
  };

  export type PostUpdateToOneWithWhereWithoutFeedInput = {
    where?: PostWhereInput;
    data: XOR<PostUpdateWithoutFeedInput, PostUncheckedUpdateWithoutFeedInput>;
  };

  export type PostUpdateWithoutFeedInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    author?: UserUpdateOneRequiredWithoutPostNestedInput;
    tags?: PostTagUpdateManyWithoutPostNestedInput;
    comments?: CommentUpdateManyWithoutPostNestedInput;
    likes?: LikeUpdateManyWithoutPostNestedInput;
    shares?: ShareUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateWithoutFeedInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput;
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput;
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput;
    shares?: ShareUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type UserUpsertWithoutFeedInput = {
    update: XOR<UserUpdateWithoutFeedInput, UserUncheckedUpdateWithoutFeedInput>;
    create: XOR<UserCreateWithoutFeedInput, UserUncheckedCreateWithoutFeedInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutFeedInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutFeedInput, UserUncheckedUpdateWithoutFeedInput>;
  };

  export type UserUpdateWithoutFeedInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutFeedInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type UserCreateWithoutFeedTrackInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutFeedTrackInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutFeedTrackInput = {
    where: UserWhereUniqueInput;
    create: XOR<UserCreateWithoutFeedTrackInput, UserUncheckedCreateWithoutFeedTrackInput>;
  };

  export type UserUpsertWithoutFeedTrackInput = {
    update: XOR<UserUpdateWithoutFeedTrackInput, UserUncheckedUpdateWithoutFeedTrackInput>;
    create: XOR<UserCreateWithoutFeedTrackInput, UserUncheckedCreateWithoutFeedTrackInput>;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutFeedTrackInput = {
    where?: UserWhereInput;
    data: XOR<UserUpdateWithoutFeedTrackInput, UserUncheckedUpdateWithoutFeedTrackInput>;
  };

  export type UserUpdateWithoutFeedTrackInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutFeedTrackInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type UserCreateWithoutNotificationsReceivedInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationCreateNestedManyWithoutSenderInput;
  };

  export type UserUncheckedCreateWithoutNotificationsReceivedInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsSent?: NotificationUncheckedCreateNestedManyWithoutSenderInput;
  };

  export type UserCreateOrConnectWithoutNotificationsReceivedInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutNotificationsReceivedInput,
      UserUncheckedCreateWithoutNotificationsReceivedInput
    >;
  };

  export type UserCreateWithoutNotificationsSentInput = {
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileCreateNestedOneWithoutUserInput;
    post?: PostCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsCreateNestedManyWithoutUserInput;
    feed?: FeedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapCreateNestedManyWithoutUserInput;
    like?: LikeCreateNestedManyWithoutUserInput;
    comment?: CommentCreateNestedManyWithoutAuthorInput;
    shared?: ShareCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowCreateNestedManyWithoutUserInput;
    followers?: FollowCreateNestedManyWithoutFollowerInput;
    following?: FollowCreateNestedManyWithoutFollowedInput;
    notificationsReceived?: NotificationCreateNestedManyWithoutRecipientInput;
  };

  export type UserUncheckedCreateWithoutNotificationsSentInput = {
    id?: number;
    email: string;
    password: string;
    name?: string | null;
    roles?: UserCreaterolesInput | string[];
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput;
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput;
    tagStats?: UserTagStatsUncheckedCreateNestedManyWithoutUserInput;
    feed?: FeedUncheckedCreateNestedManyWithoutUserInput;
    feedTrack?: FeedTrackUncheckedCreateNestedManyWithoutUserInput;
    heapmap?: UserHeatmapUncheckedCreateNestedManyWithoutUserInput;
    like?: LikeUncheckedCreateNestedManyWithoutUserInput;
    comment?: CommentUncheckedCreateNestedManyWithoutAuthorInput;
    shared?: ShareUncheckedCreateNestedManyWithoutUserInput;
    tagFollows?: TagFollowUncheckedCreateNestedManyWithoutUserInput;
    followers?: FollowUncheckedCreateNestedManyWithoutFollowerInput;
    following?: FollowUncheckedCreateNestedManyWithoutFollowedInput;
    notificationsReceived?: NotificationUncheckedCreateNestedManyWithoutRecipientInput;
  };

  export type UserCreateOrConnectWithoutNotificationsSentInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutNotificationsSentInput,
      UserUncheckedCreateWithoutNotificationsSentInput
    >;
  };

  export type UserUpsertWithoutNotificationsReceivedInput = {
    update: XOR<
      UserUpdateWithoutNotificationsReceivedInput,
      UserUncheckedUpdateWithoutNotificationsReceivedInput
    >;
    create: XOR<
      UserCreateWithoutNotificationsReceivedInput,
      UserUncheckedCreateWithoutNotificationsReceivedInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutNotificationsReceivedInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutNotificationsReceivedInput,
      UserUncheckedUpdateWithoutNotificationsReceivedInput
    >;
  };

  export type UserUpdateWithoutNotificationsReceivedInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUpdateManyWithoutSenderNestedInput;
  };

  export type UserUncheckedUpdateWithoutNotificationsReceivedInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsSent?: NotificationUncheckedUpdateManyWithoutSenderNestedInput;
  };

  export type UserUpsertWithoutNotificationsSentInput = {
    update: XOR<
      UserUpdateWithoutNotificationsSentInput,
      UserUncheckedUpdateWithoutNotificationsSentInput
    >;
    create: XOR<
      UserCreateWithoutNotificationsSentInput,
      UserUncheckedCreateWithoutNotificationsSentInput
    >;
    where?: UserWhereInput;
  };

  export type UserUpdateToOneWithWhereWithoutNotificationsSentInput = {
    where?: UserWhereInput;
    data: XOR<
      UserUpdateWithoutNotificationsSentInput,
      UserUncheckedUpdateWithoutNotificationsSentInput
    >;
  };

  export type UserUpdateWithoutNotificationsSentInput = {
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput;
    post?: PostUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUpdateManyWithoutUserNestedInput;
    feed?: FeedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUpdateManyWithoutUserNestedInput;
    like?: LikeUpdateManyWithoutUserNestedInput;
    comment?: CommentUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUpdateManyWithoutUserNestedInput;
    followers?: FollowUpdateManyWithoutFollowerNestedInput;
    following?: FollowUpdateManyWithoutFollowedNestedInput;
    notificationsReceived?: NotificationUpdateManyWithoutRecipientNestedInput;
  };

  export type UserUncheckedUpdateWithoutNotificationsSentInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    roles?: UserUpdaterolesInput | string[];
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput;
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput;
    tagStats?: UserTagStatsUncheckedUpdateManyWithoutUserNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutUserNestedInput;
    feedTrack?: FeedTrackUncheckedUpdateManyWithoutUserNestedInput;
    heapmap?: UserHeatmapUncheckedUpdateManyWithoutUserNestedInput;
    like?: LikeUncheckedUpdateManyWithoutUserNestedInput;
    comment?: CommentUncheckedUpdateManyWithoutAuthorNestedInput;
    shared?: ShareUncheckedUpdateManyWithoutUserNestedInput;
    tagFollows?: TagFollowUncheckedUpdateManyWithoutUserNestedInput;
    followers?: FollowUncheckedUpdateManyWithoutFollowerNestedInput;
    following?: FollowUncheckedUpdateManyWithoutFollowedNestedInput;
    notificationsReceived?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput;
  };

  export type PostCreateManyAuthorInput = {
    id?: number;
    title: string;
    content: string;
    createdAt?: Date | string;
    likeCount?: number;
    commentCount?: number;
  };

  export type UserTagStatsCreateManyUserInput = {
    id?: number;
    tagId: number;
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
  };

  export type FeedCreateManyUserInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type FeedTrackCreateManyUserInput = {
    id?: number;
    lastSeen: Date | string;
  };

  export type UserHeatmapCreateManyUserInput = {
    id?: number;
    date: Date | string;
    count: number;
  };

  export type LikeCreateManyUserInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type CommentCreateManyAuthorInput = {
    id?: number;
    content: string;
    createdAt?: Date | string;
    postId: number;
  };

  export type ShareCreateManyUserInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type TagFollowCreateManyUserInput = {
    id?: number;
    tagId: number;
    createdAt?: Date | string;
  };

  export type FollowCreateManyFollowerInput = {
    id?: number;
    followedId: number;
    createdAt?: Date | string;
  };

  export type FollowCreateManyFollowedInput = {
    id?: number;
    followerId: number;
    createdAt?: Date | string;
  };

  export type NotificationCreateManySenderInput = {
    id?: number;
    recipientId: number;
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
  };

  export type NotificationCreateManyRecipientInput = {
    id?: number;
    senderId?: number | null;
    type: $Enums.NotificationType;
    message: string;
    link?: string | null;
    read?: boolean;
    createdAt?: Date | string;
  };

  export type PostUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUpdateManyWithoutPostNestedInput;
    comments?: CommentUpdateManyWithoutPostNestedInput;
    likes?: LikeUpdateManyWithoutPostNestedInput;
    shares?: ShareUpdateManyWithoutPostNestedInput;
    feed?: FeedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput;
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput;
    likes?: LikeUncheckedUpdateManyWithoutPostNestedInput;
    shares?: ShareUncheckedUpdateManyWithoutPostNestedInput;
    feed?: FeedUncheckedUpdateManyWithoutPostNestedInput;
  };

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    likeCount?: IntFieldUpdateOperationsInput | number;
    commentCount?: IntFieldUpdateOperationsInput | number;
  };

  export type UserTagStatsUpdateWithoutUserInput = {
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    tag?: TagUpdateOneRequiredWithoutUsersNestedInput;
  };

  export type UserTagStatsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserTagStatsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutFeedNestedInput;
  };

  export type FeedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedTrackUpdateWithoutUserInput = {
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedTrackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedTrackUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserHeatmapUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
  };

  export type UserHeatmapUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
  };

  export type UserHeatmapUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    count?: IntFieldUpdateOperationsInput | number;
  };

  export type LikeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutLikesNestedInput;
  };

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type CommentUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput;
  };

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    postId?: IntFieldUpdateOperationsInput | number;
  };

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    postId?: IntFieldUpdateOperationsInput | number;
  };

  export type ShareUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutSharesNestedInput;
  };

  export type ShareUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ShareUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    tag?: TagUpdateOneRequiredWithoutFollowersNestedInput;
  };

  export type TagFollowUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FollowUpdateWithoutFollowerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    followed?: UserUpdateOneRequiredWithoutFollowingNestedInput;
  };

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    id?: IntFieldUpdateOperationsInput | number;
    followedId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: IntFieldUpdateOperationsInput | number;
    followedId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FollowUpdateWithoutFollowedInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    follower?: UserUpdateOneRequiredWithoutFollowersNestedInput;
  };

  export type FollowUncheckedUpdateWithoutFollowedInput = {
    id?: IntFieldUpdateOperationsInput | number;
    followerId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FollowUncheckedUpdateManyWithoutFollowedInput = {
    id?: IntFieldUpdateOperationsInput | number;
    followerId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUpdateWithoutSenderInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    recipient?: UserUpdateOneRequiredWithoutNotificationsReceivedNestedInput;
  };

  export type NotificationUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number;
    recipientId?: IntFieldUpdateOperationsInput | number;
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number;
    recipientId?: IntFieldUpdateOperationsInput | number;
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUpdateWithoutRecipientInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    sender?: UserUpdateOneWithoutNotificationsSentNestedInput;
  };

  export type NotificationUncheckedUpdateWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number;
    senderId?: NullableIntFieldUpdateOperationsInput | number | null;
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type NotificationUncheckedUpdateManyWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number;
    senderId?: NullableIntFieldUpdateOperationsInput | number | null;
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType;
    message?: StringFieldUpdateOperationsInput | string;
    link?: NullableStringFieldUpdateOperationsInput | string | null;
    read?: BoolFieldUpdateOperationsInput | boolean;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagCreateManyPostInput = {
    id?: number;
    tagId: number;
    createdAt?: Date | string;
  };

  export type CommentCreateManyPostInput = {
    id?: number;
    content: string;
    createdAt?: Date | string;
    authorId: number;
  };

  export type LikeCreateManyPostInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type ShareCreateManyPostInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type FeedCreateManyPostInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type PostTagUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    tag?: TagUpdateOneRequiredWithoutPostsNestedInput;
  };

  export type PostTagUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    tagId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type CommentUpdateWithoutPostInput = {
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    author?: UserUpdateOneRequiredWithoutCommentNestedInput;
  };

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
  };

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    authorId?: IntFieldUpdateOperationsInput | number;
  };

  export type LikeUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutLikeNestedInput;
  };

  export type LikeUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type LikeUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ShareUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutSharedNestedInput;
  };

  export type ShareUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ShareUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutFeedNestedInput;
  };

  export type FeedUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type FeedUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagCreateManyTagInput = {
    id?: number;
    postId: number;
    createdAt?: Date | string;
  };

  export type UserTagStatsCreateManyTagInput = {
    id?: number;
    userId: number;
    postCount?: number;
    updatedAt?: Date | string;
    createdAt?: Date | string;
  };

  export type TagFollowCreateManyTagInput = {
    id?: number;
    userId: number;
    createdAt?: Date | string;
  };

  export type PostTagUpdateWithoutTagInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    post?: PostUpdateOneRequiredWithoutTagsNestedInput;
  };

  export type PostTagUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type PostTagUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number;
    postId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserTagStatsUpdateWithoutTagInput = {
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutTagStatsNestedInput;
  };

  export type UserTagStatsUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserTagStatsUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    postCount?: IntFieldUpdateOperationsInput | number;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowUpdateWithoutTagInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    user?: UserUpdateOneRequiredWithoutTagFollowsNestedInput;
  };

  export type TagFollowUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TagFollowUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number;
  };

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF;
}
